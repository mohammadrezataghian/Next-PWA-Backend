{"version":3,"file":"static/js/520.dcb427e0.chunk.js","mappings":"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","sources":["Global/Components/CommonComponents/TextIconStack/TextIconStack.js","Routes/Protected/AddNewMedicalForm/Adapters/GetMedicalFormOptions.js","Routes/Protected/AddNewMedicalForm/Adapters/GetFormTitlesByOption.js","Routes/Protected/AddNewMedicalForm/Hooks/useRecoilAllSates.js","Routes/Protected/AddNewMedicalForm/Hooks/useFormIdBasedRecoil.js","Routes/Protected/AddNewMedicalForm/Hooks/useSetTitle.js","Routes/Protected/AddNewMedicalForm/StateBank/useStateBank.js","Global/Components/CommonComponents/GroupedView/Options/FormOptionTitle.js","webpack://new-ui/./src/Global/Components/CommonComponents/GroupedView/Styles/Medical.Form.Options.module.scss?a418","Global/Components/CommonComponents/GroupedView/Options/EachOptionImage.js","Routes/Protected/AddNewMedicalForm/Components/Forms/EachMedicalFormOption.js","Global/Components/CommonComponents/GroupedView/Options/MedicalFormsOptions.js","Global/Components/CommonComponents/GroupedView/Options/OptionTtileBox.js","Routes/Protected/AddNewMedicalForm/Variables/MedicalFormDefaultValues.js","Global/Components/CommonComponents/GroupedView/Options/MedicalOptionsGroupView.js","../node_modules/@mui/icons-material/esm/Save.js","Routes/Protected/AddNewMedicalForm/Components/FormListView/FormListView.js","webpack://new-ui/./src/Routes/Protected/AddNewMedicalForm/Styles/List.View.Container.module.scss?8e72","../node_modules/@mui/icons-material/esm/Print.js","Routes/Protected/AddNewMedicalForm/Adapters/DeleteSavedForm.js","Routes/Protected/AddNewMedicalForm/Adapters/UnConfirmListView.js","Routes/Protected/AddNewMedicalForm/Components/FormListView/ConfirmUnconfirmButton.js","Routes/Protected/AddNewMedicalForm/Adapters/ConfirmListView.js","Routes/Protected/AddNewMedicalForm/Components/FormListView/ListActions.js","Routes/Protected/AddNewMedicalForm/Functions/HandleDeleteForm.js","Routes/Protected/AddNewMedicalForm/Adapters/GetListViewReport.js","Routes/Protected/AddNewMedicalForm/Components/FormListView/EachList.js","utils/TopOrderLatestDateTime.js","Routes/Protected/AddNewMedicalForm/Components/FormListView/ListViewContainer.js","Routes/Protected/AddNewMedicalForm/AddNewMedicalForm.js"],"sourcesContent":["import { Stack } from \"@mui/material\";\r\nimport { themeColors } from \"Global/JsxThemeColor/JsxThemeColor\";\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst TextIconStack = ({ Icon, Gap, Text, isIconElement }) => {\r\n  const { t, i18n } = useTranslation();\r\n  return (\r\n    <Stack\r\n      spacing={Gap}\r\n      direction={i18n?.language === \"en\" ? \"row\" : \"row-reverse\"}\r\n    >\r\n      {isIconElement ? (\r\n        isIconElement\r\n      ) : (\r\n        <img width={20} height={20} src={Icon} alt={Text} />\r\n      )}\r\n\r\n      <p\r\n        style={{\r\n          color: `${themeColors.ColorPrimary} !important`,\r\n        }}\r\n      >\r\n        {Text}\r\n      </p>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default TextIconStack;\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport Cookies from 'js-cookie';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const GetMedicalFormOptions = async (\r\n  setGatheredData,\r\n  objName\r\n) => {\r\n  const user = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  );\r\n\r\n  return Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_INSERT_EDIT_ELS_FORM}`,\r\n    true,\r\n    {\r\n      allowConferm: true,\r\n      idInput: user.Id,\r\n      idPatient: user.IdPatient,\r\n      idPerson: user.IdPerson,\r\n      idType: 27,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      setGatheredData((prev) => ({\r\n        ...prev,\r\n        [objName.ObjName1]: response.data.Data.NewFormList,\r\n        [objName.ObjName2]:\r\n          response.data.Data.InsertedFormList,\r\n      }));\r\n    }\r\n  });\r\n};\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport Cookies from 'js-cookie';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const GetFormTitlesByOption = async (\r\n  setGatheredData,\r\n  parameters\r\n) => {\r\n  const user = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  );\r\n\r\n  return Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_ELS_FORM_ADD_EDIT}`,\r\n    true,\r\n    {\r\n      idElsFormPatient: 0,\r\n      formID: parameters?.formId,\r\n      patientFormID: 0,\r\n      idPatient: user.IdPatient,\r\n      idType: 27,\r\n      idConfer: user.Id,\r\n      AlloEdit: true,\r\n      idCartablPatient: 0,\r\n      idPerson: user.IdPerson, //nazar sanji \"\"\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      setGatheredData((prev) => ({\r\n        ...prev,\r\n        [parameters?.ObjName1]:\r\n          response?.data?.Data?.Form?.GroupList,\r\n        [parameters?.ObjName2]:\r\n          response?.data?.Data?.Form?.ListDetail,\r\n        [parameters?.ObjName3]:\r\n          response?.data?.Data?.Form?.Id,\r\n        [parameters?.ObjName4]:\r\n          response?.data?.Data?.IdCartbalePatient,\r\n      }));\r\n    } else {\r\n      SwalAlert('error', response.data.resMessage, false);\r\n    }\r\n  });\r\n};\r\n","import React from \"react\";\r\nimport { GetMedicalFormOptions } from \"../Adapters/GetMedicalFormOptions\";\r\nimport { GetFormTitlesByOption } from \"../Adapters/GetFormTitlesByOption\";\r\n\r\nconst useRecoilAllSates = (setFunctionArray, StateRecoil, formId) => {\r\n  const initialRender = React.useRef(true);\r\n  React.useMemo(() => {\r\n    if (!initialRender.current) {\r\n      setFunctionArray([\r\n        {\r\n          functions: GetMedicalFormOptions,\r\n          parameters: {\r\n            ObjName1: \"MedicalFormOptions\",\r\n            ObjName2: \"FormListView\",\r\n          },\r\n        },\r\n        {\r\n          functions: GetFormTitlesByOption,\r\n          parameters: {\r\n            ObjName1: \"FormView\",\r\n            ObjName2: \"GroupElements\",\r\n            ObjName3: \"GroupFormId\",\r\n            ObjName4: \"IdCartablePatient\",\r\n            formId: formId,\r\n          },\r\n        },\r\n      ]);\r\n    }\r\n    initialRender.current = false;\r\n  }, [StateRecoil]);\r\n};\r\n\r\nexport default useRecoilAllSates;\r\n","import React from \"react\";\r\nimport { GetFormTitlesByOption } from \"../Adapters/GetFormTitlesByOption\";\r\n\r\nconst useFormIdBasedRecoil = (formId, setFunctionArray) => {\r\n  React.useEffect(() => {\r\n    if (formId) {\r\n      setFunctionArray((prev) => [\r\n        {\r\n          functions: GetFormTitlesByOption,\r\n          parameters: {\r\n            ObjName1: \"FormView\",\r\n            ObjName2: \"GroupElements\",\r\n            ObjName3: \"GroupFormId\",\r\n            ObjName4: \"IdCartablePatient\",\r\n            formId: formId,\r\n          },\r\n        },\r\n      ]);\r\n    }\r\n  }, [formId]);\r\n};\r\n\r\nexport default useFormIdBasedRecoil;\r\n","import React from \"react\";\r\n\r\nconst useSetTitle = (\r\n  title,\r\n  gatheredData,\r\n  setTitle,\r\n  setformId,\r\n  setStateBank,\r\n  formId,\r\n  setForceRender,\r\n  setStateRecoil\r\n) => {\r\n  React.useEffect(() => {\r\n    if (title.length === 0) {\r\n      setStateBank((prev) => ({\r\n        ...prev,\r\n        ...gatheredData,\r\n        title,\r\n        setTitle,\r\n        setformId,\r\n        setStateBank,\r\n        formId,\r\n        setForceRender,\r\n        setStateRecoil,\r\n      }));\r\n    }\r\n  }, [title]);\r\n};\r\n\r\nexport default useSetTitle;\r\n","import React from \"react\";\r\nimport { GetMedicalFormOptions } from \"../Adapters/GetMedicalFormOptions\";\r\nimport useGatherDataFromApi from \"Global/Hooks/useGatherDataFromApi\";\r\nimport useRecoilAllSates from \"../Hooks/useRecoilAllSates\";\r\nimport useFormIdBasedRecoil from \"../Hooks/useFormIdBasedRecoil\";\r\nimport useSetTitle from \"../Hooks/useSetTitle\";\r\n\r\nconst useStateBank = () => {\r\n  const [forceRender, setForceRender] = React.useState(false);\r\n  const [StateBank, setStateBank] = React.useState([]);\r\n  const [title, setTitle] = React.useState(\"\");\r\n  const [StateRecoil, setStateRecoil] = React.useState(false);\r\n  const [formId, setformId] = React.useState();\r\n  const [FunctionArray, setFunctionArray] = React.useState([\r\n    {\r\n      functions: GetMedicalFormOptions,\r\n      parameters: {\r\n        ObjName1: \"MedicalFormOptions\",\r\n        ObjName2: \"FormListView\",\r\n      },\r\n    },\r\n  ]);\r\n  useRecoilAllSates(setFunctionArray, StateRecoil, formId);\r\n  useFormIdBasedRecoil(formId, setFunctionArray);\r\n  const { gatheredData } = useGatherDataFromApi(FunctionArray, forceRender);\r\n\r\n  useSetTitle(\r\n    title,\r\n    gatheredData,\r\n    setTitle,\r\n    setformId,\r\n    setStateBank,\r\n    formId,\r\n    setForceRender,\r\n    setStateRecoil\r\n  );\r\n  React.useMemo(() => {\r\n    setStateBank((prev) => ({\r\n      ...prev,\r\n      ...gatheredData,\r\n      title,\r\n      setTitle,\r\n      setformId,\r\n      setStateBank,\r\n      formId,\r\n      setForceRender,\r\n      setStateRecoil,\r\n    }));\r\n  }, [JSON.stringify(gatheredData), title, StateRecoil]);\r\n\r\n  return StateBank;\r\n};\r\n\r\nexport default useStateBank;\r\n","import React from \"react\";\r\nimport { Button } from \"@mui/material\";\r\nimport { ArabicToPersian } from \"utils/ConvertToPersianTextFromArabic\";\r\n\r\nconst FormOptionTitle = ({ StateBank }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <Button\r\n        variant=\"outlined\"\r\n        fullWidth\r\n        sx={{\r\n          mb: \"1em\",\r\n          opacity: StateBank?.title?.length > 0 ? \"initial\" : 0,\r\n        }}\r\n      >\r\n        {ArabicToPersian(StateBank?.title)}\r\n      </Button>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default FormOptionTitle;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"MedicalFormOptionsContainer\":\"Medical_Form_Options_MedicalFormOptionsContainer__dRfKg\"};","import React from \"react\";\r\nimport { Stack } from \"@mui/material\";\r\nimport { ArabicToPersian } from \"utils/ConvertToPersianTextFromArabic\";\r\n\r\nconst EachOptionImage = ({ image, element }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <Stack alignItems=\"center\">\r\n        <img width={70} height={70} src={image} alt={element?.Description} />\r\n        <p style={{ textAlign: \"center\" }}>\r\n          {ArabicToPersian(\r\n            element?.Description?.length > 0\r\n              ? element?.Description\r\n              : element?.Name\r\n          )}\r\n        </p>\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default EachOptionImage;\r\n","import React from \"react\";\r\nimport { Box } from \"@mui/material\";\r\nimport EachOptionImage from \"../../../../../Global/Components/CommonComponents/GroupedView/Options/EachOptionImage\";\r\n\r\nconst EachMedicalFormOption = ({ element, stateBank }) => {\r\n  const cachedIcons = JSON.parse(localStorage.getItem(\"icons\"));\r\n  const imgHeader = \"data:image/svg+xml;base64,\";\r\n  return (\r\n    <React.Fragment>\r\n      <Box\r\n        onClick={() => {\r\n          stateBank?.setTitle(\r\n            element?.Description?.length > 0\r\n              ? element?.Description\r\n              : element?.Name\r\n          );\r\n          stateBank?.setformId(element?.ID);\r\n        }}\r\n      >\r\n        <EachOptionImage\r\n          image={\r\n            imgHeader +\r\n            cachedIcons?.PatientFormIcon[`${element?.idTypeForm}.svg`]\r\n          }\r\n          element={element}\r\n        />\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default EachMedicalFormOption;\r\n","import React, { useContext } from \"react\";\r\nimport { GlobalContext } from \"Global/Context/GlobalContextProvider\";\r\nimport { LinearProgress, Stack } from \"@mui/material\";\r\nimport styles from \"../Styles/Medical.Form.Options.module.scss\";\r\nimport EachMedicalFormOption from \"../../../../../Routes/Protected/AddNewMedicalForm/Components/Forms/EachMedicalFormOption\";\r\n\r\nconst MedicalFormsOptions = ({ stateBank }) => {\r\n  const GlobalConstants = useContext(GlobalContext);\r\n  return (\r\n    <React.Fragment>\r\n      {!stateBank.MedicalFormOptions ? (\r\n        <LinearProgress sx={{ width: \"100%\", position: \"sticky\" }} />\r\n      ) : (\r\n        <></>\r\n      )}\r\n      <Stack className={styles.MedicalFormOptionsContainer}>\r\n        {stateBank?.MedicalFormOptions?.map((element) => (\r\n          <EachMedicalFormOption\r\n            element={element}\r\n            key={GlobalConstants.uuidV4()}\r\n            stateBank={stateBank}\r\n          />\r\n        ))}\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default MedicalFormsOptions;\r\n","import React from \"react\";\r\nimport FormOptionTitle from \"./FormOptionTitle\";\r\nimport { Stack } from \"@mui/material\";\r\nimport MedicalFormsOptions from \"./MedicalFormsOptions\";\r\n\r\nconst OptionTtileBox = ({ StateBank }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <Stack\r\n        alignItems=\"center\"\r\n        marginTop={\"1em\"}\r\n        className=\"add-new-els-form-title-box-color-layout\"\r\n      >\r\n        {StateBank?.title?.length > 0 ? (\r\n          <FormOptionTitle StateBank={StateBank} />\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {!StateBank?.title?.length > 0 ? (\r\n          <MedicalFormsOptions stateBank={StateBank} />\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default OptionTtileBox;\r\n","import React from \"react\";\r\nimport { DefaultValueNormalizer } from \"Global/Components/Generators/FormElementCreatorByType/Functions/DefaultValueNormalizer\";\r\n\r\nconst MedicalFormDefaultValues = (StateBank) => {\r\n  const MedicalFormattedValues = DefaultValueNormalizer(StateBank);\r\n  const [MedicalFormDefaultValues, setMedicalFormDefaultValues] =\r\n    React.useState([]);\r\n  React.useEffect(() => {\r\n    if (StateBank) {\r\n      setMedicalFormDefaultValues(MedicalFormattedValues);\r\n    }\r\n  }, [StateBank]);\r\n  return MedicalFormDefaultValues;\r\n};\r\n\r\nexport default MedicalFormDefaultValues;\r\n","import React from \"react\";\r\nimport GroupedView from \"Global/Components/CommonComponents/GroupedView/GroupedView\";\r\nimport MedicalFormDefaultValues from \"Routes/Protected/AddNewMedicalForm/Variables/MedicalFormDefaultValues\";\r\n\r\nconst MedicalOptionsGroupView = ({ StateBank }) => {\r\n  const MedicalDefaultValues = MedicalFormDefaultValues(StateBank);\r\n  return (\r\n    <React.Fragment>\r\n      <GroupedView\r\n        StateBank={StateBank}\r\n        fieldArrayName={\"MedicalDefaultValues\"}\r\n        DefaultValues={MedicalDefaultValues}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default MedicalOptionsGroupView;\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z\"\n}), 'Save');","import { Check, Save, Visibility } from \"@mui/icons-material\";\r\nimport { Stack, ToggleButton } from \"@mui/material\";\r\nimport { themeColors } from \"Global/JsxThemeColor/JsxThemeColor\";\r\nimport AccessControl from \"Global/security/AccessControl\";\r\nimport React from \"react\";\r\n\r\nconst FormListView = ({ setToggleView }) => {\r\n  const [selected, setSelected] = React.useState();\r\n  React.useEffect(() => {\r\n    setToggleView(selected);\r\n  }, [selected]);\r\n  return (\r\n    <React.Fragment>\r\n      <Stack\r\n        alignItems=\"center\"\r\n        sx={{ mt: \"1em\" }}\r\n        className=\"add-new-els-form-color-layout\"\r\n      >\r\n        <ToggleButton\r\n          disabled={AccessControl(\"medical-form-actions-view-forms\")}\r\n          value=\"check\"\r\n          selected={selected}\r\n          onChange={() => {\r\n            setSelected(!selected);\r\n          }}\r\n        >\r\n          {selected ? <Save /> : <Visibility />}\r\n        </ToggleButton>\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default FormListView;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"frameGradient\":\"List_View_Container_frameGradient__d3bPj\",\"Card\":\"List_View_Container_Card__gFONQ\"};","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 8H5c-1.66 0-3 1.34-3 3v6h4v4h12v-4h4v-6c0-1.66-1.34-3-3-3zm-3 11H8v-5h8v5zm3-7c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm-1-9H6v4h12V3z\"\n}), 'Print');","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const DeleteSavedForm = async (\r\n  idElsFormPatient,\r\n  setForceRender\r\n) => {\r\n  return Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_ELS_FORM_PATIENT_DELETE}`,\r\n    true,\r\n    {\r\n      idElsFormPatient,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      setForceRender((prev) => !prev);\r\n    } else {\r\n      SwalAlert(\r\n        'error',\r\n        response.data.resMessage ?? 'خطا در شبکه',\r\n        false\r\n      );\r\n    }\r\n  });\r\n};\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const UnConfirmListView = async (\r\n  idElsFormPatient,\r\n  StateBank\r\n) => {\r\n  const user = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  );\r\n\r\n  return Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_ELS_FORM_UNCONFIRM_ELSFORM}`,\r\n    true,\r\n    {\r\n      idPerson: user.IdPerson,\r\n      idElsFormPatient,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode) {\r\n      StateBank?.setForceRender((prev) => !prev);\r\n    } else {\r\n      SwalAlert('error', response.data.resMessage, false);\r\n    }\r\n  });\r\n};\r\n","import { Cancel, CheckCircle } from \"@mui/icons-material\";\r\nimport { IconButton } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport { UnConfirmListView } from \"../../Adapters/UnConfirmListView\";\r\nimport { ConfirmListView } from \"../../Adapters/ConfirmListView\";\r\nimport AccessControl from \"Global/security/AccessControl\";\r\n\r\nconst ConfirmUnconfirmButton = ({ element, StateBank }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <IconButton\r\n        disabled={\r\n          AccessControl(\"medical-form-actions-unsave-forms\") ||\r\n          AccessControl(\"medical-form-actions-save-forms\")\r\n        }\r\n        sx={{ p: 0 }}\r\n        color={element?.Conferm ? \"error\" : \"success\"}\r\n        onClick={() => {\r\n          if (element?.Conferm) {\r\n            UnConfirmListView(element?.IdReport, StateBank);\r\n          } else {\r\n            ConfirmListView(element?.IdReport, StateBank);\r\n          }\r\n        }}\r\n      >\r\n        {element?.Conferm ? <Cancel /> : <CheckCircle />}\r\n      </IconButton>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ConfirmUnconfirmButton;\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const ConfirmListView = async (\r\n  idElsFormPatient,\r\n  StateBank\r\n) => {\r\n  const user = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  );\r\n\r\n  return Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_ELS_FORM_CONFIRM_ELSFORM}`,\r\n    true,\r\n    {\r\n      idPerson: user.IdPerson,\r\n      idElsFormPatient,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode) {\r\n      StateBank?.setForceRender((prev) => !prev);\r\n    } else {\r\n      SwalAlert('error', response.data.resMessage, false);\r\n    }\r\n  });\r\n};\r\n","import { Delete, Edit, Print } from \"@mui/icons-material\";\r\nimport { IconButton, Stack } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport { DeleteSavedForm } from \"../../Adapters/DeleteSavedForm\";\r\nimport { HandleDeleteForm } from \"../../Functions/HandleDeleteForm\";\r\nimport { GetListViewReport } from \"../../Adapters/GetListViewReport\";\r\nimport ConfirmUnconfirmButton from \"./ConfirmUnconfirmButton\";\r\nimport { GlobalContext } from \"Global/Context/GlobalContextProvider\";\r\nimport { useContext } from \"react\";\r\nimport AccessControl from \"Global/security/AccessControl\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\nimport useCheckScreenWidth from \"Global/Hooks/useCheckScreenWidth\";\r\n\r\nconst ListActions = ({ element, StateBank }) => {\r\n  const GlobalConstants = useContext(GlobalContext);\r\n  const msg = FindLangKey(\"add-medical-font-alert-downloading\");\r\n  const networkErrorMsg = FindLangKey(\"general-public-alert-network-error\");\r\n  const screenWidth = useCheckScreenWidth(); // 1024 for Desktop\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Stack direction=\"row\" spacing={\".5em\"}>\r\n        <IconButton\r\n          disabled={\r\n            element?.Conferm ||\r\n            AccessControl(\"medical-form-actions-delete-form\")\r\n          }\r\n          sx={{ p: 0 }}\r\n          color=\"error\"\r\n          onClick={() => HandleDeleteForm(DeleteSavedForm, element, StateBank)}\r\n        >\r\n          <Delete />\r\n        </IconButton>\r\n        <IconButton\r\n          disabled={AccessControl(\"medical-form-actions-print-form-report\")}\r\n          sx={{ p: 0 }}\r\n          color=\"secondary\"\r\n          onClick={() =>\r\n            GetListViewReport(element?.IdReport, msg, networkErrorMsg)\r\n          }\r\n        >\r\n          <Print />\r\n        </IconButton>\r\n        <IconButton\r\n          sx={{ p: 0 }}\r\n          color=\"primary\"\r\n          disabled={\r\n            element?.Conferm || AccessControl(\"medical-form-actions-edit-forms\")\r\n          }\r\n          onClick={() => {\r\n            GlobalConstants.navigate(\r\n              screenWidth < 1024 ? \"/EditPatientForm\" : \"/main/EditPatientForm\"\r\n            );\r\n            window.sessionStorage.setItem(\r\n              \"EditableForm\",\r\n              JSON.stringify(element)\r\n            );\r\n          }}\r\n        >\r\n          <Edit />\r\n        </IconButton>\r\n        <ConfirmUnconfirmButton element={element} StateBank={StateBank} />\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ListActions;\r\n","import SwalAlert from \"Global/Components/CommonComponents/SwalAlert/SwalAlert\";\r\nexport const HandleDeleteForm = (DeleteSavedForm, element, StateBank) => {\r\n  SwalAlert(\"warning\", \"آیا از حذف اطمینان دارید؟\", true, () => {\r\n    DeleteSavedForm(element.IdReport, StateBank.setForceRender);\r\n  });\r\n};\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport i18next from 'i18next';\r\nimport { env } from 'env';\r\n\r\nimport { Base64Downloader } from 'utils/Base64Downloader';\r\nexport const GetListViewReport = async (\r\n  idElsFormPatient,\r\n  msg,\r\n  networkErrorMsg\r\n) => {\r\n  SwalAlert('warning', msg, false);\r\n  return Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_ELS_FORM_PATIENT_PRINT}`,\r\n    true,\r\n    {\r\n      idElsFormPatient,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      Base64Downloader(\r\n        response.data.Data,\r\n        'report',\r\n        'data:application/pdf;base64'\r\n      );\r\n    } else {\r\n      SwalAlert('error', networkErrorMsg, false);\r\n    }\r\n  });\r\n};\r\n","import React from \"react\";\r\nimport { Card, Stack } from \"@mui/material\";\r\nimport { ArabicToPersian } from \"utils/ConvertToPersianTextFromArabic\";\r\nimport TextIconStack from \"Global/Components/CommonComponents/TextIconStack/TextIconStack\";\r\n// import DateAttendance from \"Assets/icons/app/svg/DateAttendance.svg\";\r\nimport styles from \"../../Styles/List.View.Container.module.scss\";\r\nimport ListActions from \"./ListActions\";\r\n\r\nconst EachList = ({ element, StateBank }) => {\r\n  const cachedIcons = JSON.parse(localStorage.getItem(\"icons\"));\r\n\r\n  const imgHeader = \"data:image/svg+xml;base64,\";\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Card\r\n        elevation={2}\r\n        sx={{ p: \".3em\" }}\r\n        className={`${styles.Card} each-list-color-layout`}\r\n      >\r\n        <Stack sx={{ backgroundColor: \"white\", p: \"1em\" }} spacing={\"1em\"}>\r\n          <TextIconStack\r\n            Text={`${element.Date}     ${element.Time}`}\r\n            Icon={imgHeader + cachedIcons?.GeneralIcon[\"DateAttendance.svg\"]}\r\n            Gap={\"1em\"}\r\n          />\r\n          <TextIconStack\r\n            Text={`${ArabicToPersian(element.InsertUser)}`}\r\n            Icon={imgHeader + cachedIcons?.GeneralIcon[\"FullName.svg\"]}\r\n            Gap={\"1em\"}\r\n          />\r\n          <TextIconStack\r\n            Text={`${element.Name}`}\r\n            Icon={imgHeader + cachedIcons?.GeneralIcon[\"Detection.svg\"]}\r\n            Gap={\"1em\"}\r\n          />\r\n          <TextIconStack\r\n            Text={\r\n              element.LastUserUpdate.trim().length === 0\r\n                ? \"بدون تغییر\"\r\n                : `${ArabicToPersian(element.LastUserUpdate)}`\r\n            }\r\n            Icon={imgHeader + cachedIcons?.GeneralIcon[\"DateAttendance.svg\"]}\r\n            Gap={\"1em\"}\r\n          />\r\n          <ListActions element={element} StateBank={StateBank} />\r\n        </Stack>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default EachList;\r\n","import moment from \"moment-jalaali\";\r\nexport const TopOrderLatestDateTime = (array) => {\r\n  const sortedArray = array.sort((a, b) => {\r\n    const aDate = moment(a.Date, \"jYYYY/jM/jD\").valueOf();\r\n    const bDate = moment(b.Date, \"jYYYY/jM/jD\").valueOf();\r\n    if (aDate === bDate) {\r\n      const aTime = moment(a.Time, \"HH:mm\").valueOf();\r\n      const bTime = moment(b.Time, \"HH:mm\").valueOf();\r\n      return bTime - aTime;\r\n    }\r\n    return bDate - aDate;\r\n  });\r\n  return sortedArray;\r\n};\r\n","import React from \"react\";\r\nimport { Alert, Stack } from \"@mui/material\";\r\nimport { GlobalContext } from \"Global/Context/GlobalContextProvider\";\r\nimport { useContext } from \"react\";\r\nimport EachList from \"./EachList\";\r\nimport { TopOrderLatestDateTime } from \"utils/TopOrderLatestDateTime\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\n\r\nconst ListViewContainer = ({ listArray, StateBank }) => {\r\n  const GlobalConstants = useContext(GlobalContext);\r\n  const languageArray = useContext(GlobalContext)?.LanguageArray;\r\n  return (\r\n    <React.Fragment>\r\n      <Stack sx={{ mt: \"1em\" }} spacing=\".5em\">\r\n        {TopOrderLatestDateTime(listArray)?.length > 0 ? (\r\n          TopOrderLatestDateTime(listArray)?.map((element) => (\r\n            <EachList\r\n              element={element}\r\n              key={GlobalConstants.uuidV4()}\r\n              StateBank={StateBank}\r\n            />\r\n          ))\r\n        ) : (\r\n          <Alert\r\n            severity=\"warning\"\r\n            variant=\"outlined\"\r\n            sx={{ display: \"flex\", justifyContent: \"center\" }}\r\n          >\r\n            {FindLangKey(\"general-public-flat-alert-no-data\", languageArray)}\r\n          </Alert>\r\n        )}\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ListViewContainer;\r\n","import React from \"react\";\r\nimport { Container } from \"@mui/material\";\r\nimport useStateBank from \"./StateBank/useStateBank\";\r\nimport OptionTtileBox from \"Global/Components/CommonComponents/GroupedView/Options/OptionTtileBox\";\r\nimport MedicalOptionsGroupView from \"Global/Components/CommonComponents/GroupedView/Options/MedicalOptionsGroupView\";\r\nimport FormListView from \"./Components/FormListView/FormListView\";\r\nimport ListViewContainer from \"./Components/FormListView/ListViewContainer\";\r\n\r\nconst AddNewMedicalForm = () => {\r\n  const StateBank = useStateBank();\r\n  const [toggleView, setToggleView] = React.useState(false);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Container maxWidth=\"md\">\r\n        <FormListView setToggleView={setToggleView} />\r\n        {!toggleView ? (\r\n          <>\r\n            <OptionTtileBox StateBank={StateBank} />\r\n            <MedicalOptionsGroupView StateBank={StateBank} />\r\n          </>\r\n        ) : (\r\n          <ListViewContainer\r\n            listArray={StateBank?.FormListView}\r\n            StateBank={StateBank}\r\n          />\r\n        )}\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddNewMedicalForm;\r\n//\r\n"],"names":["_ref","Icon","Gap","Text","isIconElement","t","i18n","useTranslation","_jsxs","Stack","spacing","direction","language","children","_jsx","width","height","src","alt","style","color","concat","themeColors","GetMedicalFormOptions","async","setGatheredData","objName","user","JSON","parse","sessionStorage","getItem","Post","process","allowConferm","idInput","Id","idPatient","IdPatient","idPerson","IdPerson","idType","then","response","data","resCode","prev","ObjName1","Data","NewFormList","ObjName2","InsertedFormList","GetFormTitlesByOption","parameters","idElsFormPatient","formID","formId","patientFormID","idConfer","AlloEdit","idCartablPatient","_response$data","_response$data$Data","_response$data$Data$F","_response$data2","_response$data2$Data","_response$data2$Data$","_response$data3","_response$data3$Data","_response$data3$Data$","_response$data4","_response$data4$Data","Form","GroupList","ListDetail","ObjName3","ObjName4","IdCartbalePatient","SwalAlert","resMessage","useRecoilAllSates","setFunctionArray","StateRecoil","initialRender","React","current","functions","useFormIdBasedRecoil","useSetTitle","title","gatheredData","setTitle","setformId","setStateBank","setForceRender","setStateRecoil","length","useStateBank","forceRender","StateBank","FunctionArray","useGatherDataFromApi","stringify","_StateBank$title","Button","variant","fullWidth","sx","mb","opacity","ArabicToPersian","_element$Description","image","element","alignItems","Description","textAlign","Name","stateBank","cachedIcons","localStorage","Box","onClick","ID","EachOptionImage","PatientFormIcon","idTypeForm","_stateBank$MedicalFor","GlobalConstants","useContext","GlobalContext","MedicalFormOptions","_Fragment","LinearProgress","position","className","styles","map","EachMedicalFormOption","uuidV4","_StateBank$title2","marginTop","FormOptionTitle","MedicalFormsOptions","MedicalFormattedValues","DefaultValueNormalizer","MedicalFormDefaultValues","setMedicalFormDefaultValues","MedicalDefaultValues","GroupedView","fieldArrayName","DefaultValues","createSvgIcon","d","setToggleView","selected","setSelected","mt","ToggleButton","disabled","AccessControl","value","onChange","Save","Visibility","DeleteSavedForm","_response$data$resMes","IconButton","p","Conferm","UnConfirmListView","IdReport","ConfirmListView","Cancel","CheckCircle","msg","FindLangKey","networkErrorMsg","screenWidth","useCheckScreenWidth","HandleDeleteForm","Delete","Base64Downloader","GetListViewReport","Print","navigate","window","setItem","Edit","ConfirmUnconfirmButton","imgHeader","Card","elevation","backgroundColor","TextIconStack","Date","Time","GeneralIcon","InsertUser","LastUserUpdate","trim","ListActions","TopOrderLatestDateTime","array","sort","a","b","aDate","moment","valueOf","bDate","aTime","_useContext","_TopOrderLatestDateTi","_TopOrderLatestDateTi2","listArray","languageArray","LanguageArray","EachList","Alert","severity","display","justifyContent","AddNewMedicalForm","toggleView","Container","maxWidth","FormListView","ListViewContainer","OptionTtileBox","MedicalOptionsGroupView"],"sourceRoot":""}