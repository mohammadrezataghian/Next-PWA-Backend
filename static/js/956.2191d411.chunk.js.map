{"version":3,"file":"static/js/956.2191d411.chunk.js","mappings":"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","sources":["Global/Hooks/useSortSelectedPatientsToTop.js","Global/shared/page.refresh.atom.js","Routes/Protected/CurrentPatients/Components/EachPatient/component/PatientInfoStack.js","Routes/Protected/CurrentPatients/Adapters/CancelReferral.js","Routes/Protected/CurrentPatients/Components/Operations/variables/variables.js","Routes/Protected/CurrentPatients/Adapters/EndPatientTreatment.js","Routes/Protected/CurrentPatients/Components/Operations/Operations.js","Routes/Protected/CurrentPatients/Components/EachPatient/Functions/HandleControlContextMenu.js","Routes/Protected/CurrentPatients/Components/EachPatient/logic/useEachPatientLogic.js","Routes/Protected/CurrentPatients/Components/EachPatient/variables/variables.js","Routes/Protected/CurrentPatients/Components/EachPatient/component/DateTimeHoozor/DateTimeHoozor.js","Routes/Protected/CurrentPatients/Adapters/ChangeHozoorDateTime.js","Routes/Protected/CurrentPatients/Adapters/ChangePatientDetection.js","Routes/Protected/CurrentPatients/Components/EachPatient/component/DetectionBox/DetectionBox.js","Routes/Protected/CurrentPatients/Components/EachPatient/Functions/HandleSetQuickActions.js","Routes/Protected/CurrentPatients/Components/EachPatient/EachPatient.js","../node_modules/@mui/icons-material/esm/KeyboardDoubleArrowUp.js","webpack://new-ui/./src/Routes/Protected/CurrentPatients/Styles/Current.Patient.module.scss?345f"],"sourcesContent":["import React from \"react\";\r\n\r\nconst useSortSelectedPatientsToTop = (PatientList) => {\r\n  const [userFile, setUserFile] = React.useState(null);\r\n  React.useEffect(() => {\r\n    const userFileValue = sessionStorage.getItem(\"userFile\");\r\n    if (userFileValue && userFileValue.length > 0) {\r\n      setUserFile(JSON.parse(userFileValue));\r\n    }\r\n    const storageEventHandler = (event) => {\r\n      if (event.key === \"userFile\") {\r\n        const value = event.newValue;\r\n        setUserFile(value && value.length > 0 ? value : null);\r\n      }\r\n    };\r\n    window.addEventListener(\"storage\", storageEventHandler);\r\n    return () => {\r\n      window.removeEventListener(\"storage\", storageEventHandler);\r\n    };\r\n  }, []);\r\n  const sortedObjects = PatientList?.sort((a, b) => {\r\n    if (userFile) {\r\n      const aIndex = userFile.indexOf(a.Id);\r\n      const bIndex = userFile.indexOf(b.Id);\r\n      if (aIndex === -1) {\r\n        return 1; // a is not found in numbers, move it dow\r\n      } else if (bIndex === -1) {\r\n        return -1;\r\n      } else {\r\n        return aIndex - bIndex;\r\n      }\r\n    }\r\n  });\r\n\r\n  const userFilePatients = userFile ? sortedObjects : PatientList;\r\n  return userFilePatients;\r\n};\r\n\r\nexport default useSortSelectedPatientsToTop;\r\n","import { atom } from \"jotai\";\r\n\r\nexport const pageRefreshAtom = atom(false);\r\n","import { Stack } from '@mui/material';\r\nimport React from 'react';\r\n\r\nconst PatientInfoStack = ({\r\n  ImageSource,\r\n  paragraph,\r\n  clickable,\r\n  navigate,\r\n  path,\r\n  Patient,\r\n  func,\r\n  setForceRender,\r\n  i18n,\r\n}) => {\r\n  return (\r\n    <React.Fragment>\r\n      {ImageSource ? (\r\n        <Stack\r\n          direction={\r\n            i18n?.language === 'en' ? 'row' : 'row-reverse'\r\n          }\r\n          spacing={2}\r\n          sx={{ cursor: clickable && 'pointer' }}\r\n          onClick={() => {\r\n            Patient &&\r\n              window.sessionStorage.setItem(\r\n                'patient',\r\n                JSON.stringify(Patient)\r\n              );\r\n            path && navigate(path);\r\n            func && func(Patient, setForceRender);\r\n          }}\r\n        >\r\n          <img\r\n            src={ImageSource}\r\n            alt={paragraph ?? 'unknown'}\r\n            width={20}\r\n            height={20}\r\n            loading=\"...\"\r\n          />\r\n          {clickable ? (\r\n            <h4>{paragraph}</h4>\r\n          ) : (\r\n            <p\r\n              style={{\r\n                textAlign:\r\n                  i18n?.language === 'en' && 'left',\r\n              }}\r\n            >\r\n              {paragraph}\r\n            </p>\r\n          )}\r\n        </Stack>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PatientInfoStack;\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nconst CancelReferral = () => {\r\n  const confirmCancelMsg = FindLangKey(\r\n    'current-patients-alert-confirm-cancel-redirect'\r\n  );\r\n  const cancelSuccessMsg = FindLangKey(\r\n    'current-patients-alert-cancel-successful'\r\n  );\r\n  const runAPI = (Patient, setForceRender) => {\r\n    const DialogFn = () => {\r\n      Post(\r\n        'POST',\r\n        `${process.env.REACT_APP_API_URL_API_CANCEL_REDIRECT}`,\r\n        true,\r\n        {\r\n          idAppWorkList: Patient?.Id,\r\n          idPerson: Patient?.IdPerson,\r\n          cancleCouse: '',\r\n        }\r\n      ).then((response) => {\r\n        if (response.data.resCode === 1) {\r\n          SwalAlert('success', cancelSuccessMsg, false);\r\n          setForceRender((prev) => !prev);\r\n        } else {\r\n          SwalAlert(\r\n            'warning',\r\n            response.data.resMessage,\r\n            false\r\n          );\r\n        }\r\n      });\r\n    };\r\n    SwalAlert('warning', confirmCancelMsg, true, DialogFn);\r\n  };\r\n  return runAPI;\r\n};\r\nexport default CancelReferral;\r\n","import { EndPatientTreatment } from \"Routes/Protected/CurrentPatients/Adapters/EndPatientTreatment\";\r\nimport { useContext } from \"react\";\r\nimport { GlobalContext } from \"Global/Context/GlobalContextProvider\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\nimport AccessControl from \"Global/security/AccessControl\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport CancelReferral from \"Routes/Protected/CurrentPatients/Adapters/CancelReferral\";\r\nimport useCheckScreenWidth from \"Global/Hooks/useCheckScreenWidth\";\r\nimport { useAtom } from \"jotai\";\r\nimport { pageRefreshAtom } from \"Global/shared/page.refresh.atom\";\r\nexport const OperationsVariables = (t, setForceRender, disableActions) => {\r\n  const screenWidth = useCheckScreenWidth(); // 1024 for Desktop\r\n  const languageArray = useContext(GlobalContext)?.LanguageArray;\r\n  const { pathname } = useLocation();\r\n  const runAPI = CancelReferral();\r\n  const [, setPageRefresh] = useAtom(pageRefreshAtom);\r\n  const endTreatment = EndPatientTreatment(setPageRefresh, setForceRender);\r\n\r\n  const cachedIcons = JSON.parse(localStorage.getItem(\"icons\"));\r\n  const imgHeader = \"data:image/svg+xml;base64,\";\r\n\r\n  const DataArray = [\r\n    {\r\n      ...(disableActions\r\n        ? {}\r\n        : {\r\n            title: FindLangKey(\"general-public-add-new-confer\", languageArray),\r\n            image:\r\n              imgHeader +\r\n              cachedIcons?.GeneralIcon[\"MedicalServiceRegister.svg\"],\r\n            path: screenWidth > 1024 ? \"/main/AddNewConfer\" : \"/AddNewConfer\",\r\n            func: sessionStorage.removeItem(\"savedServices\"),\r\n            disabled: AccessControl(\r\n              pathname.toLowerCase() === \"/CurrentPatients\".toLowerCase()\r\n                ? \"current-patient-action-set-confer\"\r\n                : \"patient-list-action-set-confer\"\r\n            ),\r\n          }),\r\n    },\r\n    {\r\n      title: FindLangKey(\r\n        \"current-patients-patient-actions-list-service-confer\",\r\n        languageArray\r\n      ),\r\n      image: imgHeader + cachedIcons?.GeneralIcon[\"ViewServices.svg\"],\r\n      path:\r\n        screenWidth > 1024 ? \"/main/ListServiceConfer\" : \"/ListServiceConfer\",\r\n      disabled: AccessControl(\r\n        pathname.toLowerCase() === \"/CurrentPatients\".toLowerCase()\r\n          ? \"current-patient-action-list-service-confer\"\r\n          : \"patient-list-action-list-service-confer\"\r\n      ),\r\n    },\r\n    {\r\n      ...(disableActions\r\n        ? {}\r\n        : {\r\n            title: FindLangKey(\r\n              \"current-patients-patient-actions-medical-form\",\r\n              languageArray\r\n            ),\r\n            image: imgHeader + cachedIcons?.GeneralIcon[\"FileRegistration.svg\"],\r\n            path:\r\n              screenWidth > 1024\r\n                ? \"/main/AddNewElectronicForm\"\r\n                : \"/AddNewElectronicForm\",\r\n            disabled: AccessControl(\r\n              pathname.toLowerCase() === \"/CurrentPatients\".toLowerCase()\r\n                ? \"current-patient-action-medical-form\"\r\n                : \"patient-list-action-medical-form\"\r\n            ),\r\n          }),\r\n    },\r\n    {\r\n      title: FindLangKey(\r\n        \"current-patients-patient-actions-service-summary\",\r\n        languageArray\r\n      ),\r\n      image: imgHeader + cachedIcons?.GeneralIcon[\"FileRegistration.svg\"],\r\n      path:\r\n        screenWidth > 1024\r\n          ? \"/main/ServiceReportSummary\"\r\n          : \"/ServiceReportSummary\",\r\n      disabled: AccessControl(\r\n        pathname.toLowerCase() === \"/CurrentPatients\".toLowerCase()\r\n          ? \"current-patient-action-confer-summurary\"\r\n          : \"patient-list-action-confer-summurary\"\r\n      ),\r\n    },\r\n\r\n    {\r\n      ...(disableActions\r\n        ? {}\r\n        : {\r\n            title: FindLangKey(\r\n              \"current-patients-patient-actions-end-treatment\",\r\n              languageArray\r\n            ),\r\n            image: imgHeader + cachedIcons?.GeneralIcon[\"EndOfActivity.svg\"],\r\n            func: endTreatment,\r\n            disabled: AccessControl(\r\n              pathname.toLowerCase() === \"/CurrentPatients\".toLowerCase()\r\n                ? \"current-patient-action-end-treatment\"\r\n                : \"patient-list-action-end-treatment\"\r\n            ),\r\n          }),\r\n    },\r\n\r\n    {\r\n      ...(disableActions\r\n        ? {}\r\n        : {\r\n            title: FindLangKey(\r\n              \"current-patients-patient-actions-cancel-referral\",\r\n              languageArray\r\n            ),\r\n            image: imgHeader + cachedIcons?.GeneralIcon[\"CanceledReferral.svg\"],\r\n            func: runAPI,\r\n            disabled: AccessControl(\r\n              pathname.toLowerCase() === \"/CurrentPatients\".toLowerCase()\r\n                ? \"current-patient-action-cancel-referral\"\r\n                : \"patient-list-action-cancel-redirect\"\r\n            ),\r\n          }),\r\n    },\r\n    {\r\n      title: FindLangKey(\"general-public-refer-to\", languageArray),\r\n      image: imgHeader + cachedIcons?.GeneralIcon[\"ReferTo.svg\"],\r\n      path: screenWidth > 1024 ? \"/main/ReferTo\" : \"/ReferTo\",\r\n      disabled: AccessControl(\r\n        pathname.toLowerCase() === \"/CurrentPatients\".toLowerCase()\r\n          ? \"current-patient-action-refer-to\"\r\n          : \"patient-list-action-refer-to\"\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return DataArray;\r\n};\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const EndPatientTreatment = (\r\n  setPageRefresh,\r\n  setForceRender\r\n) => {\r\n  const confirmEndTreatmentMsg = FindLangKey(\r\n    'current-patients-alert-end-treamtment-sure'\r\n  );\r\n  const endTreatment = (patient) => {\r\n    const dialogFn = () =>\r\n      Post(\r\n        'POST',\r\n        `${process.env.REACT_APP_API_URL_API_END_USER_TREATMENT}`,\r\n        true,\r\n        {\r\n          idAppWorkList: patient?.Id,\r\n        }\r\n      ).then((response) => {\r\n        if (response.data.resCode === 1) {\r\n          SwalAlert(\r\n            'success',\r\n            response.data.resMessage,\r\n            false\r\n          );\r\n        } else {\r\n          SwalAlert(\r\n            'warning',\r\n            response.data.resMessage,\r\n            false\r\n          );\r\n        }\r\n        setForceRender((prev) => !prev);\r\n      });\r\n    SwalAlert(\r\n      'warning',\r\n      confirmEndTreatmentMsg,\r\n      true,\r\n      dialogFn\r\n    );\r\n  };\r\n  return endTreatment;\r\n};\r\n","import { Container } from \"@mui/material\";\r\nimport React, { useContext } from \"react\";\r\nimport PatientInfoStack from \"../EachPatient/component/PatientInfoStack\";\r\nimport { OperationsVariables } from \"./variables/variables\";\r\nimport { GlobalContext } from \"Global/Context/GlobalContextProvider\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\nimport { ArabicToPersian } from \"utils/ConvertToPersianTextFromArabic\";\r\nconst Operations = ({ Patient, setForceRender, disableActions }) => {\r\n  const { t, i18n } = useTranslation();\r\n  const OperationsData = OperationsVariables(t, setForceRender, disableActions);\r\n  const GlobalConstants = useContext(GlobalContext);\r\n\r\n  const imgHeader = \"data:image/svg+xml;base64,\";\r\n\r\n  const cachedIcons = JSON.parse(localStorage.getItem(\"icons\"));\r\n\r\n  const patientAddress = `${FindLangKey(\r\n    \"general-public-address\"\r\n  )}: ${ArabicToPersian(Patient.PatientAddress)}`;\r\n\r\n  const patientForm = `${FindLangKey(\"general-public-mobile-number\")}: ${\r\n    Patient.PatientMobile\r\n  }`;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <PatientInfoStack\r\n        setForceRender={setForceRender}\r\n        ImageSource={imgHeader + cachedIcons?.GeneralIcon[\"Address.svg\"]}\r\n        paragraph={patientAddress}\r\n        i18n={i18n}\r\n      />\r\n      <PatientInfoStack\r\n        setForceRender={setForceRender}\r\n        ImageSource={imgHeader + cachedIcons?.GeneralIcon[\"Mobile.svg\"]}\r\n        paragraph={patientForm}\r\n        i18n={i18n}\r\n      />\r\n\r\n      <Container>\r\n        <hr />\r\n      </Container>\r\n\r\n      {OperationsData?.map(\r\n        (element) =>\r\n          !element?.disabled && (\r\n            <PatientInfoStack\r\n              ImageSource={element?.image}\r\n              paragraph={element?.title}\r\n              key={GlobalConstants.uuidV4()}\r\n              clickable={true}\r\n              navigate={GlobalConstants.navigate}\r\n              path={element.path}\r\n              Patient={Patient}\r\n              func={element?.func}\r\n              setForceRender={setForceRender}\r\n              i18n={i18n}\r\n            />\r\n          )\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Operations;\r\n","export const HandleControlContextMenu = (setUserFileArray, Patient) => {\r\n  let userFileArray = JSON.parse(sessionStorage.getItem(\"userFile\")) || [];\r\n  if (userFileArray.indexOf(Patient.Id) === -1) {\r\n    userFileArray.push(Patient.Id);\r\n    sessionStorage.setItem(\"userFile\", JSON.stringify(userFileArray));\r\n    setUserFileArray(JSON.parse(sessionStorage.getItem(\"userFile\")));\r\n  } else {\r\n    let index = userFileArray.indexOf(Patient.Id);\r\n    userFileArray.splice(index, 1);\r\n    sessionStorage.setItem(\"userFile\", JSON.stringify(userFileArray));\r\n    setUserFileArray(JSON.parse(sessionStorage.getItem(\"userFile\")));\r\n  }\r\n};\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { InformationDataArray } from \"../variables/variables\";\r\nimport { GlobalContext } from \"Global/Context/GlobalContextProvider\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\n\r\nconst useEachPatientLogic = (Patient) => {\r\n  const [userFileArray, setUserFileArray] = useState(\r\n    JSON.parse(sessionStorage.getItem(\"userFile\")) || []\r\n  );\r\n\r\n  const [quickOperations, setQuickOperations] = useState(\r\n    JSON.parse(sessionStorage.getItem(\"quickActions\")) || []\r\n  );\r\n\r\n  const informationData = InformationDataArray(Patient);\r\n  const GlobalConstants = useContext(GlobalContext);\r\n  const { i18n } = useTranslation();\r\n  const languageArray = useContext(GlobalContext)?.LanguageArray;\r\n\r\n  const cachedIcons = JSON.parse(localStorage.getItem(\"icons\"));\r\n  const imgHeader = \"data:image/svg+xml;base64,\";\r\n\r\n  const timeHozoorLabel = `${FindLangKey(\r\n    \"general-public-label-presence-time\"\r\n  )}: ${Patient.DateHozoor}  ${Patient.TimeHozoor}`;\r\n\r\n  return [\r\n    userFileArray,\r\n    setUserFileArray,\r\n    informationData,\r\n    GlobalConstants,\r\n    languageArray,\r\n    cachedIcons,\r\n    imgHeader,\r\n    timeHozoorLabel,\r\n    i18n,\r\n    quickOperations,\r\n    setQuickOperations,\r\n  ];\r\n};\r\n\r\nexport default useEachPatientLogic;\r\n","import { ArabicToPersian } from \"utils/ConvertToPersianTextFromArabic\";\r\nimport { useContext } from \"react\";\r\nimport { GlobalContext } from \"Global/Context/GlobalContextProvider\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\nexport const InformationDataArray = (Patient) => {\r\n  const languageArray = useContext(GlobalContext)?.LanguageArray;\r\n  const cachedIcons = JSON.parse(localStorage.getItem(\"icons\"));\r\n  const imgHeader = \"data:image/svg+xml;base64,\";\r\n  const DataArray = [\r\n    {\r\n      title: `${FindLangKey(\r\n        \"general-public-insurance-type\",\r\n        languageArray\r\n      )}: ${ArabicToPersian(Patient.InsuranceName)}`,\r\n      image: imgHeader + cachedIcons?.GeneralIcon[\"Insurance.svg\"],\r\n    },\r\n    {\r\n      title: `${FindLangKey(\r\n        \"general-public-label-patient\",\r\n        languageArray\r\n      )}: ${ArabicToPersian(Patient.NamePatient)} ${ArabicToPersian(\r\n        Patient.FamilyPatient\r\n      )} ${Patient.AgePatient} سال`,\r\n      image: imgHeader + cachedIcons?.GeneralIcon[\"PatientName.svg\"],\r\n    },\r\n    // {\r\n    //   title: `${FindLangKey(\r\n    //     \"general-public-address\",\r\n    //     languageArray\r\n    //   )}: ${ArabicToPersian(Patient.PatientAddress)}`,\r\n    //   image: imgHeader + cachedIcons?.GeneralIcon[\"Address.svg\"],\r\n    // },\r\n\r\n    // {\r\n    //   title: `${FindLangKey(\r\n    //     \"general-public-label-presence-time\",\r\n    //     languageArray\r\n    //   )}: ${Patient.DateHozoor}  ${Patient.TimeHozoor}`,\r\n    //   image: imgHeader + cachedIcons?.GeneralIcon[\"AttendenceTime.svg\"],\r\n    // },\r\n\r\n    // {\r\n    //   title: `${FindLangKey(\"general-public-mobile-number\", languageArray)}: ${\r\n    //     Patient.PatientMobile\r\n    //   }`,\r\n    //   image: imgHeader + cachedIcons?.GeneralIcon[\"Mobile.svg\"],\r\n    // },\r\n\r\n    // {\r\n    //   title: `${FindLangKey(\r\n    //     \"general-public-label-diagnose\",\r\n    //     languageArray\r\n    //   )} : ${Patient.NameDiagnosis}`,\r\n    //   image: imgHeader + cachedIcons?.GeneralIcon[\"Detection.svg\"],\r\n    // },\r\n  ];\r\n  return DataArray;\r\n};\r\n","import React, { useMemo, useState } from 'react';\r\nimport { Stack, Button } from '@mui/material';\r\nimport EditableSingularTimePicker from 'Global/Components/EditableComponents/EditableSingularTimePicker/EditableSingularTimePicker';\r\nimport EditableMuiDatePicker from 'Global/Components/EditableComponents/EditableMuiDatePicker/EditableMuiDatePicker';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport { TimeToMinutes } from 'utils/TimeToMinutes';\r\nimport { ChangeHozoorDateTime } from 'Routes/Protected/CurrentPatients/Adapters/ChangeHozoorDateTime';\r\nimport { themeColors } from 'Global/JsxThemeColor/JsxThemeColor';\r\n\r\nconst DateTimeHoozor = ({ Patient, setForceRender }) => {\r\n  const changeTimeLabel = FindLangKey(\r\n    'general-public-btn-save'\r\n  );\r\n  const timeHozooerLabel = FindLangKey(\r\n    'general-public-label-presence-time'\r\n  );\r\n  const dateHozooerLabel = FindLangKey(\r\n    'general-public-label-presence-date'\r\n  );\r\n\r\n  const [dateTime, setDateTime] = useState({\r\n    timeHoozoor: TimeToMinutes(Patient?.TimeHozoor),\r\n    dateHoozoor: '',\r\n  });\r\n\r\n  const changePresence = ChangeHozoorDateTime(\r\n    dateTime.dateHoozoor,\r\n    dateTime.timeHoozoor,\r\n    Patient,\r\n    setForceRender\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Stack gap=\".5em\">\r\n        <Stack\r\n          direction=\"row\"\r\n          gap=\".5em\"\r\n          justifyContent=\"space-between\"\r\n        >\r\n          <EditableSingularTimePicker\r\n            initalValue={Patient?.TimeHozoor}\r\n            OutputInMinutes={true}\r\n            label={timeHozooerLabel}\r\n            onChange={(val) => {\r\n              setDateTime((prev) => ({\r\n                ...prev,\r\n                timeHoozoor: val,\r\n              }));\r\n            }}\r\n            fullWidth\r\n          />\r\n          <EditableMuiDatePicker\r\n            disableInit={true}\r\n            initialValue={Patient?.DateHozoor}\r\n            Placeholder={dateHozooerLabel}\r\n            onChange={(val) => {\r\n              setDateTime((prev) => ({\r\n                ...prev,\r\n                dateHoozoor: val,\r\n              }));\r\n            }}\r\n            disableToday={false}\r\n            fullWidth\r\n          />\r\n        </Stack>\r\n        <br />\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            changePresence(Patient);\r\n          }}\r\n          sx={{\r\n            mb: '1em',\r\n            mt: '-.6em',\r\n            color: `${themeColors.ColorPrimary} !important`,\r\n          }}\r\n        >\r\n          {changeTimeLabel}\r\n        </Button>\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DateTimeHoozor;\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const ChangeHozoorDateTime = (\r\n  date,\r\n  time,\r\n  patient,\r\n  setForceRender\r\n) => {\r\n  const confirmEditTimeHozoor = FindLangKey(\r\n    'current-patients-label-change-presence'\r\n  );\r\n\r\n  const changePresence = (patient) => {\r\n    const dialogFn = () =>\r\n      Post(\r\n        'POST',\r\n        `${process.env.REACT_APP_API_URL_API_CHANGE_PRESENCEDATE}`,\r\n        true,\r\n        {\r\n          dateHozoor: date,\r\n          timeHozoor: time,\r\n          idAppWorkList: patient?.Id,\r\n        }\r\n      )\r\n        .then((response) => {\r\n          if (response.data.resCode === 1) {\r\n            SwalAlert(\r\n              'success',\r\n              response.data.resMessage,\r\n              false\r\n            );\r\n          } else {\r\n            SwalAlert(\r\n              'warning',\r\n              response.data.resMessage,\r\n              false\r\n            );\r\n          }\r\n        })\r\n        .then(() => {\r\n          setForceRender((prev) => !prev);\r\n        });\r\n    SwalAlert(\r\n      'warning',\r\n      confirmEditTimeHozoor,\r\n      true,\r\n      dialogFn\r\n    );\r\n  };\r\n  return changePresence;\r\n};\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const ChangePatientDetection = (setForceRender) => {\r\n  const confirmEditTimeHozoor = FindLangKey(\r\n    'current-patients-label-change-detection'\r\n  );\r\n\r\n  const changeDetection = (data) => {\r\n    const dialogFn = () =>\r\n      Post(\r\n        'POST',\r\n        `${process.env.REACT_APP_API_URL_API_EDIT_TASHKHIST_ERJA}`,\r\n        true,\r\n        {\r\n          ...data,\r\n        }\r\n      )\r\n        .then((response) => {\r\n          console.log('response->', { response, data });\r\n          if (response.data.resCode === 1) {\r\n            SwalAlert(\r\n              'success',\r\n              response.data.resMessage,\r\n              false\r\n            );\r\n          } else {\r\n            SwalAlert(\r\n              'warning',\r\n              response.data.resMessage,\r\n              false\r\n            );\r\n          }\r\n        })\r\n        .then(() => {\r\n          setForceRender((prev) => !prev);\r\n        });\r\n    SwalAlert(\r\n      'warning',\r\n      confirmEditTimeHozoor,\r\n      true,\r\n      dialogFn\r\n    );\r\n  };\r\n  return changeDetection;\r\n};\r\n","import React, { useMemo } from 'react';\r\nimport {\r\n  Stack,\r\n  LinearProgress,\r\n  Button,\r\n} from '@mui/material';\r\nimport EditableCustomizableSelect from 'Global/Components/EditableComponents/EditableCustomizableSelect/EditableCustomizableSelect';\r\nimport { ArabicToPersian } from 'utils/ConvertToPersianTextFromArabic';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport SingleReactHookFormWrapper from 'Global/Components/Generators/SingleReactHookFormWrapper/SingleReactHookFormWrapper';\r\nimport { useForm } from 'react-hook-form';\r\nimport SubmitButton from 'Global/Components/UnEditableComponents/SubmitButton/SubmitButton';\r\nimport { ChangePatientDetection } from 'Routes/Protected/CurrentPatients/Adapters/ChangePatientDetection';\r\nimport useCheckScreenWidth from 'Global/Hooks/useCheckScreenWidth';\r\n\r\nconst DetectionBox = ({\r\n  Patient,\r\n  setForceRender,\r\n  detections,\r\n}) => {\r\n  const screenWidth = useCheckScreenWidth(); // 1024 for Desktop\r\n\r\n  const detection_msg = FindLangKey(\r\n    'general-public-label-diagnose'\r\n  );\r\n  const save_msg = FindLangKey('general-public-btn-save');\r\n\r\n  const memoDetections = useMemo(\r\n    () => detections,\r\n    [JSON.stringify(detections)]\r\n  );\r\n\r\n  const detectionDataArray = memoDetections?.map(\r\n    (detection) => ({\r\n      ItemContent: ArabicToPersian(detection?.Name),\r\n      ItemValue: detection?.Id,\r\n    })\r\n  );\r\n\r\n  console.log('detectionDataArray->', detectionDataArray);\r\n\r\n  const { control, formState, handleSubmit } = useForm({\r\n    defaultValues: {\r\n      idAppWorkList: Patient?.Id,\r\n      idTashkhis: '',\r\n    },\r\n  });\r\n\r\n  const changeDetection =\r\n    ChangePatientDetection(setForceRender);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <form\r\n        onSubmit={handleSubmit((data) => {\r\n          changeDetection(data);\r\n        })}\r\n        onWheel={(event) => {\r\n          event.stopPropagation();\r\n        }}\r\n        onTouchMove={(event) => {\r\n          event.stopPropagation();\r\n        }}\r\n      >\r\n        <Stack gap=\".5em\">\r\n          {detectionDataArray ? (\r\n            <SingleReactHookFormWrapper\r\n              element={\r\n                <EditableCustomizableSelect\r\n                  initialData={[\r\n                    {\r\n                      ItemContent: ArabicToPersian(\r\n                        Patient?.NameDiagnosis\r\n                      ),\r\n                      ItemValue: ArabicToPersian(\r\n                        Patient?.NameDiagnosis\r\n                      ),\r\n                    },\r\n                  ]}\r\n                  isSingle={true}\r\n                  SelectableDataArray={detectionDataArray}\r\n                  label={detection_msg}\r\n                  enableInitialOnchange={true}\r\n                />\r\n              }\r\n              control={control}\r\n              errors={formState.errors}\r\n              name=\"idTashkhis\"\r\n              required={true}\r\n            />\r\n          ) : (\r\n            <LinearProgress />\r\n          )}\r\n          <SubmitButton label={save_msg} />\r\n        </Stack>\r\n      </form>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DetectionBox;\r\n","export const HandleSetQuickActions = (\r\n  patientId,\r\n  actionType,\r\n  setQuickActions\r\n) => {\r\n  let quickAction = JSON.parse(sessionStorage.getItem(\"quickActions\")) || [];\r\n\r\n  if (quickAction.some((el) => el.patientId === patientId)) {\r\n    let index = quickAction.findIndex(\r\n      (element) => element.patientId === patientId\r\n    );\r\n    quickAction.splice(index, 1);\r\n    sessionStorage.setItem(\"quickActions\", JSON.stringify(quickAction));\r\n    setQuickActions(JSON.parse(sessionStorage.getItem(\"quickActions\")));\r\n  } else {\r\n    quickAction.push({\r\n      patientId,\r\n      actionType,\r\n    });\r\n    sessionStorage.setItem(\"quickActions\", JSON.stringify(quickAction));\r\n    setQuickActions(JSON.parse(sessionStorage.getItem(\"quickActions\")));\r\n  }\r\n};\r\n","import React, {\r\n  useContext,\r\n  useMemo,\r\n  useState,\r\n} from 'react';\r\nimport styles from '../../Styles/Current.Patient.module.scss';\r\nimport Operations from '../Operations/Operations';\r\nimport PatientInfoStack from './component/PatientInfoStack';\r\nimport { ArabicToPersian } from 'utils/ConvertToPersianTextFromArabic';\r\nimport { Box, IconButton } from '@mui/material';\r\nimport { HandleControlContextMenu } from './Functions/HandleControlContextMenu';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport useEachPatientLogic from './logic/useEachPatientLogic';\r\nimport DateTimeHoozor from './component/DateTimeHoozor/DateTimeHoozor';\r\nimport { themeColors } from 'Global/JsxThemeColor/JsxThemeColor';\r\nimport DetectionBox from './component/DetectionBox/DetectionBox';\r\nimport { HandleSetQuickActions } from './Functions/HandleSetQuickActions';\r\nimport GetPostResponse from 'Global/Functions/GetPostResponse/GetPostResponse';\r\nimport { env } from 'env';\r\nimport {\r\n  KeyboardDoubleArrowDown,\r\n  KeyboardDoubleArrowUp,\r\n} from '@mui/icons-material';\r\nconst EachPatient = ({\r\n  Patient,\r\n  setForceRender,\r\n  bgColor,\r\n  detections,\r\n  disableActions,\r\n}) => {\r\n  const detectionMsg = FindLangKey(\r\n    'general-public-label-diagnose'\r\n  );\r\n\r\n  // const [actiavtePicker, setActivatePicker] = useState(false);\r\n\r\n  const [\r\n    userFileArray,\r\n    setUserFileArray,\r\n    informationData,\r\n    GlobalConstants,\r\n    languageArray,\r\n    cachedIcons,\r\n    imgHeader,\r\n    timeHozoorLabel,\r\n    i18n,\r\n    quickOperations,\r\n    setQuickOperations,\r\n  ] = useEachPatientLogic(Patient);\r\n\r\n  const patientCheckData = [\r\n    Patient?.TedadMorajee,\r\n    Patient?.TedadForm,\r\n  ];\r\n  const patientStatus = patientCheckData?.every(\r\n    (el) => el > 0\r\n  )\r\n    ? 'lightgreen'\r\n    : Patient?.TedadMorajee > 0\r\n    ? 'skyblue'\r\n    : Patient?.TedadForm > 0\r\n    ? 'lightpink'\r\n    : patientCheckData?.every((el) => el === 0) && null;\r\n\r\n  const memoQuickOperationsDetection = useMemo(\r\n    () =>\r\n      quickOperations.some(\r\n        (element) =>\r\n          element.patientId === Patient.Id &&\r\n          element.actionType === 1\r\n      ),\r\n    [JSON.stringify(quickOperations)]\r\n  );\r\n  const memoQuickOperationsTimePresence = useMemo(\r\n    () =>\r\n      quickOperations.some(\r\n        (element) =>\r\n          element.patientId === Patient.Id &&\r\n          element.actionType === 0\r\n      ),\r\n    [JSON.stringify(quickOperations)]\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className={styles.CardContent}\r\n      style={{\r\n        backgroundColor: bgColor || patientStatus || '',\r\n        color: `${themeColors.ColorPrimary}`,\r\n      }}\r\n    >\r\n      <Box\r\n        sx={{ all: 'inherit', p: 0 }}\r\n        // onClick={() => {\r\n        //   // HandleControlContextMenu(\r\n        //   //   setUserFileArray,\r\n        //   //   Patient\r\n        //   // );\r\n        //   // setActivatePicker(false);\r\n        //   // openDetectionList(false);\r\n        // }}\r\n      >\r\n        {informationData?.map((element) => (\r\n          <PatientInfoStack\r\n            ImageSource={element?.image}\r\n            paragraph={element?.title}\r\n            key={GlobalConstants.uuidV4()}\r\n            setForceRender={setForceRender}\r\n            i18n={i18n}\r\n          />\r\n        ))}\r\n      </Box>\r\n\r\n      <PatientInfoStack\r\n        ImageSource={\r\n          imgHeader +\r\n          cachedIcons?.GeneralIcon['Detection.svg']\r\n        }\r\n        paragraph={`${detectionMsg}: ${ArabicToPersian(\r\n          Patient.NameDiagnosis\r\n        )}`}\r\n        setForceRender={setForceRender}\r\n        i18n={i18n}\r\n        clickable={\r\n          !Patient?.CancelByDoctor &&\r\n          !Patient?.EndOfTreatment\r\n            ? true\r\n            : false\r\n        }\r\n        Patient={Patient}\r\n        func={() => {\r\n          if (\r\n            !Patient?.CancelByDoctor &&\r\n            !Patient?.EndOfTreatment\r\n          ) {\r\n            // openDetectionList((prev) => !prev);\r\n            HandleSetQuickActions(\r\n              Patient.Id,\r\n              1,\r\n              setQuickOperations\r\n            );\r\n          }\r\n        }}\r\n      />\r\n      {memoQuickOperationsDetection &&\r\n      !userFileArray.includes(Patient.Id) ? (\r\n        <DetectionBox\r\n          Patient={Patient}\r\n          setForceRender={setForceRender}\r\n          detections={detections}\r\n        />\r\n      ) : (\r\n        <></>\r\n      )}\r\n      <PatientInfoStack\r\n        ImageSource={\r\n          imgHeader +\r\n          cachedIcons?.GeneralIcon['AttendenceTime.svg']\r\n        }\r\n        paragraph={timeHozoorLabel}\r\n        setForceRender={setForceRender}\r\n        i18n={i18n}\r\n        clickable={\r\n          !Patient?.CancelByDoctor &&\r\n          !Patient?.EndOfTreatment\r\n            ? true\r\n            : false\r\n        }\r\n        Patient={Patient}\r\n        func={() => {\r\n          if (\r\n            !Patient?.CancelByDoctor &&\r\n            !Patient?.EndOfTreatment\r\n          ) {\r\n            // setActivatePicker((prev) => !prev);\r\n            HandleSetQuickActions(\r\n              Patient.Id,\r\n              0,\r\n              setQuickOperations\r\n            );\r\n          }\r\n        }}\r\n      />\r\n\r\n      {Patient?.DescErja !== '' ? (\r\n        <h4\r\n          style={{\r\n            color: 'red',\r\n            paddingInline: '.3em',\r\n            borderRadius: '3px',\r\n          }}\r\n        >\r\n          {FindLangKey(\r\n            'general-public-description',\r\n            languageArray\r\n          )}{' '}\r\n          : \r\n          {ArabicToPersian(Patient?.DescErja)}\r\n        </h4>\r\n      ) : (\r\n        <></>\r\n      )}\r\n\r\n      {!userFileArray.includes(Patient.Id) &&\r\n      !memoQuickOperationsTimePresence &&\r\n      !memoQuickOperationsDetection ? (\r\n        <IconButton\r\n          onClick={() => {\r\n            HandleControlContextMenu(\r\n              setUserFileArray,\r\n              Patient\r\n            );\r\n          }}\r\n          sx={{\r\n            alignSelf: 'center',\r\n          }}\r\n        >\r\n          <KeyboardDoubleArrowDown color=\"colorPrimer\" />\r\n        </IconButton>\r\n      ) : (\r\n        <></>\r\n      )}\r\n\r\n      {userFileArray.includes(Patient.Id) ? (\r\n        <Operations\r\n          Patient={Patient}\r\n          setForceRender={setForceRender}\r\n          disableActions={disableActions}\r\n        />\r\n      ) : (\r\n        <></>\r\n      )}\r\n\r\n      {userFileArray.includes(Patient.Id) ? (\r\n        <IconButton\r\n          onClick={() => {\r\n            HandleControlContextMenu(\r\n              setUserFileArray,\r\n              Patient\r\n            );\r\n          }}\r\n          sx={{\r\n            alignSelf: 'center',\r\n          }}\r\n        >\r\n          <KeyboardDoubleArrowUp color=\"colorPrimer\" />\r\n        </IconButton>\r\n      ) : (\r\n        <></>\r\n      )}\r\n      {memoQuickOperationsTimePresence &&\r\n      !userFileArray.includes(Patient.Id) ? (\r\n        <DateTimeHoozor\r\n          Patient={Patient}\r\n          setForceRender={setForceRender}\r\n        />\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EachPatient;\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon([/*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 17.59 7.41 19 12 14.42 16.59 19 18 17.59l-6-6z\"\n}, \"0\"), /*#__PURE__*/_jsx(\"path\", {\n  d: \"m6 11 1.41 1.41L12 7.83l4.59 4.58L18 11l-6-6z\"\n}, \"1\")], 'KeyboardDoubleArrowUp');","// extracted by mini-css-extract-plugin\nexport default {\"frameGradient\":\"Current_Patient_frameGradient__Ooci-\",\"PatientCard\":\"Current_Patient_PatientCard__APRY0\",\"CardContent\":\"Current_Patient_CardContent__co08h\",\"patientContainer\":\"Current_Patient_patientContainer__9YSIU\"};"],"names":["PatientList","userFile","setUserFile","React","userFileValue","sessionStorage","getItem","length","JSON","parse","storageEventHandler","event","key","value","newValue","window","addEventListener","removeEventListener","sortedObjects","sort","a","b","aIndex","indexOf","Id","bIndex","pageRefreshAtom","atom","_ref","ImageSource","paragraph","clickable","navigate","path","Patient","func","setForceRender","i18n","_jsx","children","_jsxs","Stack","direction","language","spacing","sx","cursor","onClick","setItem","stringify","src","alt","width","height","loading","style","textAlign","_Fragment","CancelReferral","confirmCancelMsg","FindLangKey","cancelSuccessMsg","runAPI","SwalAlert","DialogFn","Post","concat","process","idAppWorkList","idPerson","IdPerson","cancleCouse","then","response","data","resCode","prev","resMessage","OperationsVariables","t","disableActions","_useContext","screenWidth","useCheckScreenWidth","languageArray","useContext","GlobalContext","LanguageArray","pathname","useLocation","setPageRefresh","useAtom","endTreatment","EndPatientTreatment","confirmEndTreatmentMsg","patient","dialogFn","cachedIcons","localStorage","imgHeader","title","image","GeneralIcon","removeItem","disabled","AccessControl","toLowerCase","useTranslation","OperationsData","GlobalConstants","patientAddress","ArabicToPersian","PatientAddress","patientForm","PatientMobile","PatientInfoStack","Container","map","element","uuidV4","HandleControlContextMenu","setUserFileArray","userFileArray","push","index","splice","useState","quickOperations","setQuickOperations","informationData","InsuranceName","NamePatient","FamilyPatient","AgePatient","InformationDataArray","DateHozoor","TimeHozoor","changeTimeLabel","timeHozooerLabel","dateHozooerLabel","dateTime","setDateTime","timeHoozoor","TimeToMinutes","dateHoozoor","changePresence","ChangeHozoorDateTime","date","time","confirmEditTimeHozoor","dateHozoor","timeHozoor","gap","justifyContent","EditableSingularTimePicker","initalValue","OutputInMinutes","label","onChange","val","fullWidth","EditableMuiDatePicker","disableInit","initialValue","Placeholder","disableToday","Button","variant","mb","mt","color","themeColors","detections","detection_msg","save_msg","memoDetections","useMemo","detectionDataArray","detection","ItemContent","Name","ItemValue","console","log","control","formState","handleSubmit","useForm","defaultValues","idTashkhis","changeDetection","ChangePatientDetection","onSubmit","onWheel","stopPropagation","onTouchMove","SingleReactHookFormWrapper","EditableCustomizableSelect","initialData","NameDiagnosis","isSingle","SelectableDataArray","enableInitialOnchange","errors","name","required","LinearProgress","SubmitButton","HandleSetQuickActions","patientId","actionType","setQuickActions","quickAction","some","el","findIndex","bgColor","detectionMsg","timeHozoorLabel","useEachPatientLogic","patientCheckData","TedadMorajee","TedadForm","patientStatus","every","memoQuickOperationsDetection","memoQuickOperationsTimePresence","className","styles","backgroundColor","Box","all","p","CancelByDoctor","EndOfTreatment","includes","DetectionBox","DescErja","paddingInline","borderRadius","IconButton","alignSelf","KeyboardDoubleArrowDown","Operations","KeyboardDoubleArrowUp","DateTimeHoozor","createSvgIcon","d"],"sourceRoot":""}