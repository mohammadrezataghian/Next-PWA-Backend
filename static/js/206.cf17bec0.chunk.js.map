{"version":3,"file":"static/js/206.cf17bec0.chunk.js","mappings":"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","sources":["Routes/Protected/CurrentPatients/Components/PatientSearchBox/PatientSearchBox.js","Routes/Protected/CurrentPatients/Hooks/useCurrentPatientSearchLogicHandler.js","Routes/Protected/CurrentPatients/Adapters/GetCurrentPatient.js","Routes/Protected/CurrentPatients/Hooks/useFilterComboData.js","Routes/Protected/CurrentPatients/CurrentPatients.js"],"sourcesContent":["import { Search } from \"@mui/icons-material\";\r\nimport { InputBase, Paper } from \"@mui/material\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\nimport useDebounce from \"Global/Hooks/useDebounce/useDebounce\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst PatientSearchBox = ({ setSearchAndDeliver, languageArray }) => {\r\n  const [searchIdPatient, setSearchIdPatient] = useState(\"\");\r\n\r\n  const { t, i18n } = useTranslation();\r\n\r\n  const data = useDebounce(searchIdPatient, 1);\r\n\r\n  useEffect(() => {\r\n    if (data !== null) {\r\n      setSearchAndDeliver((prev) => ({\r\n        ...prev,\r\n        PatientSearchClause: data,\r\n      }));\r\n    }\r\n  }, [data]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Paper\r\n        component=\"form\"\r\n        sx={{\r\n          p: \"2px 4px\",\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          marginTop: \"2em\",\r\n          flexDirection: i18n?.language === \"en\" && \"row-reverse\",\r\n          minHeight: \"40px\",\r\n        }}\r\n        className=\"current-patient-search-layout-color\"\r\n      >\r\n        <InputBase\r\n          size=\"small\"\r\n          sx={{ ml: 1, flex: 1, minHeight: \"40px\" }}\r\n          placeholder={FindLangKey(\r\n            \"current-patients-search-bar\",\r\n            languageArray\r\n          )}\r\n          inputProps={{\r\n            \"aria-label\": FindLangKey(\r\n              \"current-patients-search-bar\",\r\n              languageArray\r\n            ),\r\n          }}\r\n          onChange={(e) => setSearchIdPatient(e.target.value)}\r\n        />\r\n        <Search />\r\n      </Paper>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PatientSearchBox;\r\n","import React from \"react\";\r\nimport { GetCurrentPatient } from \"../Adapters/GetCurrentPatient\";\r\nimport moment from \"moment-jalaali\";\r\nimport { SubstractMonth } from \"utils/SubstractMonth\";\r\nimport { ExcludeTenDays } from \"utils/ExcludeTenDays\";\r\n\r\nconst useCurrentPatientSearchLogicHandler = (forceRender, filter) => {\r\n  const [SearchAndDeliver, setSearchAndDeliver] = React.useState({\r\n    PatientSearchClause: \"\",\r\n    CurrentPatientList: [],\r\n    FromDate: \"\",\r\n    ToDate: \"\",\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    const previousSearchDate = sessionStorage.getItem(\"previousSearchDate\");\r\n    if (previousSearchDate) {\r\n      const prevDate = JSON.parse(sessionStorage.getItem(\"previousSearchDate\"));\r\n      setSearchAndDeliver((prev) => ({\r\n        ...prev,\r\n        FromDate: prevDate.FromDate,\r\n        ToDate: prevDate.ToDate,\r\n      }));\r\n    }\r\n  }, [SearchAndDeliver.FromDate, SearchAndDeliver.ToDate]);\r\n  // React.useEffect(() => {\r\n  //   GetCurrentPatient(SearchAndDeliver, setSearchAndDeliver);\r\n  //   console.log(\"forceRender is =>\", forceRender);\r\n  // }, [forceRender]);\r\n  React.useMemo(() => {\r\n    if (SearchAndDeliver.FromDate && SearchAndDeliver.ToDate) {\r\n      GetCurrentPatient(SearchAndDeliver, setSearchAndDeliver, filter);\r\n      if (\r\n        moment(SubstractMonth()).locale(\"fa\").format(\"jYYYY/jM/jD\") !==\r\n          SearchAndDeliver.FromDate ||\r\n        moment(ExcludeTenDays()).locale(\"fa\").format(\"jYYYY/jM/jD\") !==\r\n          SearchAndDeliver.FromDate\r\n      ) {\r\n        window.sessionStorage.setItem(\r\n          \"previousSearchDate\",\r\n          JSON.stringify({\r\n            FromDate: SearchAndDeliver.FromDate,\r\n            ToDate: SearchAndDeliver.ToDate,\r\n          })\r\n        );\r\n      }\r\n    }\r\n  }, [\r\n    SearchAndDeliver.PatientSearchClause,\r\n    SearchAndDeliver.FromDate,\r\n    SearchAndDeliver.ToDate,\r\n    forceRender,\r\n    filter,\r\n  ]);\r\n  return { SearchAndDeliver, setSearchAndDeliver };\r\n};\r\n\r\nexport default useCurrentPatientSearchLogicHandler;\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport Cookies from 'js-cookie';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const GetCurrentPatient = async (\r\n  SearchAndDeliver,\r\n  setSearchAndDeliver,\r\n  filter\r\n) => {\r\n  const IdPerson =\r\n    Cookies.get('user') &&\r\n    JSON.parse(Cookies.get('user'))?.IdPerson;\r\n  return Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_GET_CURRENTPATIENT}`,\r\n    true,\r\n    {\r\n      pageSize: 0,\r\n      startIndex: 0,\r\n      idPerson: IdPerson,\r\n      clause: SearchAndDeliver.PatientSearchClause,\r\n      fromDate: SearchAndDeliver.FromDate,\r\n      toDate: SearchAndDeliver.ToDate,\r\n      searchType: 0,\r\n      filterFormAndService: filter?.ItemValue || 0,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.tasks.resCode === 1) {\r\n      setSearchAndDeliver((prev) => ({\r\n        ...prev,\r\n        CurrentPatientList: response.data.tasks.Data,\r\n      }));\r\n    } else {\r\n      SwalAlert(\r\n        'error',\r\n        response.data.tasks.resMessage,\r\n        false\r\n      );\r\n    }\r\n  });\r\n};\r\n","import FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\nimport React from \"react\";\r\n\r\nconst useFilterComboData = () => {\r\n  const all_label = FindLangKey(\"genral-public-label-all\");\r\n\r\n  const without_service = FindLangKey(\r\n    \"current-patients-filter-selector-no-service\"\r\n  );\r\n\r\n  const without_form = FindLangKey(\"current-patients-filter-selector-no-form\");\r\n\r\n  const show_msg = FindLangKey(\"genral-public-label-show-by\");\r\n\r\n  const dataArray = [\r\n    {\r\n      ItemContent: all_label,\r\n      ItemValue: 0,\r\n    },\r\n    {\r\n      ItemContent: without_service,\r\n      ItemValue: 4,\r\n    },\r\n    {\r\n      ItemContent: without_form,\r\n      ItemValue: 3,\r\n    },\r\n  ];\r\n\r\n  const default_value = [\r\n    {\r\n      ItemContent: all_label,\r\n      ItemValue: all_label,\r\n    },\r\n  ];\r\n\r\n  return { dataArray, default_value, show_msg };\r\n};\r\n\r\nexport default useFilterComboData;\r\n","import { Card, Container, Stack } from '@mui/material';\r\nimport { GlobalContext } from 'Global/Context/GlobalContextProvider';\r\nimport React, {\r\n  useContext,\r\n  useEffect,\r\n  useState,\r\n} from 'react';\r\nimport EachPatient from './Components/EachPatient/EachPatient';\r\nimport PatientSearchBox from './Components/PatientSearchBox/PatientSearchBox';\r\nimport useCurrentPatientSearchLogicHandler from './Hooks/useCurrentPatientSearchLogicHandler';\r\nimport styles from './Styles/Current.Patient.module.scss';\r\nimport DateRangePicker from 'Global/Components/CommonComponents/DateRangePicker/DateRangePicker';\r\nimport { ArabicToPersian } from 'utils/ConvertToPersianTextFromArabic';\r\nimport useOptimizeListRenderPerformance from 'Global/Hooks/useOptimizeListRenderPerformance';\r\nimport useSortSelectedPatientsToTop from 'Global/Hooks/useSortSelectedPatientsToTop';\r\nimport { useAtom } from 'jotai';\r\nimport { pageRefreshAtom } from 'Global/shared/page.refresh.atom';\r\nimport GetPostResponse from 'Global/Functions/GetPostResponse/GetPostResponse';\r\nimport { env } from 'env';\r\nimport EditableCustomizableSelect from 'Global/Components/EditableComponents/EditableCustomizableSelect/EditableCustomizableSelect';\r\nimport useFilterComboData from './Hooks/useFilterComboData';\r\nimport { Post } from 'Xhr/Xhr';\r\n\r\nconst CurrentPatients = () => {\r\n  const [filter, setFilter] = useState(0);\r\n\r\n  const [pageRefresh] = useAtom(pageRefreshAtom);\r\n\r\n  const [forceRender, setForceRender] =\r\n    React.useState(false);\r\n\r\n  const { SearchAndDeliver, setSearchAndDeliver } =\r\n    useCurrentPatientSearchLogicHandler(\r\n      forceRender,\r\n      filter\r\n    );\r\n\r\n  const GlobalConstants = useContext(GlobalContext);\r\n\r\n  const userFilePatients = useSortSelectedPatientsToTop(\r\n    SearchAndDeliver?.CurrentPatientList\r\n  );\r\n\r\n  const { list, handleTouchMove, handleScroll } =\r\n    useOptimizeListRenderPerformance(userFilePatients);\r\n\r\n  const languageArray =\r\n    useContext(GlobalContext)?.LanguageArray;\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      sessionStorage.removeItem('quickActions');\r\n    };\r\n  }, []);\r\n\r\n  const [detections, setDetections] = useState(null);\r\n  useEffect(() => {\r\n    Post(\r\n      'POST',\r\n      `${process.env.REACT_APP_API_URL_API_GET_TASHKHIS_LIST}`,\r\n      true,\r\n      {\r\n        idSystem: 900,\r\n        clause: '',\r\n      }\r\n    ).then((response) => {\r\n      setDetections(response.data.Data.list);\r\n    });\r\n  }, []);\r\n\r\n  const { dataArray, default_value, show_msg } =\r\n    useFilterComboData();\r\n\r\n  return (\r\n    <Container sx={{ pb: '1em' }} maxWidth=\"md\">\r\n      {forceRender ? <></> : <></>}\r\n      {pageRefresh ? <></> : <></>}\r\n      <PatientSearchBox\r\n        setSearchAndDeliver={setSearchAndDeliver}\r\n        languageArray={languageArray}\r\n      />\r\n      <Stack alignItems=\"center\">\r\n        <DateRangePicker\r\n          GetDateRange={setSearchAndDeliver}\r\n          initialValue={{\r\n            FromDate: SearchAndDeliver.FromDate,\r\n            ToDate: SearchAndDeliver.ToDate,\r\n          }}\r\n          // ExcludeTenDay={true}\r\n        />\r\n        <EditableCustomizableSelect\r\n          SelectableDataArray={dataArray}\r\n          initialData={default_value}\r\n          isSingle={true}\r\n          label={show_msg}\r\n          enableInitialOnchange={true}\r\n          GetSelectedValue={setFilter}\r\n        />\r\n      </Stack>\r\n      <Stack marginTop=\".3em\" spacing={'.5em'}>\r\n        {forceRender ? <></> : <></>}\r\n        <div\r\n          style={{\r\n            all: 'inherit',\r\n          }}\r\n          onWheel={handleScroll}\r\n          onTouchMove={handleTouchMove}\r\n          className={styles.patientContainer}\r\n        >\r\n          {list?.map((Patient, index) => (\r\n            <Card\r\n              elevation={2}\r\n              sx={{ p: '.3em', borderRadius: '20px' }}\r\n              className={styles.PatientCard}\r\n              key={index}\r\n            >\r\n              <EachPatient\r\n                Patient={Patient}\r\n                key={GlobalConstants.uuidV4()}\r\n                setForceRender={setForceRender}\r\n                detections={detections}\r\n              />\r\n            </Card>\r\n          ))}\r\n        </div>\r\n      </Stack>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CurrentPatients;\r\n"],"names":["_ref","setSearchAndDeliver","languageArray","searchIdPatient","setSearchIdPatient","useState","t","i18n","useTranslation","data","useDebounce","useEffect","prev","PatientSearchClause","_jsx","React","children","_jsxs","Paper","component","sx","p","display","alignItems","marginTop","flexDirection","language","minHeight","className","InputBase","size","ml","flex","placeholder","FindLangKey","inputProps","onChange","e","target","value","Search","useCurrentPatientSearchLogicHandler","forceRender","filter","SearchAndDeliver","CurrentPatientList","FromDate","ToDate","sessionStorage","getItem","prevDate","JSON","parse","async","_JSON$parse","IdPerson","Cookies","Post","concat","process","pageSize","startIndex","idPerson","clause","fromDate","toDate","searchType","filterFormAndService","ItemValue","then","response","tasks","resCode","Data","SwalAlert","resMessage","GetCurrentPatient","moment","SubstractMonth","locale","format","ExcludeTenDays","window","setItem","stringify","useFilterComboData","all_label","dataArray","ItemContent","default_value","show_msg","CurrentPatients","_useContext","setFilter","pageRefresh","useAtom","pageRefreshAtom","setForceRender","GlobalConstants","useContext","GlobalContext","userFilePatients","useSortSelectedPatientsToTop","list","handleTouchMove","handleScroll","useOptimizeListRenderPerformance","LanguageArray","removeItem","detections","setDetections","idSystem","Container","pb","maxWidth","_Fragment","PatientSearchBox","Stack","DateRangePicker","GetDateRange","initialValue","EditableCustomizableSelect","SelectableDataArray","initialData","isSingle","label","enableInitialOnchange","GetSelectedValue","spacing","style","all","onWheel","onTouchMove","styles","map","Patient","index","Card","elevation","borderRadius","EachPatient","uuidV4"],"sourceRoot":""}