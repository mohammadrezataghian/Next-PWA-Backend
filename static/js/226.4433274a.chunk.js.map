{"version":3,"file":"static/js/226.4433274a.chunk.js","mappings":"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","sources":["Global/Adapters/GetInsuranceListPublic.js","Global/Components/ReadOnlyComponents/ReadOnlyTextField.js","Global/Hooks/useObserverElement/useOberseveElement.js","Routes/Protected/AddNewConfer/context/hooks/useCustomizedListRenderer.js","Routes/Protected/AddNewConfer/context/hooks/useTopSelectedObject.js","Routes/Protected/AddNewConfer/functions/HandleSearchItem.js","Routes/Protected/AddNewConfer/context/hooks/useSortListByConditions.js","Routes/Protected/AddNewConfer/Adapters/GetConferServices.js","Routes/Protected/AddNewConfer/Adapters/GetConferInfo.js","Routes/Protected/AddNewConfer/context/context.js","Routes/Protected/AddNewConfer/context/functions/FunctionArray.js","Routes/Protected/AddNewConfer/functions/HandleReplaceStoredItems.js","Routes/Protected/AddNewConfer/Adapters/CalcByDetection.js","Routes/Protected/AddNewConfer/Components/Form/components/Insurance.js","Routes/Protected/AddNewConfer/Components/Form/components/CenterOff.js","Routes/Protected/AddNewConfer/Components/Form/components/DoctorOff.js","Routes/Protected/AddNewConfer/Components/Form/components/DetectionList.js","Routes/Protected/AddNewConfer/Components/Form/Form.js","webpack://new-ui/./src/Routes/Protected/AddNewConfer/style/Confer.general.style.module.scss?3e74","Routes/Protected/AddNewConfer/Components/Confers/components/ConferName.js","Routes/Protected/AddNewConfer/Components/Confers/components/ConferControls.js","Routes/Protected/AddNewConfer/Components/Confers/components/ConferPrice.js","Routes/Protected/AddNewConfer/Components/Confers/components/Confer.js","Routes/Protected/AddNewConfer/Components/Confers/components/ConferMap.js","Routes/Protected/AddNewConfer/Components/Confers/components/SearchBar.js","Routes/Protected/AddNewConfer/Adapters/CofirmConfer.js","Routes/Protected/AddNewConfer/functions/HandleSubmitForm.js","Routes/Protected/AddNewConfer/Adapters/AddConfer.js","Routes/Protected/AddNewConfer/Components/Confers/Confers.js","Routes/Protected/AddNewConfer/AddNewConfer.js","Routes/Protected/AddNewConfer/Components/DesktopScrollUp/DesktopScrollUp.js","Routes/Protected/AddNewConfer/Adapters/ConferPriceCalculator.js","Routes/Protected/AddNewConfer/Hooks/useHandleConferPrice.js","Routes/Protected/AddNewConfer/Hooks/useHandleSessionStoreConfer.js","Routes/Protected/AddNewConfer/functions/HandleDecreaseCount.js","Routes/Protected/AddNewConfer/functions/HandleIncreaseCount.js","Routes/Protected/PatientList/Adapters/GetDetectionList.js","../node_modules/@mui/icons-material/esm/Add.js","../node_modules/@mui/icons-material/esm/AddTask.js","../node_modules/@mui/icons-material/esm/KeyboardDoubleArrowUp.js","../node_modules/@mui/icons-material/esm/List.js","../node_modules/@mui/icons-material/esm/Remove.js"],"sourcesContent":["import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { ArabicToPersian } from 'utils/ConvertToPersianTextFromArabic';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const GetInsuranceListPublic = async (\r\n  setGatheredData,\r\n  isObjectFormNeeded\r\n) => {\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_GET_INSURANCE_LIST}`,\r\n    true,\r\n    {\r\n      clause: '',\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      isObjectFormNeeded\r\n        ? setGatheredData((prev) => ({\r\n            ...prev,\r\n            [isObjectFormNeeded]:\r\n              response.data.Data.list.map((elemet) => {\r\n                return {\r\n                  ItemValue: elemet.ID,\r\n                  ItemContent: ArabicToPersian(elemet.Name),\r\n                };\r\n              }),\r\n          }))\r\n        : setGatheredData(\r\n            response.data.Data.list.map((elemet) => {\r\n              return {\r\n                ItemValue: elemet.ID,\r\n                ItemContent: ArabicToPersian(elemet.Name),\r\n              };\r\n            })\r\n          );\r\n    } else\r\n      SwalAlert('error', response.data.resMessage, false);\r\n  });\r\n};\r\n","import React from \"react\";\r\nimport { Stack, TextField } from \"@mui/material\";\r\n\r\nconst ReadOnlyTextField = ({ label, value, onChange, isEnglish = false }) => {\r\n  React.useEffect(() => {\r\n    onChange && onChange(value);\r\n  }, [value]);\r\n  return (\r\n    <React.Fragment>\r\n      <Stack alignItems=\"flex-end\" width=\"100%\">\r\n        <sub\r\n          style={{\r\n            width: \"100%\",\r\n            textAlign: isEnglish ? \"left\" : \"right\",\r\n          }}\r\n          dir={isEnglish ? \"ltr\" : \"rtl\"}\r\n        >\r\n          {label}\r\n        </sub>\r\n        <TextField\r\n          fullWidth\r\n          color=\"colorPrimer\"\r\n          disabled\r\n          value={value === \"\" ? \"داده ای ثبت نشده\" : value ?? \"\"}\r\n          size=\"small\"\r\n        />\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ReadOnlyTextField;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nconst useOberseveElement = (ref) => {\r\n  const [inView, setInView] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver(([entry]) =>\r\n      setInView(entry.isIntersecting)\r\n    );\r\n    observer.observe(ref.current);\r\n    return () => {\r\n      observer.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  return inView;\r\n};\r\n\r\nexport default useOberseveElement;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nconst useCustomizedListRenderer = (\r\n  largeListArray,\r\n  additionalFn,\r\n  FnParams,\r\n  ApplyFilter,\r\n  confer,\r\n  resetTrigger,\r\n  indx = 50\r\n) => {\r\n  const [highestIndex, setHighestIndex] = useState(indx);\r\n  const [itemsToShow, setItemsToShow] = useState(highestIndex);\r\n  const [list, setList] = useState([]);\r\n  const [startY, setStartY] = useState(0);\r\n  const [activated, setActivated] = useState(false);\r\n  const [firstCall, setFirstCall] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (confer && largeListArray) {\r\n      let newHighestIndex = indx;\r\n      confer.forEach((item) => {\r\n        const index = largeListArray.findIndex(\r\n          (largeListItem) => largeListItem.ID === item.ID\r\n        );\r\n        if (index > newHighestIndex) {\r\n          newHighestIndex = index + 20;\r\n        }\r\n      });\r\n      setHighestIndex(newHighestIndex);\r\n      setItemsToShow(newHighestIndex);\r\n    }\r\n  }, [confer, largeListArray, resetTrigger]);\r\n\r\n  const handleScroll = (e) => {\r\n    if (e.deltaY > 0) {\r\n      setItemsToShow((prev) => prev + 1);\r\n    } else {\r\n      setItemsToShow((prev) => (prev > highestIndex ? prev - 1 : prev));\r\n    }\r\n  };\r\n\r\n  const handleTouchStart = (e) => {\r\n    setStartY(e.touches[0].clientY);\r\n  };\r\n\r\n  const handleTouchMove = (e) => {\r\n    const currentY = e.touches[0].clientY;\r\n    if (currentY > startY) {\r\n      setItemsToShow((prev) => prev + 1);\r\n    } else {\r\n      setItemsToShow((prev) => (prev > highestIndex ? prev - 1 : prev));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (largeListArray) {\r\n      let updatedList = largeListArray.slice(0, itemsToShow);\r\n      if (additionalFn) {\r\n        updatedList = additionalFn(updatedList, ...FnParams);\r\n      }\r\n      ApplyFilter\r\n        ? setList(ApplyFilter(largeListArray, FnParams))\r\n        : setList(updatedList);\r\n    }\r\n  }, [largeListArray, itemsToShow, FnParams, resetTrigger]);\r\n\r\n  useEffect(() => {\r\n    setActivated(true);\r\n    setFirstCall(false);\r\n  }, []);\r\n\r\n  return {\r\n    list,\r\n    handleTouchMove,\r\n    handleScroll,\r\n    handleTouchStart,\r\n    activated,\r\n    firstCall,\r\n  };\r\n};\r\n\r\nexport default useCustomizedListRenderer;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst useTopSelectedObject = (largeList, resetTrigger, setResetTrigger) => {\r\n  const [sortedList, setSortedList] = useState(largeList);\r\n  const [stack, setStack] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const newStack = [...stack];\r\n    largeList.forEach((item) => {\r\n      if (item.Count > 0 && !newStack.includes(item.ID)) {\r\n        newStack.push(item.ID);\r\n      } else if (item.Count === 0 && newStack.includes(item.ID)) {\r\n        newStack.splice(newStack.indexOf(item.ID), 1);\r\n      }\r\n    });\r\n    setStack(newStack);\r\n  }, [largeList]);\r\n\r\n  useEffect(() => {\r\n    if (resetTrigger > 0) {\r\n      setStack([]);\r\n    }\r\n  }, [resetTrigger, largeList]);\r\n  useEffect(() => {\r\n    if (stack.length === 0) setResetTrigger(0);\r\n  }, [stack]);\r\n\r\n  useEffect(() => {\r\n    const newSortedList = [...largeList];\r\n    stack.forEach((id, index) => {\r\n      const itemIndex = newSortedList.findIndex((item) => item.ID === id);\r\n      if (itemIndex !== -1) {\r\n        const [item] = newSortedList.splice(itemIndex, 1);\r\n        newSortedList.splice(index, 0, item);\r\n      }\r\n    });\r\n    setSortedList(newSortedList);\r\n  }, [stack]);\r\n\r\n  return sortedList;\r\n};\r\n\r\nexport default useTopSelectedObject;\r\n","import { ArabicToPersian } from \"utils/ConvertToPersianTextFromArabic\";\r\n\r\nexport const HandleSearchItem = (arr, search) => {\r\n  // Create a copy of the array to avoid modifying the original\r\n\r\n  const persianArr = arr?.map((confer) => ({\r\n    ...confer,\r\n    Name: ArabicToPersian(confer?.Name),\r\n  }));\r\n\r\n  let result = [...persianArr];\r\n\r\n  // Check if search is a number\r\n  let searchIsNumber = !isNaN(search);\r\n\r\n  // Define a function to calculate the score of each item\r\n  let getScore = (item) => {\r\n    let score = 0;\r\n    if (searchIsNumber && Number(item.Code) === Number(search)) {\r\n      score += 2;\r\n    }\r\n    if (item.Name.includes(search)) {\r\n      score += 1;\r\n    }\r\n    return score;\r\n  };\r\n\r\n  // Sort the array based on the score of each item\r\n  result.sort((a, b) => getScore(b) - getScore(a));\r\n\r\n  // Return the top ten results\r\n  return result.slice(0, 10);\r\n};\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport useTopSelectedObject from \"./useTopSelectedObject\";\r\nimport { HandleSearchItem } from \"../../functions/HandleSearchItem\";\r\nimport useDebounce from \"Global/Hooks/useDebounce/useDebounce\";\r\n\r\nconst useSortListByConditions = (\r\n  largeList = [],\r\n  seacrh,\r\n  resetTrigger,\r\n  setResetTrigger,\r\n  bringTop,\r\n  Llist\r\n) => {\r\n  const sortedList = useTopSelectedObject(\r\n    Llist,\r\n    resetTrigger,\r\n    setResetTrigger\r\n  );\r\n\r\n  const debouncedData = useDebounce(seacrh, 1);\r\n\r\n  const items = HandleSearchItem(Llist, debouncedData);\r\n\r\n  const memoItems = useMemo(() => items, [JSON.stringify(items)]);\r\n\r\n  const sortedWordList = useTopSelectedObject(\r\n    memoItems,\r\n    resetTrigger,\r\n    setResetTrigger\r\n  );\r\n\r\n  return seacrh.length === 0\r\n    ? bringTop\r\n      ? sortedList\r\n      : largeList\r\n    : bringTop\r\n    ? sortedWordList\r\n    : memoItems;\r\n};\r\n\r\nexport default useSortListByConditions;\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { TimeToMinutes } from 'utils/TimeToMinutes';\r\nimport { env } from 'env';\r\n\r\nexport const GetConferServices = async (\r\n  setGatheredData,\r\n  parameters\r\n) => {\r\n  const patient = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  );\r\n  parameters?.idInsurance &&\r\n    Post(\r\n      'POST',\r\n      `${process.env.REACT_APP_API_URL_API_GET_ERJASERVICE_LIST}`,\r\n      true,\r\n      {\r\n        dateHozoor: patient?.DateHozoor,\r\n        idInsurance: parameters?.idInsurance,\r\n        Idperson: patient?.IdPerson,\r\n        searchfield: '',\r\n        timeHozoor: TimeToMinutes(patient?.TimeHozoor),\r\n      }\r\n    ).then((response) => {\r\n      if (response.data.resCode === 1) {\r\n        setGatheredData((prev) => ({\r\n          ...prev,\r\n          [parameters?.ObjName]:\r\n            response?.data?.Data?.InsuranceServiceList.map(\r\n              (el) => ({\r\n                ...el,\r\n                select: false,\r\n                InsurancePart: 0,\r\n                PatientPart: 0,\r\n                TotalPrice: 0,\r\n              })\r\n            ),\r\n        }));\r\n      } else\r\n        SwalAlert('error', response.data.resMessage, false);\r\n    });\r\n};\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const GetConferInfo = async (\r\n  setGatheredData,\r\n  parameters\r\n) => {\r\n  const patient = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  );\r\n\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_ADD_EDIT}`,\r\n    true,\r\n    {\r\n      idAppWorkList: patient?.Id,\r\n      idConfer: 0,\r\n      idPatient: patient?.IdPatient,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      setGatheredData((prev) => ({\r\n        ...prev,\r\n        [parameters.ObjName]: response.data.Data,\r\n      }));\r\n    } else\r\n      SwalAlert('error', response.data.resMessage, false);\r\n  });\r\n};\r\n","import useGatherDataFromApi from 'Global/Hooks/useGatherDataFromApi';\r\nimport useCustomizedListRenderer from './hooks/useCustomizedListRenderer';\r\nimport useSortListByConditions from './hooks/useSortListByConditions';\r\nimport React, {\r\n  useCallback,\r\n  useLayoutEffect,\r\n  useState,\r\n} from 'react';\r\nimport { createContext } from 'react';\r\nimport { FunctionArray } from './functions/FunctionArray';\r\nimport { ArabicToPersian } from 'utils/ConvertToPersianTextFromArabic';\r\nimport { useEffect } from 'react';\r\nimport { useRef } from 'react';\r\nimport { HandleReplaceStoredItems } from '../functions/HandleReplaceStoredItems';\r\nimport { GetCurrentDateInJalai } from 'utils/GetCurrentDateInJalai';\r\n\r\nimport { CalcByDetection } from '../Adapters/CalcByDetection';\r\n\r\nexport const ConferContext = createContext();\r\n\r\nexport const context = ({ children }) => {\r\n  const [bringTop, setBringTop] = useState(false); // toggle bringing selected items to the top\r\n\r\n  const [resetTrigger, setResetTrigger] = useState(0); // reset every sorted item when insurance changes\r\n  const savedInsurance = sessionStorage.getItem(\r\n    'saved_insurance'\r\n  );\r\n  const savedInsuranceRef = useRef(\r\n    savedInsurance !== 'undefined' &&\r\n      savedInsurance !== 'null'\r\n      ? JSON.parse(savedInsurance)\r\n      : null\r\n  );\r\n\r\n  const patient = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  ); // getting patient information from session storage\r\n  const saved_confers =\r\n    sessionStorage.getItem('saved_confers'); //getting saved confers from session storage\r\n  const saveItemsRef = useRef(JSON.parse(saved_confers)); //session saved items goes in ref to not update during lifecycle\r\n  const [dataString, setDataString] = useState(''); // ID count data string store\r\n  const [Insurance, setInsurance] = useState(\r\n    savedInsuranceRef.current\r\n      ? savedInsuranceRef.current[0].ItemValue\r\n      : patient?.IdInsurance\r\n  ); // Id insurance state (select box)\r\n  const [InsuranceOff, setInsuranceOff] = useState(0); //insurance doctor state\r\n  const [search, setSearch] = useState(''); // search bar state\r\n  const [detection, setDetection] = useState();\r\n  const [detectionBaseList, setDetectionBaseList] =\r\n    useState({\r\n      enabled: false,\r\n      list: [],\r\n    });\r\n\r\n  // const HandleSearchDebounce = useCallback(\r\n  //   () => debounce((nextValue) => setSearchDebounce(nextValue), 3000),\r\n  //   []\r\n  // );\r\n\r\n  // useEffect(() => {\r\n  //   HandleSearchDebounce(search);\r\n  // }, [search]);\r\n\r\n  // note, the hook useEffect has changed to useMemo. in case of error, roll it back\r\n  const { gatheredData } = useGatherDataFromApi(\r\n    FunctionArray(Insurance)\r\n  ); // gathering API datas\r\n  const [largeList, setLargeList] = useState(\r\n    gatheredData?.Confer || []\r\n  ); //confer service list set in state to be changable\r\n\r\n  const [selected, setSelected] = useState(\r\n    saveItemsRef.current || []\r\n  ); //selected Items\r\n\r\n  console.log('->', { selected, detectionBaseList });\r\n\r\n  useEffect(() => {\r\n    if (\r\n      gatheredData?.Confer &&\r\n      gatheredData?.Confer?.length > 0\r\n    ) {\r\n      setLargeList(gatheredData?.Confer);\r\n    }\r\n  }, [gatheredData?.Confer]); // when confer services fetched, sets the state\r\n  const { list, handleTouchMove, handleScroll } =\r\n    useCustomizedListRenderer(\r\n      largeList,\r\n      undefined,\r\n      undefined,\r\n      undefined,\r\n      saveItemsRef.current,\r\n      resetTrigger,\r\n      15\r\n    ); // optimize list rendering\r\n\r\n  const [tmpList, setTmpList] = useState([]);\r\n\r\n  useEffect(() => {}, [JSON.stringify(largeList)]);\r\n\r\n  const sortedList = useSortListByConditions(\r\n    list,\r\n    search,\r\n    resetTrigger,\r\n    setResetTrigger,\r\n    bringTop,\r\n    largeList\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (selected.length > 0) {\r\n      sessionStorage.setItem(\r\n        'saved_confers',\r\n        JSON.stringify(selected)\r\n      );\r\n    } else {\r\n      sessionStorage.removeItem('saved_confers');\r\n    }\r\n  }, [selected]); //session save items\r\n\r\n  useEffect(() => {\r\n    if (saveItemsRef.current && gatheredData?.Confer) {\r\n      setLargeList(\r\n        HandleReplaceStoredItems(\r\n          gatheredData?.Confer,\r\n          saveItemsRef.current\r\n        )\r\n      );\r\n    }\r\n  }, [gatheredData?.Confer]); //set retereived session items\r\n\r\n  useEffect(() => {\r\n    const structuredData = selected\r\n      .map((element) => `${element.ID},${element.Count}`)\r\n      .join('#');\r\n    setDataString(structuredData);\r\n  }, [selected]); // create ID Count string for API\r\n\r\n  useEffect(() => {\r\n    if (resetTrigger > 0) {\r\n      saveItemsRef.current = [];\r\n      sessionStorage.removeItem('saved_confers');\r\n      setSelected([]);\r\n      setLargeList([]);\r\n    }\r\n  }, [resetTrigger]);\r\n\r\n  useEffect(() => {\r\n    if (gatheredData?.Confer?.length > 0) {\r\n      sessionStorage.setItem(\r\n        'saved_insurance',\r\n        JSON.stringify(\r\n          gatheredData?.InsuranceList?.filter(\r\n            (fl) => fl.ItemValue === Insurance\r\n          )\r\n        )\r\n      );\r\n    }\r\n  }, [gatheredData?.Confer]);\r\n\r\n  useEffect(() => {\r\n    if (detectionBaseList?.enabled) {\r\n      CalcByDetection(\r\n        Insurance,\r\n        detection,\r\n        setDetectionBaseList,\r\n        setBringTop,\r\n        setLargeList\r\n      );\r\n    }\r\n  }, [detectionBaseList?.enabled]);\r\n\r\n  useEffect(() => {\r\n    if (detectionBaseList.list) {\r\n      setSelected(detectionBaseList?.list);\r\n    }\r\n  }, [JSON.stringify(detectionBaseList.list)]);\r\n\r\n  // useEffect(() => {\r\n  //   if (detectionBaseList?.list?.length > 0) {\r\n  //     setBringTop(true);\r\n  //   }\r\n  // }, [JSON.stringify(detectionBaseList?.list)]);\r\n\r\n  const contextObj = {\r\n    defaultinsurance: savedInsuranceRef.current\r\n      ? [\r\n          {\r\n            ItemValue: ArabicToPersian(\r\n              savedInsuranceRef.current[0].ItemContent\r\n            ),\r\n            ItemContent: ArabicToPersian(\r\n              savedInsuranceRef.current[0].ItemContent\r\n            ),\r\n          },\r\n        ]\r\n      : [\r\n          {\r\n            ItemValue: ArabicToPersian(\r\n              patient?.InsuranceName\r\n            ),\r\n            ItemContent: ArabicToPersian(\r\n              patient?.InsuranceName\r\n            ),\r\n          },\r\n        ],\r\n    insurance: gatheredData?.InsuranceList,\r\n    info: gatheredData?.Info,\r\n    services: gatheredData?.Confer,\r\n    set_insurance: setInsurance,\r\n    set_doctor_off: setInsuranceOff,\r\n    doctor_off: InsuranceOff,\r\n    set_search: setSearch,\r\n    optimized_services: sortedList,\r\n    scroll_handlers: [handleTouchMove, handleScroll],\r\n    set_largelist: setLargeList,\r\n    id_insurance: Insurance,\r\n    set_select: setSelected,\r\n    selected,\r\n    ApiReadyData: {\r\n      dateCreditNoteBook: GetCurrentDateInJalai(),\r\n      discountDoctor: InsuranceOff,\r\n      discountMarkaz: gatheredData?.Info?.DiscountMarkaz,\r\n      erjaId: 0,\r\n      idInsurance: Insurance,\r\n      insuranceNumber: '',\r\n      noPageNoteBook: '',\r\n      serviceListData: dataString,\r\n      idDiagnosis: detection,\r\n    },\r\n    set_reset: setResetTrigger,\r\n    reset: resetTrigger,\r\n    set_reset: setResetTrigger,\r\n    setBringTop,\r\n    setDetection,\r\n    detection,\r\n    detectionBaseList,\r\n    setDetectionBaseList,\r\n    search,\r\n    bringTop,\r\n  }; // objects that will be passed to context API\r\n\r\n  // console.log(\"detection->\", detection);\r\n  return (\r\n    <ConferContext.Provider value={contextObj}>\r\n      {children}\r\n    </ConferContext.Provider>\r\n  );\r\n};\r\n","import { GetInsuranceListPublic } from \"Global/Adapters/GetInsuranceListPublic\";\r\nimport { GetConferServices } from \"../../Adapters/GetConferServices\";\r\nimport { GetConferInfo } from \"../../Adapters/GetConferInfo\";\r\n\r\nexport const FunctionArray = (selectedInsurance) => {\r\n  const functions = [\r\n    {\r\n      functions: GetInsuranceListPublic,\r\n      parameters: \"InsuranceList\",\r\n    },\r\n    {\r\n      functions: GetConferServices,\r\n      parameters: {\r\n        ObjName: \"Confer\",\r\n        idInsurance: selectedInsurance,\r\n      },\r\n    },\r\n    {\r\n      functions: GetConferInfo,\r\n      parameters: {\r\n        ObjName: \"Info\",\r\n      },\r\n    },\r\n  ];\r\n  return functions;\r\n};\r\n","export const HandleReplaceStoredItems = (arr1, arr2) => {\r\n  const result = [...arr1];\r\n  arr2.forEach((obj2) => {\r\n    const index = result.findIndex((obj1) => obj1.ID === obj2.ID);\r\n    if (index !== -1) {\r\n      result[index] = obj2;\r\n    }\r\n  });\r\n  return result;\r\n};\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { TimeToMinutes } from 'utils/TimeToMinutes';\r\nimport { env } from 'env';\r\n\r\nexport const CalcByDetection = async (\r\n  idInsurance,\r\n  idDetection,\r\n  setDetectionBaseList,\r\n  setBringTop,\r\n  setLargeList\r\n) => {\r\n  setDetectionBaseList((prev) => ({\r\n    ...prev,\r\n    loading: true,\r\n  }));\r\n\r\n  const patient = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  );\r\n\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_CALC_SERVICE_BY_TASHKHIS}`,\r\n    true,\r\n    {\r\n      dateeHozoor: patient?.DateHozoor,\r\n      idInsurance: idInsurance,\r\n      idPerson: patient?.IdPerson,\r\n      timeHozoor: TimeToMinutes(patient?.TimeHozoor),\r\n      idTashkhis: idDetection,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      if (response?.data?.Data?.list?.length > 0) {\r\n        setLargeList((prev) => {\r\n          return prev.map((large_list_el) => {\r\n            if (\r\n              response?.data?.Data?.list?.findIndex(\r\n                (el) => el.ID === large_list_el.ID\r\n              ) > -1\r\n            ) {\r\n              return response?.data?.Data?.list[\r\n                response?.data?.Data?.list?.findIndex(\r\n                  (el) => el.ID === large_list_el.ID\r\n                )\r\n              ];\r\n            } else {\r\n              return large_list_el;\r\n            }\r\n          });\r\n        });\r\n        //        setBringTop(true);\r\n      }\r\n      setDetectionBaseList((prev) => ({\r\n        enabled: prev.enabled,\r\n        list: response.data.Data.list.map((el) => ({\r\n          ...el,\r\n          select: true,\r\n        })),\r\n      }));\r\n    } else {\r\n      SwalAlert('error', response.data.resMessage, false);\r\n      setDetectionBaseList({\r\n        enabled: false,\r\n        list: [],\r\n      });\r\n    }\r\n  });\r\n};\r\n","import EditableCustomizableSelect from \"Global/Components/EditableComponents/EditableCustomizableSelect/EditableCustomizableSelect\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\nimport i18next from \"i18next\";\r\nimport React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nconst Insurance = ({ context, languageArray }) => {\r\n  const [insuranceValue, setInsuranceValue] = useState();\r\n  useEffect(() => {\r\n    if (insuranceValue?.ItemValue) {\r\n      context?.set_reset((prev) => prev + 1);\r\n    }\r\n  }, [insuranceValue]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <EditableCustomizableSelect\r\n        isSingle={true}\r\n        isEnglish={i18next.language === \"en\"}\r\n        initialData={context?.defaultinsurance}\r\n        SelectableDataArray={context?.insurance}\r\n        label={FindLangKey(\"general-public-insurance-type\", languageArray)}\r\n        onChange={context?.set_insurance}\r\n        GetSelectedValue={setInsuranceValue}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Insurance;\r\n","import EditablePersianSupportTextField from \"Global/Components/EditableComponents/EditablePersianSupportTextField\";\r\nimport ReadOnlyTextField from \"Global/Components/ReadOnlyComponents/ReadOnlyTextField\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\nimport i18next from \"i18next\";\r\nimport React from \"react\";\r\n\r\nconst CenterOff = ({ context, languageArray }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <EditablePersianSupportTextField\r\n        label={FindLangKey(\"add-new-confer-input-off-markaz\", languageArray)}\r\n        isEnglish={i18next.language === \"en\"}\r\n        Initialvalue={context?.info?.DiscountMarkaz || 0}\r\n        disabled={true}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default CenterOff;\r\n","import EditablePersianSupportNumericTextField from \"Global/Components/EditableComponents/EditablePersianSupportNumericTextField\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\nimport i18next from \"i18next\";\r\nimport React from \"react\";\r\n\r\nconst DoctorOff = ({ context, languageArray }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <EditablePersianSupportNumericTextField\r\n        label={FindLangKey(\"add-new-confer-input-off-doctor\", languageArray)}\r\n        isEnglish={i18next.language === \"en\"}\r\n        value={context?.info?.DiscountDoctor || 0}\r\n        onChange={context?.set_doctor_off}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DoctorOff;\r\n","import EditableCustomizableSelect from \"Global/Components/EditableComponents/EditableCustomizableSelect/EditableCustomizableSelect\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\nimport GetPostResponse from \"Global/Functions/GetPostResponse/GetPostResponse\";\r\nimport { ConferContext } from \"Routes/Protected/AddNewConfer/context/context\";\r\nimport { GetDetectionList } from \"Routes/Protected/PatientList/Adapters/GetDetectionList\";\r\nimport { env } from \"env\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { ArabicToPersian } from \"utils/ConvertToPersianTextFromArabic\";\r\n\r\nconst DetectionList = () => {\r\n  const context = useContext(ConferContext);\r\n\r\n  const [data, setData] = useState(null);\r\n\r\n  const patient = JSON.parse(sessionStorage.getItem(\"patient\"));\r\n\r\n  const detections_msg = FindLangKey(\"general-public-label-diagnose\");\r\n\r\n  const [detectionList, setDetectionList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    GetDetectionList(setDetectionList, \"detectionList\");\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      const item = detectionList?.detectionList?.filter(\r\n        (el) => el.ItemContent === data?.ItemContent\r\n      )[0];\r\n\r\n      context?.setDetection(item?.ItemValue);\r\n    }\r\n  }, [data, JSON.stringify(detectionList)]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <EditableCustomizableSelect\r\n        isSingle={true}\r\n        SelectableDataArray={detectionList?.detectionList}\r\n        label={detections_msg}\r\n        initialData={[\r\n          {\r\n            ItemValue: ArabicToPersian(patient?.NameDiagnosis),\r\n            ItemContent: ArabicToPersian(patient?.NameDiagnosis),\r\n          },\r\n        ]}\r\n        enableInitialOnchange={true}\r\n        GetSelectedValue={setData}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DetectionList;\r\n","import React from 'react';\r\nimport { Stack } from '@mui/material';\r\nimport { useContext } from 'react';\r\nimport { ConferContext } from '../../context/context';\r\nimport Insurance from './components/Insurance';\r\nimport CenterOff from './components/CenterOff';\r\nimport DoctorOff from './components/DoctorOff';\r\n\r\nimport { GlobalContext } from 'Global/Context/GlobalContextProvider';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport DetectionList from './components/DetectionList';\r\n\r\nconst Form = () => {\r\n  const context = useContext(ConferContext);\r\n  const languageArray =\r\n    useContext(GlobalContext)?.LanguageArray;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <form\r\n        onSubmit={(event) => {\r\n          event.preventDefault();\r\n        }}\r\n      >\r\n        <Stack spacing={'.5em'}>\r\n          <Insurance\r\n            context={context}\r\n            languageArray={languageArray}\r\n          />\r\n          <DetectionList context={context} />\r\n          {/* <DateCredit languageArray={languageArray} /> */}\r\n          <Stack direction=\"row-reverse\" gap=\".5em\">\r\n            <CenterOff\r\n              context={context}\r\n              languageArray={languageArray}\r\n            />\r\n            <DoctorOff\r\n              context={context}\r\n              languageArray={languageArray}\r\n            />\r\n          </Stack>\r\n        </Stack>\r\n      </form>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"frameGradient\":\"Confer_general_style_frameGradient__GkfCP\",\"ConferGeneral\":\"Confer_general_style_ConferGeneral__2g3iL\",\"ConferGeneral_select\":\"Confer_general_style_ConferGeneral_select__+Gkag\",\"ConferName\":\"Confer_general_style_ConferName__8qRJy\",\"confersContainer\":\"Confer_general_style_confersContainer__6EDxe\"};","import React from \"react\";\r\nimport { Stack } from \"@mui/material\";\r\nimport { ArabicToPersian } from \"utils/ConvertToPersianTextFromArabic\";\r\nimport style from \"../../../style/Confer.general.style.module.scss\";\r\nconst ConferName = ({ confer }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <Stack>\r\n        <p className={style.ConferName}>{ArabicToPersian(confer?.Name)}</p>\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ConferName;\r\n","import React from 'react';\r\nimport { Add, Remove } from '@mui/icons-material';\r\nimport { IconButton, Stack } from '@mui/material';\r\nimport { HandleIncreaseCount } from 'Routes/Protected/AddNewConfer/functions/HandleIncreaseCount';\r\nimport { HandleDecreaseCount } from 'Routes/Protected/AddNewConfer/functions/HandleDecreaseCount';\r\nimport { useState } from 'react';\r\nimport { themeColors } from 'Global/JsxThemeColor/JsxThemeColor';\r\n\r\nconst ConferControls = ({ context, confer }) => {\r\n  const [debounce, setDebounce] = useState(false);\r\n\r\n  const { setBringTop } = context;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Stack alignItems=\"center\">\r\n        <p\r\n          style={{\r\n            fontSize: '0.9em',\r\n            color: `${themeColors.ColorPrimary}`,\r\n          }}\r\n        >\r\n          {confer?.ID}\r\n        </p>\r\n        <IconButton\r\n          onClick={(event) => {\r\n            HandleIncreaseCount(\r\n              context,\r\n              confer,\r\n              setDebounce\r\n            );\r\n            setBringTop(false);\r\n          }}\r\n          disabled={debounce}\r\n        >\r\n          <Add\r\n            sx={{\r\n              fill: `${themeColors.ColorPrimary} !important`,\r\n            }}\r\n          />\r\n        </IconButton>\r\n\r\n        <p>{confer?.Count}</p>\r\n        <IconButton\r\n          onClick={(event) => {\r\n            HandleDecreaseCount(\r\n              context,\r\n              confer,\r\n              setDebounce\r\n            );\r\n            setBringTop(false);\r\n          }}\r\n          disabled={debounce || confer.Count === 0}\r\n        >\r\n          <Remove\r\n            sx={{\r\n              fill: `${themeColors.ColorPrimary} !important`,\r\n            }}\r\n          />\r\n        </IconButton>\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ConferControls;\r\n","import React from \"react\";\r\nimport useHandleConferPrice from \"Routes/Protected/AddNewConfer/Hooks/useHandleConferPrice\";\r\nimport i18next from \"i18next\";\r\nimport { Stack } from \"@mui/material\";\r\nimport { Price3DigitSplitter } from \"utils/Price3DigitSplitter\";\r\nimport { useContext } from \"react\";\r\nimport { GlobalContext } from \"Global/Context/GlobalContextProvider\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\n\r\nconst ConferPrice = ({ confer, context }) => {\r\n  useHandleConferPrice(confer, context);\r\n  const languageArray = useContext(GlobalContext)?.LanguageArray;\r\n  return (\r\n    <React.Fragment>\r\n      <Stack width=\"100%\">\r\n        <hr />\r\n        <Stack alignSelf=\"end\" width=\"60%\">\r\n          <Stack direction=\"row-reverse\" justifyContent=\"space-between\">\r\n            <p>\r\n              {FindLangKey(\r\n                \"confer-add-edit-common-label-patient-payable\",\r\n                languageArray\r\n              )}\r\n              :\r\n            </p>\r\n            <p>{Price3DigitSplitter(confer?.PatientPart)}</p>\r\n          </Stack>\r\n          <Stack\r\n            alignItems=\"center\"\r\n            direction=\"row-reverse\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <p>\r\n              {FindLangKey(\r\n                \"confer-add-edit-common-label-insurance-payable\",\r\n                languageArray\r\n              )}\r\n              :\r\n            </p>\r\n            <p>{Price3DigitSplitter(confer?.InsurancePart)}</p>\r\n          </Stack>\r\n          <Stack\r\n            alignItems=\"center\"\r\n            direction=\"row-reverse\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <p>\r\n              {FindLangKey(\r\n                \"confer-add-edit-common-label-total-price\",\r\n                languageArray\r\n              )}\r\n              :\r\n            </p>\r\n            <p>{Price3DigitSplitter(confer?.TotalPrice)}</p>\r\n          </Stack>\r\n        </Stack>\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ConferPrice;\r\n","import { Stack } from '@mui/material';\r\nimport React from 'react';\r\nimport style from '../../../style/Confer.general.style.module.scss';\r\nimport ConferName from './ConferName';\r\nimport ConferControls from './ConferControls';\r\nimport ConferPrice from './ConferPrice';\r\nimport useHandleSessionStoreConfer from 'Routes/Protected/AddNewConfer/Hooks/useHandleSessionStoreConfer';\r\nconst Confer = ({ confer, context }) => {\r\n  useHandleSessionStoreConfer(confer, context); //adds removes or updates confers for session storage and also for selected\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Stack\r\n        className={\r\n          confer?.Count > 0\r\n            ? style.ConferGeneral_select\r\n            : style.ConferGeneral //show thicker border if selected\r\n        }\r\n        direction=\"row-reverse\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        sx={{\r\n          borderColor: confer.select && 'gray !important',\r\n        }} // sessioned items will be in gray\r\n      >\r\n        <Stack alignItems=\"flex-end\" width=\"100%\">\r\n          {/* showing name of the confer */}\r\n          <ConferName confer={confer} />\r\n          {confer?.Count > 0 ? (\r\n            <ConferPrice\r\n              confer={confer}\r\n              context={context}\r\n            /> //showing price of the confer if selected\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </Stack>\r\n        {/* showing increase or decrease quantity buttons */}\r\n        <ConferControls context={context} confer={confer} />\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Confer;\r\n","import React, { memo } from \"react\";\r\nimport Confer from \"./Confer\";\r\nimport { Box, CircularProgress, Stack } from \"@mui/material\";\r\nimport style from \"../../../style/Confer.general.style.module.scss\";\r\nconst ConferMap = ({ context }) => {\r\n  return (\r\n    <React.Fragment>\r\n      {context?.services && // if services fetched and optimized list is ready, show confers otherwise show loading circle\r\n      context?.optimized_services &&\r\n      context?.optimized_services?.length > 0 ? (\r\n        <React.Fragment>\r\n          <div\r\n            onWheel={context?.scroll_handlers[1]}\r\n            onTouchMove={context?.scroll_handlers[0]}\r\n            style={{ transition: \"all .3s ease\" }} // div with scroll and touch event listener to show more or less items\r\n          >\r\n            <Box\r\n              sx={{ mt: \".5em\", transition: \"all .5s ease\" }}\r\n              className={style.confersContainer}\r\n            >\r\n              {context?.optimized_services?.map(\r\n                (\r\n                  confer //mapped confers\r\n                ) => (\r\n                  <Confer confer={confer} key={confer.ID} context={context} />\r\n                )\r\n              )}\r\n            </Box>\r\n          </div>\r\n        </React.Fragment>\r\n      ) : (\r\n        // loading circle\r\n        <Stack marginTop=\"1em\" width=\"100%\" alignItems=\"center\">\r\n          <CircularProgress />\r\n        </Stack>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default memo(ConferMap);\r\n","import i18next from \"i18next\";\r\nimport React from \"react\";\r\nimport { Search } from \"@mui/icons-material\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\nimport EditablePersianSupportTextField from \"Global/Components/EditableComponents/EditablePersianSupportTextField\";\r\n\r\nconst SearchBar = ({ context }) => {\r\n  const label = FindLangKey(\"general-public-search\");\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"confer-search-color-layout\">\r\n        <EditablePersianSupportTextField\r\n          label={label}\r\n          isEnglish={i18next.language === \"en\"}\r\n          onChange={context?.set_search}\r\n          Initialvalue={context?.search}\r\n          customOnChange={(event) => {\r\n            if (event.target.value.length > 0) {\r\n              context?.setBringTop(false);\r\n            }\r\n          }}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const ConfirmConfer = async (\r\n  idConfer,\r\n  setForceRender\r\n) => {\r\n  const Pateint = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  );\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_SUBMIT_TRANSACT}`,\r\n    true,\r\n    {\r\n      idConfer: parseInt(idConfer),\r\n      idPerson: Pateint?.IdPerson,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      SwalAlert('success', response.data.resMessage, false);\r\n      setForceRender && setForceRender((prev) => !prev);\r\n    } else {\r\n      SwalAlert('error', response.data.resMessage, false);\r\n      setForceRender && setForceRender((prev) => !prev);\r\n    }\r\n  });\r\n};\r\n","import SwalAlert from \"Global/Components/CommonComponents/SwalAlert/SwalAlert\";\r\nimport i18next from \"i18next\";\r\nimport { AddConfer } from \"../Adapters/AddConfer\";\r\n\r\nexport const HandleSubmitForm = (\r\n  ApiData,\r\n  info,\r\n  navigate,\r\n  confirmMsg,\r\n  confirmAdd,\r\n  noItemAlert\r\n) => {\r\n  if (ApiData?.serviceListData?.length > 0) {\r\n    SwalAlert(\"warning\", confirmAdd, true, () => {\r\n      AddConfer(ApiData, navigate, confirmMsg);\r\n    });\r\n  } else {\r\n    SwalAlert(\"warning\", noItemAlert, false);\r\n  }\r\n};\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\n\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { ConfirmConfer } from './CofirmConfer';\r\nimport { env } from 'env';\r\nimport { TimeToMinutes } from 'utils/TimeToMinutes';\r\n\r\nexport const AddConfer = async (\r\n  data,\r\n  navigate,\r\n  confirmMsg\r\n) => {\r\n  const patient = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  );\r\n\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_ADD_EDIT_CONFER_PATIENT}`,\r\n    true,\r\n    {\r\n      ...data,\r\n      idPatient: patient?.IdPatient,\r\n      idAppWorkList: patient?.Id,\r\n      Idperson: patient?.IdPerson,\r\n      timeHozoor: TimeToMinutes(patient?.TimeHozoor),\r\n      dateHozoor: patient?.DateHozoor,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      SwalAlert('success', response.data.resMessage, false);\r\n    } else\r\n      SwalAlert('error', response.data.resMessage, false);\r\n    setTimeout(() => {\r\n      navigate(-1);\r\n    }, 600);\r\n  });\r\n};\r\n","import React, { useRef } from 'react';\r\nimport { useContext } from 'react';\r\nimport { ConferContext } from '../../context/context';\r\nimport {\r\n  Stack,\r\n  Button,\r\n  LinearProgress,\r\n  IconButton,\r\n} from '@mui/material';\r\nimport ConferMap from './components/ConferMap';\r\nimport SearchBar from './components/SearchBar';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport {\r\n  AddTask,\r\n  KeyboardDoubleArrowUp,\r\n  List,\r\n} from '@mui/icons-material';\r\nimport { themeColors } from 'Global/JsxThemeColor/JsxThemeColor';\r\nimport AccessControl from 'Global/security/AccessControl';\r\nimport { GlobalContext } from 'Global/Context/GlobalContextProvider';\r\nimport { HandleSubmitForm } from '../../functions/HandleSubmitForm';\r\nimport useOberseveElement from 'Global/Hooks/useObserverElement/useOberseveElement';\r\nimport DesktopScrollUp from '../DesktopScrollUp/DesktopScrollUp';\r\n\r\nconst Confers = () => {\r\n  const context = useContext(ConferContext); // data that comes from context API\r\n  const GlobalConstants = useContext(GlobalContext);\r\n  const scrollTop_Ref = useRef(null);\r\n  const inView = useOberseveElement(scrollTop_Ref);\r\n\r\n  const showItemsBtn = FindLangKey(\r\n    'add-edit-confer-show-items'\r\n  );\r\n\r\n  const selectItemsOnDetection_msg = FindLangKey(\r\n    'add-confer-btn-label-select-services-by-detection'\r\n  );\r\n\r\n  const confirmMsg = FindLangKey(\r\n    'add-new-alert-confirm-confer'\r\n  );\r\n  const confirmAdd = FindLangKey(\r\n    'add-new-alert-confirm-adding-confer'\r\n  );\r\n  const noItemAlert = FindLangKey(\r\n    'add-new-alert-no-items-selected'\r\n  );\r\n\r\n  const setBringTop = context?.setBringTop;\r\n  const bringTop = context?.bringTop;\r\n  const detectionBaseList =\r\n    context?.detectionBaseList?.enabled;\r\n\r\n  const Handle_Trigger_Submit = () => {\r\n    HandleSubmitForm(\r\n      context?.ApiReadyData,\r\n      context?.info,\r\n      GlobalConstants.navigate,\r\n      confirmMsg,\r\n      confirmAdd,\r\n      noItemAlert\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Stack>\r\n        <Button\r\n          variant=\"outlined\"\r\n          fullWidth\r\n          sx={{\r\n            mb: '.5em',\r\n            minHeight: '40px',\r\n            color: detectionBaseList\r\n              ? `${themeColors.ColorSecondary} !important`\r\n              : `${themeColors.ColorPrimary} !important`,\r\n            backgroundColor: detectionBaseList\r\n              ? `${themeColors.ColorPrimary} !important`\r\n              : `${themeColors.ColorSecondary} !important`,\r\n          }}\r\n          color=\"colorPrimer\"\r\n          startIcon={<AddTask />}\r\n          onClick={() => {\r\n            context?.setDetectionBaseList((prev) => ({\r\n              ...prev,\r\n              enabled: !prev.enabled,\r\n            }));\r\n            setBringTop((prev) => !prev);\r\n          }}\r\n        >\r\n          {selectItemsOnDetection_msg}\r\n        </Button>\r\n        {/* show select items on top  */}\r\n\r\n        <Button\r\n          variant=\"outlined\"\r\n          fullWidth\r\n          sx={{\r\n            mb: '.5em',\r\n            minHeight: '40px',\r\n            color: bringTop\r\n              ? `${themeColors.ColorSecondary} !important`\r\n              : `${themeColors.ColorPrimary} !important`,\r\n            backgroundColor: bringTop\r\n              ? `${themeColors.ColorPrimary} !important`\r\n              : `${themeColors.ColorSecondary} !important`,\r\n          }}\r\n          color=\"colorPrimer\"\r\n          startIcon={<List />}\r\n          onClick={() => {\r\n            setBringTop((prev) => !prev);\r\n            context?.set_search('');\r\n          }}\r\n        >\r\n          {showItemsBtn}\r\n        </Button>\r\n        {context?.detectionBaseList?.loading ? (\r\n          <LinearProgress sx={{ my: '.5em' }} />\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {/* searching for items in confers */}\r\n        <SearchBar context={context} />\r\n        <div style={{ marginTop: '.5em' }}>\r\n          <Button\r\n            disabled={AccessControl(\r\n              'add-confer-operation-add-confer'\r\n            )}\r\n            variant=\"contained\"\r\n            fullWidth\r\n            sx={{\r\n              color: `${themeColors.ColorPrimary} !important`,\r\n            }}\r\n            onClick={Handle_Trigger_Submit}\r\n            ref={scrollTop_Ref}\r\n          >\r\n            {FindLangKey('general-public-add-new-confer')}\r\n          </Button>\r\n        </div>\r\n\r\n        <DesktopScrollUp\r\n          inView={inView}\r\n          scrollRef={scrollTop_Ref}\r\n        />\r\n\r\n        {/* parent component of mapped Confers */}\r\n        <ConferMap context={context} />\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Confers;\r\n","import React, { useRef } from 'react';\r\nimport { Container, Stack } from '@mui/material';\r\nimport { context as ContextProvider } from './context/context';\r\nimport Form from './Components/Form/Form';\r\nimport Confers from './Components/Confers/Confers';\r\nimport { useEffect } from 'react';\r\nconst AddNewConfer = () => {\r\n  // entry point. context provider, form and confers\r\n  useEffect(() => {\r\n    return () => {\r\n      sessionStorage.removeItem('saved_confers');\r\n      sessionStorage.removeItem('saved_insurance');\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ContextProvider>\r\n        <Container sx={{ mt: '1em' }} maxWidth=\"md\">\r\n          <Stack gap={'.5em'}>\r\n            <Form />\r\n            <Confers />\r\n          </Stack>\r\n        </Container>\r\n      </ContextProvider>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddNewConfer;\r\n","import { KeyboardDoubleArrowUp } from '@mui/icons-material';\r\nimport { IconButton } from '@mui/material';\r\nimport useCheckScreenWidth from 'Global/Hooks/useCheckScreenWidth';\r\nimport { themeColors } from 'Global/JsxThemeColor/JsxThemeColor';\r\n\r\nimport React from 'react';\r\n\r\nconst DesktopScrollUp = ({ inView, scrollRef }) => {\r\n  const screenWidth = useCheckScreenWidth(); // 1024 for Desktop\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!inView && screenWidth > 1024 ? (\r\n        <IconButton\r\n          sx={{\r\n            alignSelf: 'center',\r\n            position: 'fixed',\r\n            backgroundColor: `${themeColors.ColorPrimary}`,\r\n          }}\r\n          onClick={() => {\r\n            scrollRef.current.scrollIntoView({\r\n              behavior: 'smooth',\r\n            });\r\n          }}\r\n        >\r\n          <KeyboardDoubleArrowUp\r\n            color=\"colorSecondar\"\r\n            sx={{\r\n              fontSize: '.7em',\r\n            }}\r\n          />\r\n        </IconButton>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DesktopScrollUp;\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { TimeToMinutes } from 'utils/TimeToMinutes';\r\nimport { env } from 'env';\r\n\r\nexport const ConferPriceCalculator = async (\r\n  idInsurance,\r\n  serviceID,\r\n  count,\r\n  SetPriceTag,\r\n  confer\r\n) => {\r\n  const patient = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  );\r\n\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_CALC_SERVICE_PRICE}`,\r\n    true,\r\n    {\r\n      dateeHozoor: patient?.DateHozoor,\r\n      idInsurance: idInsurance,\r\n      idPerson: patient?.IdPerson,\r\n      serviceID: serviceID,\r\n      timeHozoor: TimeToMinutes(patient?.TimeHozoor),\r\n      count,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      const price = response.data.Data.list[0];\r\n      SetPriceTag((prev) =>\r\n        prev.map((element) =>\r\n          element.ID === confer.ID\r\n            ? {\r\n                ...element,\r\n                InsurancePart: price?.InsurancePart,\r\n                PatientPart: price?.PatientPart,\r\n                TotalPrice: price?.TotalPrice,\r\n              }\r\n            : element\r\n        )\r\n      );\r\n    } else\r\n      SwalAlert('error', response.data.resMessage, false);\r\n  });\r\n};\r\n","import React from \"react\";\r\nimport { ConferPriceCalculator } from \"../Adapters/ConferPriceCalculator\";\r\n\r\nconst useHandleConferPrice = (confer, context) => {\r\n  React.useEffect(() => {\r\n    if (confer?.Count > 0) {\r\n      ConferPriceCalculator(\r\n        context?.id_insurance,\r\n        confer.ID,\r\n        confer.Count,\r\n        context?.set_largelist,\r\n        confer\r\n      );\r\n    }\r\n  }, [confer?.Count]);\r\n};\r\n\r\nexport default useHandleConferPrice;\r\n","import React, { useEffect } from \"react\";\r\n\r\nconst useHandleSessionStoreConfer = (confer, context) => {\r\n  useEffect(() => {\r\n    if (confer.Count > 0) {\r\n      if (context?.selected?.findIndex((obj) => obj.ID === confer.ID) === -1) {\r\n        context.set_select((prev) => [...prev, { ...confer, select: true }]);\r\n      } else {\r\n        context.set_select((prev) =>\r\n          prev.map((element) =>\r\n            element.ID === confer.ID ? { ...confer, select: true } : element\r\n          )\r\n        );\r\n      }\r\n    } else {\r\n      if (confer.Count === 0) {\r\n        if (\r\n          context?.selected?.findIndex((obj) => obj.ID === confer.ID) !== -1\r\n        ) {\r\n          context.set_select((prev) =>\r\n            prev.filter((fl) => fl.ID !== confer.ID)\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }, [confer]);\r\n};\r\n\r\nexport default useHandleSessionStoreConfer;\r\n","export const HandleDecreaseCount = (context, confer, setDebounce) => {\r\n  setDebounce(true);\r\n  setTimeout(() => {\r\n    setDebounce(false);\r\n  }, 650);\r\n  if (confer.Count > 0) {\r\n    context?.set_largelist((prev) =>\r\n      prev.map((element) =>\r\n        element.ID === confer.ID\r\n          ? {\r\n              ...element,\r\n              Count: element.Count - 1,\r\n            }\r\n          : element\r\n      )\r\n    );\r\n  }\r\n};\r\n","export const HandleIncreaseCount = (context, confer, setDebounce) => {\r\n  setDebounce(true);\r\n  setTimeout(() => {\r\n    setDebounce(false);\r\n  }, 650);\r\n  context?.set_largelist((prev) =>\r\n    prev.map((element) =>\r\n      element.ID === confer.ID\r\n        ? {\r\n            ...element,\r\n            Count: element.Count + 1,\r\n          }\r\n        : element\r\n    )\r\n  );\r\n};\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { ArabicToPersian } from 'utils/ConvertToPersianTextFromArabic';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const GetDetectionList = async (\r\n  setDetectionList,\r\n  objName\r\n) => {\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_GET_TASHKHIS_LIST}`,\r\n    true,\r\n    {\r\n      idSystem: 900,\r\n      clause: '',\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1)\r\n      setDetectionList({\r\n        [objName]: response.data.Data.list.map((elemet) => {\r\n          return {\r\n            ItemValue: elemet.Id,\r\n            ItemContent: ArabicToPersian(elemet.Name),\r\n          };\r\n        }),\r\n      });\r\n    else\r\n      SwalAlert('error', response.data.resMessage, false);\r\n  });\r\n};\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M22 5.18 10.59 16.6l-4.24-4.24 1.41-1.41 2.83 2.83 10-10L22 5.18zM12 20c-4.41 0-8-3.59-8-8s3.59-8 8-8c1.57 0 3.04.46 4.28 1.25l1.45-1.45C16.1 2.67 14.13 2 12 2 6.48 2 2 6.48 2 12s4.48 10 10 10c1.73 0 3.36-.44 4.78-1.22l-1.5-1.5c-1 .46-2.11.72-3.28.72zm7-5h-3v2h3v3h2v-3h3v-2h-3v-3h-2v3z\"\n}), 'AddTask');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon([/*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 17.59 7.41 19 12 14.42 16.59 19 18 17.59l-6-6z\"\n}, \"0\"), /*#__PURE__*/_jsx(\"path\", {\n  d: \"m6 11 1.41 1.41L12 7.83l4.59 4.58L18 11l-6-6z\"\n}, \"1\")], 'KeyboardDoubleArrowUp');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 13h2v-2H3v2zm0 4h2v-2H3v2zm0-8h2V7H3v2zm4 4h14v-2H7v2zm0 4h14v-2H7v2zM7 7v2h14V7H7z\"\n}), 'List');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 13H5v-2h14v2z\"\n}), 'Remove');"],"names":["GetInsuranceListPublic","async","setGatheredData","isObjectFormNeeded","Post","concat","process","clause","then","response","data","resCode","prev","Data","list","map","elemet","ItemValue","ID","ItemContent","ArabicToPersian","Name","SwalAlert","resMessage","_ref","label","value","onChange","isEnglish","React","_jsx","children","_jsxs","Stack","alignItems","width","style","textAlign","dir","TextField","fullWidth","color","disabled","size","ref","inView","setInView","useState","useEffect","observer","IntersectionObserver","entry","isIntersecting","observe","current","disconnect","largeListArray","additionalFn","FnParams","ApplyFilter","confer","resetTrigger","indx","arguments","length","undefined","highestIndex","setHighestIndex","itemsToShow","setItemsToShow","setList","startY","setStartY","activated","setActivated","firstCall","setFirstCall","newHighestIndex","forEach","item","index","findIndex","largeListItem","handleScroll","e","deltaY","handleTouchStart","touches","clientY","handleTouchMove","currentY","updatedList","slice","useTopSelectedObject","largeList","setResetTrigger","sortedList","setSortedList","stack","setStack","newStack","Count","includes","push","splice","indexOf","newSortedList","id","itemIndex","HandleSearchItem","arr","search","result","searchIsNumber","isNaN","getScore","score","Number","Code","sort","a","b","seacrh","bringTop","Llist","debouncedData","useDebounce","items","memoItems","useMemo","JSON","stringify","sortedWordList","GetConferServices","parameters","patient","parse","sessionStorage","getItem","idInsurance","dateHozoor","DateHozoor","Idperson","IdPerson","searchfield","timeHozoor","TimeToMinutes","TimeHozoor","_response$data","_response$data$Data","ObjName","InsuranceServiceList","el","select","InsurancePart","PatientPart","TotalPrice","GetConferInfo","idAppWorkList","Id","idConfer","idPatient","IdPatient","ConferContext","createContext","context","_gatheredData$Info","setBringTop","savedInsurance","savedInsuranceRef","useRef","saved_confers","saveItemsRef","dataString","setDataString","Insurance","setInsurance","IdInsurance","InsuranceOff","setInsuranceOff","setSearch","detection","setDetection","detectionBaseList","setDetectionBaseList","enabled","gatheredData","useGatherDataFromApi","selectedInsurance","functions","setLargeList","Confer","selected","setSelected","console","log","_gatheredData$Confer","useCustomizedListRenderer","tmpList","setTmpList","useSortListByConditions","setItem","removeItem","HandleReplaceStoredItems","arr1","arr2","obj2","obj1","structuredData","element","join","_gatheredData$Confer2","_gatheredData$Insuran","InsuranceList","filter","fl","idDetection","loading","dateeHozoor","idPerson","idTashkhis","_response$data$Data$l","large_list_el","_response$data2","_response$data2$Data","_response$data2$Data$","_response$data3","_response$data3$Data","_response$data4","_response$data4$Data","_response$data4$Data$","CalcByDetection","contextObj","defaultinsurance","InsuranceName","insurance","info","Info","services","set_insurance","set_doctor_off","doctor_off","set_search","optimized_services","scroll_handlers","set_largelist","id_insurance","set_select","ApiReadyData","dateCreditNoteBook","GetCurrentDateInJalai","discountDoctor","discountMarkaz","DiscountMarkaz","erjaId","insuranceNumber","noPageNoteBook","serviceListData","idDiagnosis","set_reset","reset","Provider","languageArray","insuranceValue","setInsuranceValue","EditableCustomizableSelect","isSingle","i18next","initialData","SelectableDataArray","FindLangKey","GetSelectedValue","_context$info","EditablePersianSupportTextField","Initialvalue","EditablePersianSupportNumericTextField","DiscountDoctor","DetectionList","useContext","setData","detections_msg","detectionList","setDetectionList","GetDetectionList","_detectionList$detect","NameDiagnosis","enableInitialOnchange","Form","_useContext","GlobalContext","LanguageArray","onSubmit","event","preventDefault","spacing","direction","gap","CenterOff","DoctorOff","className","debounce","setDebounce","fontSize","themeColors","IconButton","onClick","HandleIncreaseCount","Add","sx","fill","HandleDecreaseCount","Remove","useHandleConferPrice","alignSelf","justifyContent","Price3DigitSplitter","useHandleSessionStoreConfer","borderColor","ConferName","ConferPrice","_Fragment","ConferControls","ConferMap","_context$optimized_se","_context$optimized_se2","onWheel","onTouchMove","transition","Box","mt","marginTop","CircularProgress","memo","customOnChange","target","HandleSubmitForm","ApiData","navigate","confirmMsg","confirmAdd","noItemAlert","_ApiData$serviceListD","setTimeout","AddConfer","Confers","_context$detectionBas","_context$detectionBas2","GlobalConstants","scrollTop_Ref","useOberseveElement","showItemsBtn","selectItemsOnDetection_msg","Button","variant","mb","minHeight","backgroundColor","startIcon","AddTask","List","LinearProgress","my","SearchBar","AccessControl","Handle_Trigger_Submit","DesktopScrollUp","scrollRef","AddNewConfer","ContextProvider","Container","maxWidth","screenWidth","useCheckScreenWidth","position","scrollIntoView","behavior","KeyboardDoubleArrowUp","serviceID","count","SetPriceTag","price","ConferPriceCalculator","_context$selected","_context$selected2","obj","objName","idSystem","createSvgIcon","d"],"sourceRoot":""}