{"version":3,"file":"static/js/105.0a0d4f85.chunk.js","mappings":"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","sources":["Global/Adapters/GetInsuranceListPublic.js","Global/Components/ReadOnlyComponents/ReadOnlyTextField.js","Global/Hooks/useObserverElement/useOberseveElement.js","Routes/Protected/AddNewConfer/Components/DesktopScrollUp/DesktopScrollUp.js","Routes/Protected/AddNewConfer/Adapters/ConferPriceCalculator.js","Routes/Protected/AddNewConfer/Hooks/useHandleConferPrice.js","Routes/Protected/AddNewConfer/Hooks/useHandleSessionStoreConfer.js","Routes/Protected/AddNewConfer/functions/HandleDecreaseCount.js","Routes/Protected/AddNewConfer/functions/HandleIncreaseCount.js","Routes/Protected/EditConfer/context/hooks/useCustomizedListRenderer.js","Routes/Protected/EditConfer/context/hooks/useTopSelectedObject.js","Routes/Protected/EditConfer/functions/HandleSearchItem.js","Routes/Protected/EditConfer/context/hooks/useSortListByConditions.js","Routes/Protected/EditConfer/Adapters/GetConferServices.js","Routes/Protected/EditConfer/Adapters/GetConferInfo.js","Routes/Protected/EditConfer/context/context.js","Routes/Protected/EditConfer/context/functions/FunctionArray.js","Routes/Protected/EditConfer/functions/ReplaceMatchingObjs.js","Routes/Protected/EditConfer/functions/HandleReplaceStoredItems.js","Routes/Protected/EditConfer/functions/removeDuplicates.js","Routes/Protected/EditConfer/Adapters/CalcByDetection.js","Routes/Protected/EditConfer/Components/Form/components/Insurance.js","Routes/Protected/EditConfer/Components/Form/components/CenterOff.js","Routes/Protected/EditConfer/Components/Form/components/DoctorOff.js","Routes/Protected/EditConfer/Components/Form/components/DetectionList.js","Routes/Protected/EditConfer/Components/Form/Form.js","webpack://new-ui/./src/Routes/Protected/EditConfer/style/Confer.general.style.module.scss?a19d","Routes/Protected/EditConfer/Components/Confers/components/ConferName.js","Routes/Protected/EditConfer/Components/Confers/components/ConferControls.js","Routes/Protected/EditConfer/Components/Confers/components/ConferPrice.js","Routes/Protected/EditConfer/Components/Confers/components/Confer.js","Routes/Protected/EditConfer/Components/Confers/components/ConferMap.js","Routes/Protected/EditConfer/Components/Confers/components/SearchBar.js","Routes/Protected/EditConfer/Components/Confers/Confers.js","Routes/Protected/EditConfer/Adapters/AddConfer.js","Routes/Protected/EditConfer/EditConfer.js","Routes/Protected/PatientList/Adapters/GetDetectionList.js","../node_modules/@mui/icons-material/esm/Add.js","../node_modules/@mui/icons-material/esm/AddTask.js","../node_modules/@mui/icons-material/esm/KeyboardDoubleArrowUp.js","../node_modules/@mui/icons-material/esm/List.js","../node_modules/@mui/icons-material/esm/Remove.js"],"sourcesContent":["import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { ArabicToPersian } from 'utils/ConvertToPersianTextFromArabic';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const GetInsuranceListPublic = async (\r\n  setGatheredData,\r\n  isObjectFormNeeded\r\n) => {\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_GET_INSURANCE_LIST}`,\r\n    true,\r\n    {\r\n      clause: '',\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      isObjectFormNeeded\r\n        ? setGatheredData((prev) => ({\r\n            ...prev,\r\n            [isObjectFormNeeded]:\r\n              response.data.Data.list.map((elemet) => {\r\n                return {\r\n                  ItemValue: elemet.ID,\r\n                  ItemContent: ArabicToPersian(elemet.Name),\r\n                };\r\n              }),\r\n          }))\r\n        : setGatheredData(\r\n            response.data.Data.list.map((elemet) => {\r\n              return {\r\n                ItemValue: elemet.ID,\r\n                ItemContent: ArabicToPersian(elemet.Name),\r\n              };\r\n            })\r\n          );\r\n    } else\r\n      SwalAlert('error', response.data.resMessage, false);\r\n  });\r\n};\r\n","import React from \"react\";\r\nimport { Stack, TextField } from \"@mui/material\";\r\n\r\nconst ReadOnlyTextField = ({ label, value, onChange, isEnglish = false }) => {\r\n  React.useEffect(() => {\r\n    onChange && onChange(value);\r\n  }, [value]);\r\n  return (\r\n    <React.Fragment>\r\n      <Stack alignItems=\"flex-end\" width=\"100%\">\r\n        <sub\r\n          style={{\r\n            width: \"100%\",\r\n            textAlign: isEnglish ? \"left\" : \"right\",\r\n          }}\r\n          dir={isEnglish ? \"ltr\" : \"rtl\"}\r\n        >\r\n          {label}\r\n        </sub>\r\n        <TextField\r\n          fullWidth\r\n          color=\"colorPrimer\"\r\n          disabled\r\n          value={value === \"\" ? \"داده ای ثبت نشده\" : value ?? \"\"}\r\n          size=\"small\"\r\n        />\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ReadOnlyTextField;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nconst useOberseveElement = (ref) => {\r\n  const [inView, setInView] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver(([entry]) =>\r\n      setInView(entry.isIntersecting)\r\n    );\r\n    observer.observe(ref.current);\r\n    return () => {\r\n      observer.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  return inView;\r\n};\r\n\r\nexport default useOberseveElement;\r\n","import { KeyboardDoubleArrowUp } from '@mui/icons-material';\r\nimport { IconButton } from '@mui/material';\r\nimport useCheckScreenWidth from 'Global/Hooks/useCheckScreenWidth';\r\nimport { themeColors } from 'Global/JsxThemeColor/JsxThemeColor';\r\n\r\nimport React from 'react';\r\n\r\nconst DesktopScrollUp = ({ inView, scrollRef }) => {\r\n  const screenWidth = useCheckScreenWidth(); // 1024 for Desktop\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!inView && screenWidth > 1024 ? (\r\n        <IconButton\r\n          sx={{\r\n            alignSelf: 'center',\r\n            position: 'fixed',\r\n            backgroundColor: `${themeColors.ColorPrimary}`,\r\n          }}\r\n          onClick={() => {\r\n            scrollRef.current.scrollIntoView({\r\n              behavior: 'smooth',\r\n            });\r\n          }}\r\n        >\r\n          <KeyboardDoubleArrowUp\r\n            color=\"colorSecondar\"\r\n            sx={{\r\n              fontSize: '.7em',\r\n            }}\r\n          />\r\n        </IconButton>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DesktopScrollUp;\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { TimeToMinutes } from 'utils/TimeToMinutes';\r\nimport { env } from 'env';\r\n\r\nexport const ConferPriceCalculator = async (\r\n  idInsurance,\r\n  serviceID,\r\n  count,\r\n  SetPriceTag,\r\n  confer\r\n) => {\r\n  const patient = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  );\r\n\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_CALC_SERVICE_PRICE}`,\r\n    true,\r\n    {\r\n      dateeHozoor: patient?.DateHozoor,\r\n      idInsurance: idInsurance,\r\n      idPerson: patient?.IdPerson,\r\n      serviceID: serviceID,\r\n      timeHozoor: TimeToMinutes(patient?.TimeHozoor),\r\n      count,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      const price = response.data.Data.list[0];\r\n      SetPriceTag((prev) =>\r\n        prev.map((element) =>\r\n          element.ID === confer.ID\r\n            ? {\r\n                ...element,\r\n                InsurancePart: price?.InsurancePart,\r\n                PatientPart: price?.PatientPart,\r\n                TotalPrice: price?.TotalPrice,\r\n              }\r\n            : element\r\n        )\r\n      );\r\n    } else\r\n      SwalAlert('error', response.data.resMessage, false);\r\n  });\r\n};\r\n","import React from \"react\";\r\nimport { ConferPriceCalculator } from \"../Adapters/ConferPriceCalculator\";\r\n\r\nconst useHandleConferPrice = (confer, context) => {\r\n  React.useEffect(() => {\r\n    if (confer?.Count > 0) {\r\n      ConferPriceCalculator(\r\n        context?.id_insurance,\r\n        confer.ID,\r\n        confer.Count,\r\n        context?.set_largelist,\r\n        confer\r\n      );\r\n    }\r\n  }, [confer?.Count]);\r\n};\r\n\r\nexport default useHandleConferPrice;\r\n","import React, { useEffect } from \"react\";\r\n\r\nconst useHandleSessionStoreConfer = (confer, context) => {\r\n  useEffect(() => {\r\n    if (confer.Count > 0) {\r\n      if (context?.selected?.findIndex((obj) => obj.ID === confer.ID) === -1) {\r\n        context.set_select((prev) => [...prev, { ...confer, select: true }]);\r\n      } else {\r\n        context.set_select((prev) =>\r\n          prev.map((element) =>\r\n            element.ID === confer.ID ? { ...confer, select: true } : element\r\n          )\r\n        );\r\n      }\r\n    } else {\r\n      if (confer.Count === 0) {\r\n        if (\r\n          context?.selected?.findIndex((obj) => obj.ID === confer.ID) !== -1\r\n        ) {\r\n          context.set_select((prev) =>\r\n            prev.filter((fl) => fl.ID !== confer.ID)\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }, [confer]);\r\n};\r\n\r\nexport default useHandleSessionStoreConfer;\r\n","export const HandleDecreaseCount = (context, confer, setDebounce) => {\r\n  setDebounce(true);\r\n  setTimeout(() => {\r\n    setDebounce(false);\r\n  }, 650);\r\n  if (confer.Count > 0) {\r\n    context?.set_largelist((prev) =>\r\n      prev.map((element) =>\r\n        element.ID === confer.ID\r\n          ? {\r\n              ...element,\r\n              Count: element.Count - 1,\r\n            }\r\n          : element\r\n      )\r\n    );\r\n  }\r\n};\r\n","export const HandleIncreaseCount = (context, confer, setDebounce) => {\r\n  setDebounce(true);\r\n  setTimeout(() => {\r\n    setDebounce(false);\r\n  }, 650);\r\n  context?.set_largelist((prev) =>\r\n    prev.map((element) =>\r\n      element.ID === confer.ID\r\n        ? {\r\n            ...element,\r\n            Count: element.Count + 1,\r\n          }\r\n        : element\r\n    )\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nconst useCustomizedListRenderer = (\r\n  largeListArray,\r\n  additionalFn,\r\n  FnParams,\r\n  ApplyFilter,\r\n  confer,\r\n  resetTrigger\r\n) => {\r\n  const [highestIndex, setHighestIndex] = useState(50);\r\n  const [itemsToShow, setItemsToShow] = useState(highestIndex);\r\n  const [list, setList] = useState([]);\r\n  const [startY, setStartY] = useState(0);\r\n  const [activated, setActivated] = useState(false);\r\n  const [firstCall, setFirstCall] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (confer && largeListArray) {\r\n      let newHighestIndex = 50;\r\n      confer.forEach((item) => {\r\n        const index = largeListArray.findIndex(\r\n          (largeListItem) => largeListItem.ID === item.ID\r\n        );\r\n        if (index > newHighestIndex) {\r\n          newHighestIndex = index + 20;\r\n        }\r\n      });\r\n      setHighestIndex(newHighestIndex);\r\n      setItemsToShow(newHighestIndex);\r\n    }\r\n  }, [confer, largeListArray, resetTrigger]);\r\n\r\n  const handleScroll = (e) => {\r\n    if (e.deltaY > 0) {\r\n      setItemsToShow((prev) => prev + 1);\r\n    } else {\r\n      setItemsToShow((prev) => (prev > highestIndex ? prev - 1 : prev));\r\n    }\r\n  };\r\n\r\n  const handleTouchStart = (e) => {\r\n    setStartY(e.touches[0].clientY);\r\n  };\r\n\r\n  const handleTouchMove = (e) => {\r\n    const currentY = e.touches[0].clientY;\r\n    if (currentY > startY) {\r\n      setItemsToShow((prev) => prev + 1);\r\n    } else {\r\n      setItemsToShow((prev) => (prev > highestIndex ? prev - 1 : prev));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (largeListArray) {\r\n      let updatedList = largeListArray.slice(0, itemsToShow);\r\n      if (additionalFn) {\r\n        updatedList = additionalFn(updatedList, ...FnParams);\r\n      }\r\n      ApplyFilter\r\n        ? setList(ApplyFilter(largeListArray, FnParams))\r\n        : setList(updatedList);\r\n    }\r\n  }, [largeListArray, itemsToShow, FnParams, resetTrigger]);\r\n\r\n  useEffect(() => {\r\n    setActivated(true);\r\n    setFirstCall(false);\r\n  }, []);\r\n\r\n  return {\r\n    list,\r\n    handleTouchMove,\r\n    handleScroll,\r\n    handleTouchStart,\r\n    activated,\r\n    firstCall,\r\n  };\r\n};\r\n\r\nexport default useCustomizedListRenderer;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst useTopSelectedObject = (largeList, resetTrigger, setResetTrigger) => {\r\n  const [sortedList, setSortedList] = useState(largeList);\r\n  const [stack, setStack] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const newStack = [...stack];\r\n    largeList.forEach((item) => {\r\n      if (item.Count > 0 && !newStack.includes(item.ID)) {\r\n        newStack.push(item.ID);\r\n      } else if (item.Count === 0 && newStack.includes(item.ID)) {\r\n        newStack.splice(newStack.indexOf(item.ID), 1);\r\n      }\r\n    });\r\n    setStack(newStack);\r\n  }, [largeList]);\r\n\r\n  useEffect(() => {\r\n    if (resetTrigger > 0) {\r\n      setStack([]);\r\n    }\r\n  }, [resetTrigger, largeList]);\r\n  useEffect(() => {\r\n    if (stack.length === 0) setResetTrigger(0);\r\n  }, [stack]);\r\n\r\n  useEffect(() => {\r\n    const newSortedList = [...largeList];\r\n    stack.forEach((id, index) => {\r\n      const itemIndex = newSortedList.findIndex((item) => item.ID === id);\r\n      if (itemIndex !== -1) {\r\n        const [item] = newSortedList.splice(itemIndex, 1);\r\n        newSortedList.splice(index, 0, item);\r\n      }\r\n    });\r\n    setSortedList(newSortedList);\r\n  }, [stack]);\r\n\r\n  return sortedList;\r\n};\r\n\r\nexport default useTopSelectedObject;\r\n","import { ArabicToPersian } from \"utils/ConvertToPersianTextFromArabic\";\r\n\r\nexport const HandleSearchItem = (arr, search) => {\r\n  const persianArr = arr?.map((confer) => ({\r\n    ...confer,\r\n    Name: ArabicToPersian(confer?.Name),\r\n  }));\r\n\r\n  // Create a copy of the array to avoid modifying the original\r\n  let result = [...persianArr];\r\n\r\n  // Check if search is a number\r\n  let searchIsNumber = !isNaN(search);\r\n\r\n  // Define a function to calculate the score of each item\r\n  let getScore = (item) => {\r\n    let score = 0;\r\n    if (searchIsNumber && Number(item.Code) === Number(search)) {\r\n      score += 2;\r\n    }\r\n    if (item.Name.includes(search)) {\r\n      score += 1;\r\n    }\r\n    return score;\r\n  };\r\n\r\n  // Sort the array based on the score of each item\r\n  result.sort((a, b) => getScore(b) - getScore(a));\r\n\r\n  // Return the top ten results\r\n  return result.slice(0, 10);\r\n};\r\n","import React, { useMemo } from \"react\";\r\nimport useTopSelectedObject from \"./useTopSelectedObject\";\r\nimport { HandleSearchItem } from \"../../functions/HandleSearchItem\";\r\nimport useDebounce from \"Global/Hooks/useDebounce/useDebounce\";\r\n\r\nconst useSortListByConditions = (\r\n  largeList = [],\r\n  seacrh,\r\n  resetTrigger,\r\n  setResetTrigger,\r\n  bringTop\r\n) => {\r\n  const debouncedData = useDebounce(seacrh, 1);\r\n\r\n  const sortedList = useTopSelectedObject(\r\n    largeList,\r\n    resetTrigger,\r\n    setResetTrigger\r\n  );\r\n\r\n  const items = HandleSearchItem(largeList, debouncedData);\r\n\r\n  const memoItems = useMemo(() => items, [JSON.stringify(items)]);\r\n\r\n  const sortedWordList = useTopSelectedObject(\r\n    memoItems,\r\n    resetTrigger,\r\n    setResetTrigger\r\n  );\r\n\r\n  return seacrh.length === 0\r\n    ? bringTop\r\n      ? sortedList\r\n      : largeList\r\n    : bringTop\r\n    ? sortedWordList\r\n    : memoItems;\r\n};\r\n\r\nexport default useSortListByConditions;\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nimport { TimeToMinutes } from 'utils/TimeToMinutes';\r\nexport const GetConferServices = async (\r\n  setGatheredData,\r\n  parameters\r\n) => {\r\n  const patient = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  );\r\n  parameters?.idInsurance &&\r\n    Post(\r\n      'POST',\r\n      `${process.env.REACT_APP_API_URL_API_GET_ERJASERVICE_LIST}`,\r\n      true,\r\n      {\r\n        dateHozoor: patient?.DateHozoor,\r\n        idInsurance: parameters?.idInsurance,\r\n        Idperson: patient?.IdPerson,\r\n        searchfield: '',\r\n        timeHozoor: TimeToMinutes(patient?.TimeHozoor),\r\n      }\r\n    ).then((response) => {\r\n      if (response.data.resCode === 1) {\r\n        setGatheredData((prev) => ({\r\n          ...prev,\r\n          [parameters?.ObjName]:\r\n            response?.data?.Data?.InsuranceServiceList.map(\r\n              (el) => ({\r\n                ...el,\r\n                select: false,\r\n                InsurancePart: 0,\r\n                PatientPart: 0,\r\n                TotalPrice: 0,\r\n              })\r\n            ),\r\n        }));\r\n      } else\r\n        SwalAlert('error', response.data.resMessage, false);\r\n    });\r\n};\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const GetConferInfo = async (\r\n  setGatheredData,\r\n  parameters\r\n) => {\r\n  const patient = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  );\r\n  const conferData = JSON.parse(\r\n    sessionStorage.getItem('conferData')\r\n  );\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_ADD_EDIT}`,\r\n    true,\r\n    {\r\n      idAppWorkList: patient?.Id,\r\n      idConfer: conferData?.ID,\r\n      idPatient: patient?.IdPatient,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      setGatheredData((prev) => ({\r\n        ...prev,\r\n        [parameters.ObjName]: response.data.Data,\r\n      }));\r\n    } else\r\n      SwalAlert('error', response.data.resMessage, false);\r\n  });\r\n};\r\n","import useGatherDataFromApi from 'Global/Hooks/useGatherDataFromApi';\r\nimport useCustomizedListRenderer from './hooks/useCustomizedListRenderer';\r\nimport useSortListByConditions from './hooks/useSortListByConditions';\r\nimport React, { useLayoutEffect, useState } from 'react';\r\nimport { createContext } from 'react';\r\nimport { FunctionArray } from './functions/FunctionArray';\r\nimport { ArabicToPersian } from 'utils/ConvertToPersianTextFromArabic';\r\nimport { useEffect } from 'react';\r\nimport { useRef } from 'react';\r\nimport { HandleReplaceStoredItems } from '../functions/HandleReplaceStoredItems';\r\nimport { GetCurrentDateInJalai } from 'utils/GetCurrentDateInJalai';\r\nimport { ReplaceMatchingObjs } from '../functions/ReplaceMatchingObjs';\r\nimport { removeDuplicates } from '../functions/removeDuplicates';\r\nimport { CalcByDetection } from '../Adapters/CalcByDetection';\r\n\r\nexport const ConferContext = createContext();\r\n\r\nexport const context = ({ children }) => {\r\n  const [bringTop, setBringTop] = useState(false); // toggle bringing selected items to the top\r\n  const [resetTrigger, setResetTrigger] = useState(0); // reset every sorted item when insurance changes\r\n  const savedInsurance = sessionStorage.getItem(\r\n    'saved_insurance'\r\n  );\r\n  const savedInsuranceRef = useRef(\r\n    savedInsurance !== 'undefined' &&\r\n      savedInsurance !== 'null'\r\n      ? JSON.parse(savedInsurance)\r\n      : null\r\n  );\r\n\r\n  const patient = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  ); // getting patient information from session storage\r\n  const saved_confers =\r\n    sessionStorage.getItem('saved_confers'); //getting saved confers from session storage\r\n  const saveItemsRef = useRef(JSON.parse(saved_confers)); //session saved items goes in ref to not update during lifecycle\r\n  const [dataString, setDataString] = useState(''); // ID count data string store\r\n  const [Insurance, setInsurance] = useState(\r\n    savedInsuranceRef.current\r\n      ? savedInsuranceRef.current[0].ItemValue\r\n      : patient?.IdInsurance\r\n  ); // Id insurance state (select box)\r\n  const [InsuranceOff, setInsuranceOff] = useState(0); //insurance doctor state\r\n  const [search, setSearch] = useState(''); // search bar state\r\n  // note, the hook useEffect has changed to useMemo. in case of error, roll it back\r\n  const { gatheredData } = useGatherDataFromApi(\r\n    FunctionArray(Insurance)\r\n  ); // gathering API datas\r\n  const [largeList, setLargeList] = useState(\r\n    gatheredData?.Confer || []\r\n  ); //confer service list set in state to be changable\r\n  const [selected, setSelected] = useState(\r\n    saveItemsRef.current || []\r\n  ); //selected Items\r\n  const [detection, setDetection] = useState();\r\n  const [detectionBaseList, setDetectionBaseList] =\r\n    useState({\r\n      enabled: false,\r\n      list: [],\r\n    });\r\n\r\n  useEffect(() => {\r\n    if (\r\n      gatheredData?.Confer &&\r\n      gatheredData?.Confer?.length > 0\r\n    ) {\r\n      setLargeList(\r\n        ReplaceMatchingObjs(\r\n          gatheredData?.Confer,\r\n          gatheredData?.Info?.SavedServiceList\r\n        )\r\n      );\r\n    }\r\n  }, [gatheredData?.Confer]); // when confer services fetched, sets the state\r\n  const topSortedList = useSortListByConditions(\r\n    largeList,\r\n    search,\r\n    resetTrigger,\r\n    setResetTrigger,\r\n    bringTop,\r\n    detectionBaseList?.list\r\n  );\r\n  const { list, handleTouchMove, handleScroll } =\r\n    useCustomizedListRenderer(\r\n      topSortedList,\r\n      undefined,\r\n      undefined,\r\n      undefined,\r\n      saveItemsRef.current,\r\n      resetTrigger\r\n    ); // optimize list rendering\r\n\r\n  const sortedList = list;\r\n  useEffect(() => {\r\n    if (selected.length > 0) {\r\n      sessionStorage.setItem(\r\n        'saved_confers',\r\n        JSON.stringify(selected)\r\n      );\r\n    } else {\r\n      sessionStorage.removeItem('saved_confers');\r\n    }\r\n  }, [selected]); //session save items\r\n  useEffect(() => {\r\n    if (saveItemsRef.current && gatheredData?.Confer) {\r\n      setLargeList(\r\n        HandleReplaceStoredItems(\r\n          gatheredData?.Confer,\r\n          saveItemsRef.current\r\n        )\r\n      );\r\n    }\r\n  }, [gatheredData?.Confer]); //set retereived session items\r\n  useEffect(() => {\r\n    const structuredData = selected\r\n      .map((element) => `${element.ID},${element.Count}`)\r\n      .join('#');\r\n    setDataString(structuredData);\r\n  }, [selected]); // create ID Count string for API\r\n  useEffect(() => {\r\n    if (resetTrigger > 0) {\r\n      saveItemsRef.current = [];\r\n      sessionStorage.removeItem('saved_confers');\r\n      setSelected([]);\r\n      setLargeList([]);\r\n    }\r\n  }, [resetTrigger]);\r\n  useEffect(() => {\r\n    if (gatheredData?.Confer?.length > 0) {\r\n      sessionStorage.setItem(\r\n        'saved_insurance',\r\n        JSON.stringify(\r\n          gatheredData?.InsuranceList?.filter(\r\n            (fl) => fl.ItemValue === Insurance\r\n          )\r\n        )\r\n      );\r\n    }\r\n  }, [gatheredData]);\r\n  useEffect(() => {\r\n    if (selected.length > 0) {\r\n      setSelected(removeDuplicates(selected));\r\n    }\r\n  }, [selected]);\r\n  useEffect(() => {\r\n    sessionStorage.setItem(\r\n      'patient',\r\n      JSON.stringify({\r\n        ...patient,\r\n        IdInsurance: Insurance,\r\n        InsuranceName: gatheredData?.InsuranceList?.filter(\r\n          (fl) => fl.ItemValue === Insurance\r\n        )[0].ItemContent,\r\n      })\r\n    );\r\n  }, [selected, gatheredData?.InsuranceList]);\r\n\r\n  useEffect(() => {\r\n    if (detectionBaseList?.enabled) {\r\n      CalcByDetection(\r\n        Insurance,\r\n        detection,\r\n        setDetectionBaseList,\r\n        setBringTop,\r\n        setLargeList\r\n      );\r\n    }\r\n  }, [detectionBaseList?.enabled]);\r\n\r\n  // useEffect(() => {\r\n  //   if (detectionBaseList?.list?.length > 0) {\r\n  //     setBringTop(true);\r\n  //   }\r\n  // }, [JSON.stringify(detectionBaseList?.list)]);\r\n\r\n  useEffect(() => {\r\n    if (detectionBaseList.list) {\r\n      setSelected(detectionBaseList?.list);\r\n    }\r\n  }, [JSON.stringify(detectionBaseList.list)]);\r\n\r\n  const contextObj = {\r\n    defaultinsurance: savedInsuranceRef.current\r\n      ? [\r\n          {\r\n            ItemValue: ArabicToPersian(\r\n              savedInsuranceRef.current[0].ItemContent\r\n            ),\r\n            ItemContent: ArabicToPersian(\r\n              savedInsuranceRef.current[0].ItemContent\r\n            ),\r\n          },\r\n        ]\r\n      : [\r\n          {\r\n            ItemValue: ArabicToPersian(\r\n              patient?.InsuranceName\r\n            ),\r\n            ItemContent: ArabicToPersian(\r\n              patient?.InsuranceName\r\n            ),\r\n          },\r\n        ],\r\n    insurance: gatheredData?.InsuranceList,\r\n    info: gatheredData?.Info,\r\n    services: gatheredData?.Confer,\r\n    set_insurance: setInsurance,\r\n    set_doctor_off: setInsuranceOff,\r\n    doctor_off: InsuranceOff,\r\n    set_search: setSearch,\r\n    optimized_services: sortedList,\r\n    scroll_handlers: [handleTouchMove, handleScroll],\r\n    set_largelist: setLargeList,\r\n    id_insurance: Insurance,\r\n    set_select: setSelected,\r\n    selected,\r\n    ApiReadyData: {\r\n      dateCreditNoteBook: GetCurrentDateInJalai(),\r\n      discountDoctor: InsuranceOff,\r\n      discountMarkaz: gatheredData?.Info?.DiscountMarkaz,\r\n      erjaId: 0,\r\n      idInsurance: Insurance,\r\n      insuranceNumber: '',\r\n      noPageNoteBook: '',\r\n      serviceListData: dataString,\r\n      idDiagnosis: detection,\r\n    },\r\n    set_reset: setResetTrigger,\r\n    reset: resetTrigger,\r\n    set_reset: setResetTrigger,\r\n    setBringTop,\r\n    detection,\r\n    setDetection,\r\n    detectionBaseList,\r\n    setDetectionBaseList,\r\n    search,\r\n    bringTop,\r\n  }; // objects that will be passed to context API\r\n  return (\r\n    <ConferContext.Provider value={contextObj}>\r\n      {children}\r\n    </ConferContext.Provider>\r\n  );\r\n};\r\n","import { GetInsuranceListPublic } from \"Global/Adapters/GetInsuranceListPublic\";\r\nimport { GetConferServices } from \"../../Adapters/GetConferServices\";\r\nimport { GetConferInfo } from \"../../Adapters/GetConferInfo\";\r\n\r\nexport const FunctionArray = (selectedInsurance) => {\r\n  const functions = [\r\n    {\r\n      functions: GetInsuranceListPublic,\r\n      parameters: \"InsuranceList\",\r\n    },\r\n    {\r\n      functions: GetConferServices,\r\n      parameters: {\r\n        ObjName: \"Confer\",\r\n        idInsurance: selectedInsurance,\r\n      },\r\n    },\r\n    {\r\n      functions: GetConferInfo,\r\n      parameters: {\r\n        ObjName: \"Info\",\r\n      },\r\n    },\r\n  ];\r\n  return functions;\r\n};\r\n","export const ReplaceMatchingObjs = (arr1, arr2) => {\r\n  const result = [...arr1];\r\n  arr2?.forEach((obj2) => {\r\n    const index = result.findIndex((obj1) => obj1.ID === obj2.ID);\r\n    if (index !== -1) {\r\n      result[index] = obj2;\r\n    }\r\n  });\r\n  return result;\r\n};\r\n","export const HandleReplaceStoredItems = (arr1, arr2) => {\r\n  const result = [...arr1];\r\n  arr2.forEach((obj2) => {\r\n    const index = result.findIndex((obj1) => obj1.ID === obj2.ID);\r\n    if (index !== -1) {\r\n      result[index] = obj2;\r\n    }\r\n  });\r\n  return result;\r\n};\r\n","export const removeDuplicates = (arr) => {\r\n  let unique = {};\r\n  let hasDuplicates = false;\r\n  arr.forEach(function (i) {\r\n    if (!unique[i.ID]) {\r\n      unique[i.ID] = true;\r\n    } else {\r\n      hasDuplicates = true;\r\n    }\r\n  });\r\n  if (!hasDuplicates) return arr;\r\n  return Object.keys(unique).map(function (k) {\r\n    return arr.find(function (e) {\r\n      return e.ID == k;\r\n    });\r\n  });\r\n};\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { TimeToMinutes } from 'utils/TimeToMinutes';\r\nimport { env } from 'env';\r\n\r\nexport const CalcByDetection = async (\r\n  idInsurance,\r\n  idDetection,\r\n  setDetectionBaseList,\r\n  setBringTop,\r\n  setLargeList\r\n) => {\r\n  setDetectionBaseList((prev) => ({\r\n    ...prev,\r\n    loading: true,\r\n  }));\r\n\r\n  const patient = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  );\r\n\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_CALC_SERVICE_BY_TASHKHIS}`,\r\n    true,\r\n    {\r\n      dateeHozoor: patient?.DateHozoor,\r\n      idInsurance: idInsurance,\r\n      idPerson: patient?.IdPerson,\r\n      timeHozoor: TimeToMinutes(patient?.TimeHozoor),\r\n      idTashkhis: idDetection,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      if (response?.data?.Data?.list?.length > 0) {\r\n        setLargeList((prev) => {\r\n          return prev.map((large_list_el) => {\r\n            if (\r\n              response?.data?.Data?.list?.findIndex(\r\n                (el) => el.ID === large_list_el.ID\r\n              ) > -1\r\n            ) {\r\n              return response?.data?.Data?.list[\r\n                response?.data?.Data?.list?.findIndex(\r\n                  (el) => el.ID === large_list_el.ID\r\n                )\r\n              ];\r\n            } else {\r\n              return large_list_el;\r\n            }\r\n          });\r\n        });\r\n      }\r\n      setDetectionBaseList((prev) => ({\r\n        enabled: prev.enabled,\r\n        list: response.data.Data.list.map((el) => ({\r\n          ...el,\r\n          select: true,\r\n        })),\r\n      }));\r\n    } else {\r\n      SwalAlert('error', response.data.resMessage, false);\r\n      setDetectionBaseList({\r\n        enabled: false,\r\n        list: [],\r\n      });\r\n    }\r\n  });\r\n};\r\n","import EditableCustomizableSelect from \"Global/Components/EditableComponents/EditableCustomizableSelect/EditableCustomizableSelect\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\nimport i18next from \"i18next\";\r\nimport React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nconst Insurance = ({ context, GlobalConstants }) => {\r\n  const [insuranceValue, setInsuranceValue] = useState();\r\n  useEffect(() => {\r\n    if (insuranceValue?.ItemValue) {\r\n      context?.set_reset((prev) => prev + 1);\r\n    }\r\n  }, [insuranceValue]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <EditableCustomizableSelect\r\n        isSingle={true}\r\n        isEnglish={i18next.language === \"en\"}\r\n        initialData={context?.defaultinsurance}\r\n        SelectableDataArray={context?.insurance}\r\n        label={FindLangKey(\r\n          \"general-public-insurance-type\",\r\n          GlobalConstants?.LanguageArray\r\n        )}\r\n        onChange={context?.set_insurance}\r\n        GetSelectedValue={setInsuranceValue}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Insurance;\r\n","import EditablePersianSupportTextField from \"Global/Components/EditableComponents/EditablePersianSupportTextField\";\r\nimport ReadOnlyTextField from \"Global/Components/ReadOnlyComponents/ReadOnlyTextField\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\nimport i18next from \"i18next\";\r\nimport React from \"react\";\r\n\r\nconst CenterOff = ({ context, GlobalConstants }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <EditablePersianSupportTextField\r\n        disabled={true}\r\n        label={FindLangKey(\r\n          \"add-new-confer-input-off-markaz\",\r\n          GlobalConstants?.LanguageArray\r\n        )}\r\n        isEnglish={i18next.language === \"en\"}\r\n        Initialvalue={context?.info?.DiscountMarkaz || 0}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default CenterOff;\r\n","import EditablePersianSupportNumericTextField from \"Global/Components/EditableComponents/EditablePersianSupportNumericTextField\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\nimport i18next from \"i18next\";\r\nimport React from \"react\";\r\n\r\nconst DoctorOff = ({ context, GlobalConstants }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <EditablePersianSupportNumericTextField\r\n        label={FindLangKey(\r\n          \"add-new-confer-input-off-doctor\",\r\n          GlobalConstants?.LanguageArray\r\n        )}\r\n        isEnglish={i18next.language === \"en\"}\r\n        value={context?.info?.DiscountDoctor || 0}\r\n        onChange={context?.set_doctor_off}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DoctorOff;\r\n","import EditableCustomizableSelect from \"Global/Components/EditableComponents/EditableCustomizableSelect/EditableCustomizableSelect\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\nimport { ConferContext } from \"Routes/Protected/EditConfer/context/context\";\r\nimport { GetDetectionList } from \"Routes/Protected/PatientList/Adapters/GetDetectionList\";\r\nimport React, { useContext, useEffect, useLayoutEffect, useState } from \"react\";\r\nimport { ArabicToPersian } from \"utils/ConvertToPersianTextFromArabic\";\r\n\r\nconst DetectionList = () => {\r\n  const context = useContext(ConferContext);\r\n\r\n  const [data, setData] = useState(null);\r\n\r\n  const patient = JSON.parse(sessionStorage.getItem(\"patient\"));\r\n\r\n  const detections_msg = FindLangKey(\"general-public-label-diagnose\");\r\n\r\n  const [detectionList, setDetectionList] = useState([]);\r\n\r\n  useLayoutEffect(() => {\r\n    GetDetectionList(setDetectionList, \"detectionList\");\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      const item = detectionList?.detectionList?.filter(\r\n        (el) => el.ItemContent === data?.ItemContent\r\n      )[0];\r\n\r\n      context?.setDetection(item?.ItemValue);\r\n    }\r\n  }, [data, JSON.stringify(detectionList)]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <EditableCustomizableSelect\r\n        isSingle={true}\r\n        SelectableDataArray={detectionList?.detectionList}\r\n        label={detections_msg}\r\n        initialData={[\r\n          {\r\n            ItemValue: ArabicToPersian(patient?.NameDiagnosis),\r\n            ItemContent: ArabicToPersian(patient?.NameDiagnosis),\r\n          },\r\n        ]}\r\n        enableInitialOnchange={true}\r\n        GetSelectedValue={setData}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DetectionList;\r\n","import React from 'react';\r\nimport { Stack } from '@mui/material';\r\nimport { useContext } from 'react';\r\nimport { ConferContext } from '../../context/context';\r\nimport Insurance from './components/Insurance';\r\nimport DateCredit from './components/DateCredit';\r\nimport CenterOff from './components/CenterOff';\r\nimport DoctorOff from './components/DoctorOff';\r\nimport SubmitButton from 'Global/Components/UnEditableComponents/SubmitButton/SubmitButton';\r\nimport { GlobalContext } from 'Global/Context/GlobalContextProvider';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport AccessControl from 'Global/security/AccessControl';\r\nimport DetectionList from './components/DetectionList';\r\n\r\nconst Form = () => {\r\n  const context = useContext(ConferContext);\r\n  const GlobalConstants = useContext(GlobalContext);\r\n  const languageArray =\r\n    useContext(GlobalContext)?.LanguageArray;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <form\r\n        onSubmit={(event) => {\r\n          event.preventDefault();\r\n        }}\r\n      >\r\n        <Stack spacing={1}>\r\n          <Insurance\r\n            context={context}\r\n            GlobalConstants={GlobalConstants}\r\n          />\r\n          <DetectionList context={context} />\r\n          {/* <DateCredit GlobalConstants={GlobalConstants} /> */}\r\n          <Stack direction=\"row-reverse\" gap={'.5em'}>\r\n            <CenterOff\r\n              context={context}\r\n              GlobalConstants={GlobalConstants}\r\n            />\r\n            <DoctorOff\r\n              context={context}\r\n              GlobalConstants={GlobalConstants}\r\n            />\r\n          </Stack>\r\n        </Stack>\r\n      </form>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"frameGradient\":\"Confer_general_style_frameGradient__qMz4J\",\"ConferGeneral\":\"Confer_general_style_ConferGeneral__xK7Wd\",\"ConferGeneral_select\":\"Confer_general_style_ConferGeneral_select__XbCpt\",\"ConferName\":\"Confer_general_style_ConferName__h91Qs\",\"confersContainer\":\"Confer_general_style_confersContainer__xtn-i\"};","import React from \"react\";\r\nimport { Stack } from \"@mui/material\";\r\nimport { ArabicToPersian } from \"utils/ConvertToPersianTextFromArabic\";\r\nimport style from \"../../../style/Confer.general.style.module.scss\";\r\nconst ConferName = ({ confer }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <Stack>\r\n        <p className={style.ConferName}>{ArabicToPersian(confer?.Name)}</p>\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ConferName;\r\n","import React from 'react';\r\nimport { Add, Remove } from '@mui/icons-material';\r\nimport { IconButton, Stack } from '@mui/material';\r\nimport { HandleIncreaseCount } from 'Routes/Protected/AddNewConfer/functions/HandleIncreaseCount';\r\nimport { HandleDecreaseCount } from 'Routes/Protected/AddNewConfer/functions/HandleDecreaseCount';\r\nimport { useState } from 'react';\r\nimport { themeColors } from 'Global/JsxThemeColor/JsxThemeColor';\r\n\r\nconst ConferControls = ({ context, confer }) => {\r\n  const [debounce, setDebounce] = useState(false);\r\n\r\n  const { setBringTop } = context;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Stack alignItems=\"center\">\r\n        <IconButton\r\n          onClick={() => {\r\n            HandleIncreaseCount(\r\n              context,\r\n              confer,\r\n              setDebounce\r\n            );\r\n            setBringTop(false);\r\n          }}\r\n          disabled={debounce}\r\n        >\r\n          <Add\r\n            sx={{\r\n              fill: `${themeColors.ColorPrimary} !important`,\r\n            }}\r\n          />\r\n        </IconButton>\r\n        <p>{confer?.Count}</p>\r\n        <IconButton\r\n          onClick={() => {\r\n            HandleDecreaseCount(\r\n              context,\r\n              confer,\r\n              setDebounce\r\n            );\r\n            setBringTop(false);\r\n          }}\r\n          disabled={debounce || confer.Count === 0}\r\n        >\r\n          <Remove\r\n            sx={{\r\n              fill: `${themeColors.ColorPrimary} !important`,\r\n            }}\r\n          />\r\n        </IconButton>\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ConferControls;\r\n","import React from \"react\";\r\nimport useHandleConferPrice from \"Routes/Protected/AddNewConfer/Hooks/useHandleConferPrice\";\r\nimport i18next from \"i18next\";\r\nimport { Stack } from \"@mui/material\";\r\nimport { Price3DigitSplitter } from \"utils/Price3DigitSplitter\";\r\nimport { useContext } from \"react\";\r\nimport { GlobalContext } from \"Global/Context/GlobalContextProvider\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\n\r\nconst ConferPrice = ({ confer, context }) => {\r\n  useHandleConferPrice(confer, context);\r\n  const languageArray = useContext(GlobalContext)?.LanguageArray;\r\n  return (\r\n    <React.Fragment>\r\n      <Stack width=\"100%\">\r\n        <hr />\r\n        <Stack alignSelf=\"end\" width=\"60%\">\r\n          <Stack direction=\"row-reverse\" justifyContent=\"space-between\">\r\n            <p>\r\n              {FindLangKey(\r\n                \"confer-add-edit-common-label-patient-payable\",\r\n                languageArray\r\n              )}\r\n              :\r\n            </p>\r\n            <p>{Price3DigitSplitter(confer?.PatientPart)}</p>\r\n          </Stack>\r\n          <Stack\r\n            alignItems=\"center\"\r\n            direction=\"row-reverse\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <p>\r\n              {FindLangKey(\r\n                \"confer-add-edit-common-label-insurance-payable\",\r\n                languageArray\r\n              )}\r\n              :\r\n            </p>\r\n            <p>{Price3DigitSplitter(confer?.InsurancePart)}</p>\r\n          </Stack>\r\n          <Stack\r\n            alignItems=\"center\"\r\n            direction=\"row-reverse\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <p>\r\n              {FindLangKey(\r\n                \"confer-add-edit-common-label-total-price\",\r\n                languageArray\r\n              )}\r\n              :\r\n            </p>\r\n            <p>{Price3DigitSplitter(confer?.TotalPrice)}</p>\r\n          </Stack>\r\n        </Stack>\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ConferPrice;\r\n","import { Stack } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport style from \"../../../style/Confer.general.style.module.scss\";\r\nimport ConferName from \"./ConferName\";\r\nimport ConferControls from \"./ConferControls\";\r\nimport ConferPrice from \"./ConferPrice\";\r\nimport useHandleSessionStoreConfer from \"Routes/Protected/AddNewConfer/Hooks/useHandleSessionStoreConfer\";\r\nconst Confer = ({ confer, context }) => {\r\n  useHandleSessionStoreConfer(confer, context); //adds removes or updates confers for session storage and also for selected\r\n  return (\r\n    <React.Fragment>\r\n      <Stack\r\n        className={\r\n          confer?.Count > 0 ? style.ConferGeneral_select : style.ConferGeneral //show thicker border if selected\r\n        }\r\n        direction=\"row-reverse\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        sx={{ borderColor: confer.select && \"gray !important\" }} // sessioned items will be in gray\r\n      >\r\n        <Stack spacing={1} alignItems=\"flex-end\" width=\"100%\">\r\n          {/* showing name of the confer */}\r\n          <ConferName confer={confer} />\r\n          {confer?.Count > 0 ? (\r\n            <ConferPrice confer={confer} context={context} /> //showing price of the confer if selected\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </Stack>\r\n        {/* showing increase or decrease quantity buttons */}\r\n        <ConferControls context={context} confer={confer} />\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Confer;\r\n","import React, { memo } from 'react';\r\nimport Confer from './Confer';\r\nimport {\r\n  Box,\r\n  CircularProgress,\r\n  Stack,\r\n} from '@mui/material';\r\nimport { themeColors } from 'Global/JsxThemeColor/JsxThemeColor';\r\nimport style from '../../../style/Confer.general.style.module.scss';\r\n\r\nconst ConferMap = ({ context }) => {\r\n  return (\r\n    <React.Fragment>\r\n      {context?.services && // if services fetched and optimized list is ready, show confers otherwise show loading circle\r\n      context?.optimized_services &&\r\n      context?.optimized_services?.length > 0 ? (\r\n        <React.Fragment>\r\n          <div\r\n            onWheel={context?.scroll_handlers[1]}\r\n            onTouchMove={context?.scroll_handlers[0]}\r\n            style={{ transition: 'all .3s ease' }} // div with scroll and touch event listener to show more or less items\r\n          >\r\n            <Box\r\n              sx={{ mt: '1em', transition: 'all .5s ease' }}\r\n              className={style.confersContainer}\r\n            >\r\n              {context?.optimized_services?.map(\r\n                (\r\n                  confer //mapped confers\r\n                ) => (\r\n                  <Confer\r\n                    confer={confer}\r\n                    key={confer.ID}\r\n                    context={context}\r\n                  />\r\n                )\r\n              )}\r\n            </Box>\r\n          </div>\r\n        </React.Fragment>\r\n      ) : (\r\n        // loading circle\r\n        <Stack\r\n          marginTop=\"1em\"\r\n          width=\"100%\"\r\n          alignItems=\"center\"\r\n        >\r\n          <CircularProgress\r\n            sx={{\r\n              color: `${themeColors.ColorPrimary} !important`,\r\n            }}\r\n          />\r\n        </Stack>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default memo(ConferMap);\r\n","import { Search } from \"@mui/icons-material\";\r\nimport EditablePersianSupportTextField from \"Global/Components/EditableComponents/EditablePersianSupportTextField\";\r\nimport PersianSupportTextField from \"Global/Components/UnEditableComponents/PersianSupportTextField/PersianSupportTextField\";\r\nimport { GlobalContext } from \"Global/Context/GlobalContextProvider\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\nimport i18next from \"i18next\";\r\nimport React from \"react\";\r\nimport { useContext } from \"react\";\r\n\r\nconst SearchBar = ({ context }) => {\r\n  const languageArray = useContext(GlobalContext)?.LanguageArray;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <EditablePersianSupportTextField\r\n        label={FindLangKey(\"general-public-search\", languageArray)}\r\n        isEnglish={i18next.language === \"en\"}\r\n        onChange={context?.set_search}\r\n        Initialvalue={context?.search}\r\n        customOnChange={(event) => {\r\n          if (event.target.value.length > 0) {\r\n            context?.setBringTop(false);\r\n          }\r\n        }}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React, { useRef } from 'react';\r\nimport { useContext } from 'react';\r\nimport { ConferContext } from '../../context/context';\r\nimport {\r\n  Stack,\r\n  Button,\r\n  LinearProgress,\r\n} from '@mui/material';\r\nimport ConferMap from './components/ConferMap';\r\nimport SearchBar from './components/SearchBar';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport { AddTask, List } from '@mui/icons-material';\r\nimport { themeColors } from 'Global/JsxThemeColor/JsxThemeColor';\r\nimport { AddConfer } from '../../Adapters/AddConfer';\r\nimport { GlobalContext } from 'Global/Context/GlobalContextProvider';\r\nimport AccessControl from 'Global/security/AccessControl';\r\nimport DesktopScrollUp from 'Routes/Protected/AddNewConfer/Components/DesktopScrollUp/DesktopScrollUp';\r\nimport useOberseveElement from 'Global/Hooks/useObserverElement/useOberseveElement';\r\n\r\nconst Confers = () => {\r\n  const context = useContext(ConferContext); // data that comes from context API\r\n  const GlobalConstants = useContext(GlobalContext);\r\n  const scrollTop_Ref = useRef(null);\r\n  const inView = useOberseveElement(scrollTop_Ref);\r\n\r\n  const showItemsBtn = FindLangKey(\r\n    'add-edit-confer-show-items'\r\n  );\r\n\r\n  const setBringTop = context?.setBringTop;\r\n\r\n  const selectItemsOnDetection_msg = FindLangKey(\r\n    'add-confer-btn-label-select-services-by-detection'\r\n  );\r\n\r\n  const bringTop = context?.bringTop;\r\n  const detectionBaseList =\r\n    context?.detectionBaseList?.enabled;\r\n\r\n  const AddConferPatient = AddConfer();\r\n  const EditSureMsg = FindLangKey(\r\n    'edit-confer-alert-sure-edit'\r\n  );\r\n  const nothingSelectedMsg = FindLangKey(\r\n    'add-new-alert-no-items-selected'\r\n  );\r\n\r\n  const Handle_Trigger_Submit = () => {\r\n    HandleSubmitForm(\r\n      context?.ApiReadyData,\r\n      context?.info,\r\n      GlobalConstants.navigate,\r\n      GlobalConstants,\r\n      AddConferPatient,\r\n      EditSureMsg,\r\n      nothingSelectedMsg\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Stack>\r\n        <Button\r\n          variant=\"outlined\"\r\n          fullWidth\r\n          sx={{\r\n            mb: '.5em',\r\n            minHeight: '40px',\r\n            color: detectionBaseList\r\n              ? `${themeColors.ColorSecondary} !important`\r\n              : `${themeColors.ColorPrimary} !important`,\r\n            backgroundColor: detectionBaseList\r\n              ? `${themeColors.ColorPrimary} !important`\r\n              : `${themeColors.ColorSecondary} !important`,\r\n          }}\r\n          color=\"colorPrimer\"\r\n          startIcon={<AddTask />}\r\n          onClick={() => {\r\n            context?.setDetectionBaseList((prev) => ({\r\n              ...prev,\r\n              enabled: !prev.enabled,\r\n            }));\r\n            setBringTop((prev) => !prev);\r\n          }}\r\n        >\r\n          {selectItemsOnDetection_msg}\r\n        </Button>\r\n        {/* show select items on top  */}\r\n        <Button\r\n          variant=\"outlined\"\r\n          fullWidth\r\n          sx={{\r\n            mb: '1em',\r\n            minHeight: '40px',\r\n            color: bringTop\r\n              ? `${themeColors.ColorSecondary} !important`\r\n              : `${themeColors.ColorPrimary} !important`,\r\n            backgroundColor: bringTop\r\n              ? `${themeColors.ColorPrimary} !important`\r\n              : `${themeColors.ColorSecondary} !important`,\r\n          }}\r\n          color=\"colorPrimer\"\r\n          startIcon={<List />}\r\n          onClick={() => {\r\n            setBringTop((prev) => !prev);\r\n            context?.set_search('');\r\n          }}\r\n        >\r\n          {showItemsBtn}\r\n        </Button>\r\n        {context?.detectionBaseList?.loading ? (\r\n          <LinearProgress sx={{ my: '.5em' }} />\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {/* searching for items in confers */}\r\n        <SearchBar context={context} />\r\n        <div style={{ marginTop: '.5em' }}>\r\n          <Button\r\n            disabled={AccessControl(\r\n              'edit-confer-opetation-edit-confer'\r\n            )}\r\n            variant=\"contained\"\r\n            fullWidth\r\n            sx={{\r\n              color: `${themeColors.ColorPrimary} !important`,\r\n            }}\r\n            onClick={Handle_Trigger_Submit}\r\n            ref={scrollTop_Ref}\r\n          >\r\n            {FindLangKey(\r\n              'edit-current-confer-submit-button'\r\n            )}\r\n          </Button>\r\n        </div>\r\n\r\n        <DesktopScrollUp\r\n          inView={inView}\r\n          scrollRef={scrollTop_Ref}\r\n        />\r\n\r\n        {/* parent component of mapped Confers */}\r\n        <ConferMap context={context} />\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Confers;\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\n\r\nimport { Post } from 'Xhr/Xhr';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport { env } from 'env';\r\n\r\nexport const AddConfer = () => {\r\n  const confirmationMsg = FindLangKey(\r\n    'add-new-alert-confirm-confer'\r\n  );\r\n  const patient = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  );\r\n  const conferData = JSON.parse(\r\n    sessionStorage.getItem('conferData')\r\n  );\r\n\r\n  const AddConferPatient = (\r\n    data,\r\n    navigate,\r\n    info,\r\n    GlobalConstants\r\n  ) => {\r\n    Post(\r\n      'POST',\r\n      `${process.env.REACT_APP_API_URL_API_ADD_EDIT_CONFER_PATIENT}`,\r\n      true,\r\n      {\r\n        ...data,\r\n        idPatient: patient?.IdPatient,\r\n        idAppWorkList: patient?.Id,\r\n        Idperson: patient?.IdPerson,\r\n        idConfer: conferData?.ID,\r\n        timeHozoor: TimeToMinutes(patient?.TimeHozoor),\r\n        dateHozoor: patient?.DateHozoor,\r\n      }\r\n    ).then((response) => {\r\n      if (response.data.resCode === 1) {\r\n        SwalAlert(\r\n          'success',\r\n          response.data.resMessage,\r\n          false\r\n        );\r\n      } else\r\n        SwalAlert('error', response.data.resMessage, false);\r\n      GlobalConstants.setChangeRender((prev) => !prev);\r\n      setTimeout(() => {\r\n        navigate(-1);\r\n      }, 600);\r\n    });\r\n  };\r\n  return AddConferPatient;\r\n};\r\n","import React from \"react\";\r\nimport { Container, Stack } from \"@mui/material\";\r\nimport { context as ContextProvider } from \"./context/context\";\r\nimport Form from \"./Components/Form/Form\";\r\nimport Confers from \"./Components/Confers/Confers\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst EditConfer = () => {\r\n  // entry point. context provider, form and confers\r\n  useEffect(() => {\r\n    return () => {\r\n      sessionStorage.removeItem(\"saved_confers\");\r\n      sessionStorage.removeItem(\"saved_insurance\");\r\n    };\r\n  }, []);\r\n  return (\r\n    <React.Fragment>\r\n      <ContextProvider>\r\n        <Container sx={{ mt: \"1em\" }}>\r\n          <Stack spacing={1}>\r\n            <Form />\r\n            <Confers />\r\n          </Stack>\r\n        </Container>\r\n      </ContextProvider>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default EditConfer;\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { ArabicToPersian } from 'utils/ConvertToPersianTextFromArabic';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const GetDetectionList = async (\r\n  setDetectionList,\r\n  objName\r\n) => {\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_GET_TASHKHIS_LIST}`,\r\n    true,\r\n    {\r\n      idSystem: 900,\r\n      clause: '',\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1)\r\n      setDetectionList({\r\n        [objName]: response.data.Data.list.map((elemet) => {\r\n          return {\r\n            ItemValue: elemet.Id,\r\n            ItemContent: ArabicToPersian(elemet.Name),\r\n          };\r\n        }),\r\n      });\r\n    else\r\n      SwalAlert('error', response.data.resMessage, false);\r\n  });\r\n};\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M22 5.18 10.59 16.6l-4.24-4.24 1.41-1.41 2.83 2.83 10-10L22 5.18zM12 20c-4.41 0-8-3.59-8-8s3.59-8 8-8c1.57 0 3.04.46 4.28 1.25l1.45-1.45C16.1 2.67 14.13 2 12 2 6.48 2 2 6.48 2 12s4.48 10 10 10c1.73 0 3.36-.44 4.78-1.22l-1.5-1.5c-1 .46-2.11.72-3.28.72zm7-5h-3v2h3v3h2v-3h3v-2h-3v-3h-2v3z\"\n}), 'AddTask');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon([/*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 17.59 7.41 19 12 14.42 16.59 19 18 17.59l-6-6z\"\n}, \"0\"), /*#__PURE__*/_jsx(\"path\", {\n  d: \"m6 11 1.41 1.41L12 7.83l4.59 4.58L18 11l-6-6z\"\n}, \"1\")], 'KeyboardDoubleArrowUp');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 13h2v-2H3v2zm0 4h2v-2H3v2zm0-8h2V7H3v2zm4 4h14v-2H7v2zm0 4h14v-2H7v2zM7 7v2h14V7H7z\"\n}), 'List');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 13H5v-2h14v2z\"\n}), 'Remove');"],"names":["GetInsuranceListPublic","async","setGatheredData","isObjectFormNeeded","Post","concat","process","clause","then","response","data","resCode","prev","Data","list","map","elemet","ItemValue","ID","ItemContent","ArabicToPersian","Name","SwalAlert","resMessage","_ref","label","value","onChange","isEnglish","React","_jsx","children","_jsxs","Stack","alignItems","width","style","textAlign","dir","TextField","fullWidth","color","disabled","size","ref","inView","setInView","useState","useEffect","observer","IntersectionObserver","entry","isIntersecting","observe","current","disconnect","scrollRef","screenWidth","useCheckScreenWidth","IconButton","sx","alignSelf","position","backgroundColor","themeColors","onClick","scrollIntoView","behavior","KeyboardDoubleArrowUp","fontSize","_Fragment","useHandleConferPrice","confer","context","Count","idInsurance","serviceID","count","SetPriceTag","patient","JSON","parse","sessionStorage","getItem","dateeHozoor","DateHozoor","idPerson","IdPerson","timeHozoor","TimeToMinutes","TimeHozoor","price","element","InsurancePart","PatientPart","TotalPrice","ConferPriceCalculator","id_insurance","set_largelist","useHandleSessionStoreConfer","_context$selected","_context$selected2","selected","findIndex","obj","set_select","select","filter","fl","HandleDecreaseCount","setDebounce","setTimeout","HandleIncreaseCount","useCustomizedListRenderer","largeListArray","additionalFn","FnParams","ApplyFilter","resetTrigger","highestIndex","setHighestIndex","itemsToShow","setItemsToShow","setList","startY","setStartY","activated","setActivated","firstCall","setFirstCall","newHighestIndex","forEach","item","index","largeListItem","updatedList","slice","handleTouchMove","e","currentY","touches","clientY","handleScroll","deltaY","handleTouchStart","useTopSelectedObject","largeList","setResetTrigger","sortedList","setSortedList","stack","setStack","newStack","includes","push","splice","indexOf","length","newSortedList","id","itemIndex","HandleSearchItem","arr","search","result","searchIsNumber","isNaN","getScore","score","Number","Code","sort","a","b","arguments","undefined","seacrh","bringTop","debouncedData","useDebounce","items","memoItems","useMemo","stringify","sortedWordList","GetConferServices","parameters","dateHozoor","Idperson","searchfield","_response$data","_response$data$Data","ObjName","InsuranceServiceList","el","GetConferInfo","conferData","idAppWorkList","Id","idConfer","idPatient","IdPatient","ConferContext","createContext","_gatheredData$Info2","setBringTop","savedInsurance","savedInsuranceRef","useRef","saved_confers","saveItemsRef","dataString","setDataString","Insurance","setInsurance","IdInsurance","InsuranceOff","setInsuranceOff","setSearch","gatheredData","useGatherDataFromApi","selectedInsurance","functions","setLargeList","Confer","setSelected","detection","setDetection","detectionBaseList","setDetectionBaseList","enabled","_gatheredData$Confer","_gatheredData$Info","ReplaceMatchingObjs","arr1","arr2","obj2","obj1","Info","SavedServiceList","topSortedList","useSortListByConditions","setItem","removeItem","HandleReplaceStoredItems","structuredData","join","_gatheredData$Confer2","_gatheredData$Insuran","InsuranceList","unique","hasDuplicates","i","Object","keys","k","find","removeDuplicates","_gatheredData$Insuran2","InsuranceName","idDetection","loading","idTashkhis","_response$data$Data$l","large_list_el","_response$data2","_response$data2$Data","_response$data2$Data$","_response$data3","_response$data3$Data","_response$data4","_response$data4$Data","_response$data4$Data$","CalcByDetection","contextObj","defaultinsurance","insurance","info","services","set_insurance","set_doctor_off","doctor_off","set_search","optimized_services","scroll_handlers","ApiReadyData","dateCreditNoteBook","GetCurrentDateInJalai","discountDoctor","discountMarkaz","DiscountMarkaz","erjaId","insuranceNumber","noPageNoteBook","serviceListData","idDiagnosis","set_reset","reset","Provider","GlobalConstants","insuranceValue","setInsuranceValue","EditableCustomizableSelect","isSingle","i18next","initialData","SelectableDataArray","FindLangKey","LanguageArray","GetSelectedValue","_context$info","EditablePersianSupportTextField","Initialvalue","EditablePersianSupportNumericTextField","DiscountDoctor","DetectionList","useContext","setData","detections_msg","detectionList","setDetectionList","useLayoutEffect","GetDetectionList","_detectionList$detect","NameDiagnosis","enableInitialOnchange","Form","_useContext","GlobalContext","onSubmit","event","preventDefault","spacing","direction","gap","CenterOff","DoctorOff","className","debounce","Add","fill","Remove","languageArray","justifyContent","Price3DigitSplitter","borderColor","ConferName","ConferPrice","ConferControls","ConferMap","_context$optimized_se","_context$optimized_se2","onWheel","onTouchMove","transition","Box","mt","marginTop","CircularProgress","memo","customOnChange","target","Confers","_context$detectionBas","_context$detectionBas2","scrollTop_Ref","useOberseveElement","showItemsBtn","selectItemsOnDetection_msg","AddConferPatient","AddConfer","navigate","setChangeRender","EditSureMsg","nothingSelectedMsg","Button","variant","mb","minHeight","startIcon","AddTask","List","LinearProgress","my","SearchBar","AccessControl","Handle_Trigger_Submit","HandleSubmitForm","DesktopScrollUp","EditConfer","ContextProvider","Container","objName","idSystem","createSvgIcon","d"],"sourceRoot":""}