{"version":3,"file":"static/js/889.a189e708.chunk.js","mappings":"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","sources":["webpack://new-ui/./src/Routes/Protected/EditMedicalForm/Styles/Form.Info.module.scss?b87c","Routes/Protected/EditMedicalForm/Components/FormInfoCard/components/EditInformation.js","Routes/Protected/EditMedicalForm/Components/FormInfoCard/FormInfoCard.js","Routes/Protected/EditMedicalForm/Adapters/GetFormData.js","Routes/Protected/EditMedicalForm/Hooks/useSetTitle.js","Routes/Protected/EditMedicalForm/Hooks/useRecoilAllEditState.js","Routes/Protected/EditMedicalForm/StateBank/useStateBank.js","Routes/Protected/EditMedicalForm/Variables/EditMedicalFormDefaultValues.js","Global/Components/Generators/FormElementCreatorByType/Functions/EditFormValueNormlizer.js","Global/Components/EditableComponents/EditableGroupedView/context/EditGroupViewContextProvider.js","Global/Components/EditableComponents/EditableGroupedView/EditAddOrCancelForm.js","Global/Components/EditableComponents/EditableGroupedView/EditInnerContenetAccordionContent.js","webpack://new-ui/./src/Global/Components/EditableComponents/EditableAccordionContents/Accodion.module.scss?9456","Global/Components/EditableComponents/EditableAccordionContents/Hooks/useMarkEditedLogicAccordion.js","Global/Components/EditableComponents/EditableAccordionContents/Components/MarkEditOrFilled.js","Global/Components/EditableComponents/EditableAccordionContents/EditableAccordionContents.js","Global/Components/EditableComponents/EditableGroupedView/EditGroupViewInnerContent.js","Global/Components/EditableComponents/EditableGroupedView/EditGroupedView.js","Routes/Protected/EditMedicalForm/Components/EditFormContent/EditFormContent.js","Routes/Protected/EditMedicalForm/EditMedicalForm.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"frameGradient\":\"Form_Info_frameGradient__NX7jp\",\"Card\":\"Form_Info_Card__TYvKz\"};","import { Edit } from \"@mui/icons-material\";\r\nimport { Stack } from \"@mui/material\";\r\nimport React from \"react\";\r\n\r\nconst EditInformation = ({ fetchedFrom }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <Stack\r\n        direction=\"row\"\r\n        justifyContent=\"space-between\"\r\n        sx={{ paddingX: \"1em\" }}\r\n      >\r\n        <p>{fetchedFrom?.EditDate}</p>\r\n        <span style={{ textAlign: \"center\" }}>\r\n          <Edit />\r\n        </span>\r\n        <p style={{ marginRight: \"2.5em\" }}>{fetchedFrom?.EditTime}</p>\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default EditInformation;\r\n","import { Card, Stack } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport styles from \"../../Styles/Form.Info.module.scss\";\r\nimport EditInformation from \"./components/EditInformation\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\nimport { themeColors } from \"Global/JsxThemeColor/JsxThemeColor\";\r\nconst FormInfoCard = ({ fetchedFrom }) => {\r\n  const confirmedMsg = FindLangKey(\"general-public-label-confirmed\");\r\n  const unconfirmedMsg = FindLangKey(\"general-public-label-un-confirmed\");\r\n  return (\r\n    <React.Fragment>\r\n      <Card\r\n        sx={{ p: \".3em\", border: `1px solid ${themeColors.ColorPrimary}` }}\r\n        className={styles.Card}\r\n      >\r\n        <Stack bgcolor=\"white\">\r\n          <Stack\r\n            direction=\"row\"\r\n            justifyContent=\"space-between\"\r\n            sx={{ p: \"1em\" }}\r\n          >\r\n            <Stack spacing={0.5}>\r\n              <p>{fetchedFrom?.Name}</p>\r\n              <p>{fetchedFrom?.Date}</p>\r\n            </Stack>\r\n            <Stack spacing={0.5}>\r\n              <p style={{ color: fetchedFrom?.Conferm ? \"green\" : \"red\" }}>\r\n                {fetchedFrom?.Conferm ? confirmedMsg : unconfirmedMsg}\r\n              </p>\r\n              <p>{fetchedFrom?.Time}</p>\r\n            </Stack>\r\n          </Stack>\r\n          {fetchedFrom?.EditTime.length > 0 &&\r\n          fetchedFrom?.EditDate.length > 0 ? (\r\n            <EditInformation fetchedFrom={fetchedFrom} />\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </Stack>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default FormInfoCard;\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport Cookies from 'js-cookie';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const GetFormData = async (\r\n  setGatheredData,\r\n  parameters\r\n) => {\r\n  const user = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  );\r\n  return Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_ELS_FORM_ADD_EDIT}`,\r\n    true,\r\n    {\r\n      idElsFormPatient: parameters?.idElsFormPatient,\r\n      formID: parameters?.formId,\r\n      patientFormID: 1,\r\n      idPatient: user.IdPatient,\r\n      idType: 27,\r\n      idConfer: user.Id,\r\n      AlloEdit: true,\r\n      idCartablPatient: 0,\r\n      idPerson: user.IdPerson,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      setGatheredData((prev) => ({\r\n        ...prev,\r\n        [parameters?.ObjName1]:\r\n          response?.data?.Data?.Form?.GroupList,\r\n        [parameters?.ObjName2]:\r\n          response?.data?.Data?.ListDetail,\r\n        [parameters?.ObjName3]:\r\n          response?.data?.Data?.IdForm,\r\n        [parameters?.ObjName4]:\r\n          response?.data?.Data?.IdCartbalePatient,\r\n        [parameters?.ObjName5]:\r\n          response?.data?.Data?.Form.Id,\r\n      }));\r\n      parameters.setTitle(response?.data?.Data?.Form?.Name);\r\n    } else {\r\n      SwalAlert('error', response.data.resMessage, false);\r\n    }\r\n  });\r\n};\r\n","import React from \"react\";\r\n\r\nconst useSetTitle = (title, gatheredData, setTitle, setStateBank) => {\r\n  React.useEffect(() => {\r\n    if (title.length === 0) {\r\n      setStateBank((prev) => ({\r\n        ...prev,\r\n        ...gatheredData,\r\n        title,\r\n        setTitle,\r\n        setStateBank,\r\n      }));\r\n    }\r\n  }, [title]);\r\n};\r\n\r\nexport default useSetTitle;\r\n","import React from \"react\";\r\nimport { GetFormData } from \"../Adapters/GetFormData\";\r\n\r\nconst useRecoilAllEditState = (setFunctionArray, StateRecoil) => {\r\n  const initialRender = React.useRef(true);\r\n  React.useMemo(() => {\r\n    if (!initialRender.current) {\r\n      setFunctionArray([\r\n        {\r\n          functions: GetFormData,\r\n          parameters: {\r\n            idElsFormPatient: fetchedFrom?.IdReport,\r\n            formId: fetchedFrom?.IdElsForms,\r\n            ObjName1: \"FormView\",\r\n            ObjName2: \"GroupElements\",\r\n            ObjName3: \"formId\",\r\n            ObjName4: \"IdCartablePatient\",\r\n            ObjName5: \"GroupFormId\",\r\n            setTitle,\r\n          },\r\n        },\r\n      ]);\r\n    }\r\n    initialRender.current = false;\r\n  }, [StateRecoil]);\r\n};\r\n\r\nexport default useRecoilAllEditState;\r\n","import React from \"react\";\r\nimport { GetFormData } from \"../Adapters/GetFormData\";\r\nimport useGatherDataFromApi from \"Global/Hooks/useGatherDataFromApi\";\r\nimport useSetTitle from \"../Hooks/useSetTitle\";\r\nimport useRecoilAllEditState from \"../Hooks/useRecoilAllEditState\";\r\n\r\nconst useStateBank = (fetchedFrom) => {\r\n  const [StateBank, setStateBank] = React.useState([]);\r\n  const [StateRecoil, setStateRecoil] = React.useState(false);\r\n  const [forceRender, setForceRender] = React.useState(false);\r\n  const [title, setTitle] = React.useState(\"\");\r\n  const [FunctionArray, setFunctionArray] = React.useState([\r\n    {\r\n      functions: GetFormData,\r\n      parameters: {\r\n        idElsFormPatient: fetchedFrom?.IdReport,\r\n        formId: fetchedFrom?.IdElsForms,\r\n        ObjName1: \"FormView\",\r\n        ObjName2: \"GroupElements\",\r\n        ObjName3: \"formId\",\r\n        ObjName4: \"IdCartablePatient\",\r\n        ObjName5: \"GroupFormId\",\r\n        setTitle,\r\n      },\r\n    },\r\n  ]);\r\n  useRecoilAllEditState(setFunctionArray, StateRecoil);\r\n  const { gatheredData } = useGatherDataFromApi(FunctionArray);\r\n\r\n  React.useMemo(() => {\r\n    setStateBank((prev) => ({\r\n      ...prev,\r\n      ...gatheredData,\r\n      setStateRecoil,\r\n      title,\r\n    }));\r\n  }, [JSON.stringify(gatheredData)]);\r\n  return StateBank;\r\n};\r\n\r\nexport default useStateBank;\r\n","import { EditFormValueNormlizer } from \"Global/Components/Generators/FormElementCreatorByType/Functions/EditFormValueNormlizer\";\r\nimport React from \"react\";\r\n\r\nconst EditMedicalFormDefaultValues = (StateBank) => {\r\n  const MedicalFormattedValues = EditFormValueNormlizer(StateBank);\r\n  const [MedicalFormDefaultValues, setMedicalFormDefaultValues] =\r\n    React.useState([]);\r\n  React.useEffect(() => {\r\n    if (StateBank) {\r\n      setMedicalFormDefaultValues(MedicalFormattedValues);\r\n    }\r\n  }, [StateBank]);\r\n  return MedicalFormDefaultValues;\r\n};\r\n\r\nexport default EditMedicalFormDefaultValues;\r\n","export const EditFormValueNormlizer = (StateBank) => {\r\n  const MedicalFormattedValues = StateBank?.GroupElements?.map(\r\n    (GroupElement) => {\r\n      if (\r\n        GroupElement?.ElsFormDetail?.ElsRecord?.Type === \"ComboBox\" ||\r\n        GroupElement?.ElsFormDetail?.ElsRecord?.Type ===\r\n          \"RadCheckedDropDownList\"\r\n      ) {\r\n        return {\r\n          base64: \"\",\r\n          idcommand: GroupElement?.IdCommand,\r\n          iddetail: GroupElement?.ElsFormDetail?.Id,\r\n          element: GroupElement?.ElsFormDetail,\r\n          UiValue: GroupElement,\r\n          value: GroupElement?.Value,\r\n          name: GroupElement?.ElsFormDetail?.ElsRecord.Name,\r\n          isEdit: GroupElement.Value.length > 0,\r\n        };\r\n      } else {\r\n        return {\r\n          base64: GroupElement?.ImageBase64 ?? \"\",\r\n          iddetail: GroupElement?.ElsFormDetail?.Id,\r\n          element: GroupElement?.ElsFormDetail,\r\n          UiValue: GroupElement,\r\n          value: GroupElement?.Value,\r\n          name: GroupElement?.ElsFormDetail?.ElsRecord.Name,\r\n          isEdit:\r\n            Number(GroupElement?.Value) !== 0\r\n              ? GroupElement.Value.toString().length > 0\r\n              : false,\r\n\r\n          ...(GroupElement?.ElsFormDetail?.ElsRecord?.Type ===\r\n            \"RadioButton\" && {\r\n            PannelNo: GroupElement.ElsFormDetail.RadionPanelNo,\r\n          }),\r\n        };\r\n      }\r\n    }\r\n  );\r\n  return (\r\n    MedicalFormattedValues?.sort((a, b) => {\r\n      return a.iddetail - b.iddetail;\r\n    }) ?? []\r\n  );\r\n};\r\n","import React, { createContext } from \"react\";\r\n\r\nexport const EditGroupViewContext = createContext();\r\n\r\nexport const EditGroupViewContextProvider = ({ children, watch }) => {\r\n  const GroupViewContextConstants = watch();\r\n  return (\r\n    <EditGroupViewContext.Provider value={GroupViewContextConstants}>\r\n      {children}\r\n    </EditGroupViewContext.Provider>\r\n  );\r\n};\r\n","import { Button, Stack } from '@mui/material';\r\nimport React from 'react';\r\nimport { HandleSubmitGroupView } from '../../CommonComponents/GroupedView/Functions/HandleSubmitGroupView';\r\nimport { SaveElectronicForm } from 'Routes/Protected/AddNewMedicalForm/Adapters/SaveElectronicForm';\r\nimport SwalAlert from '../../CommonComponents/SwalAlert/SwalAlert';\r\nimport { useContext } from 'react';\r\nimport { GlobalContext } from 'Global/Context/GlobalContextProvider';\r\nimport i18next from 'i18next';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport AccessControl from 'Global/security/AccessControl';\r\nimport { themeColors } from 'Global/JsxThemeColor/JsxThemeColor';\r\n\r\nconst EditAddOrCancelForm = ({\r\n  StateBank,\r\n  getValues,\r\n  reset,\r\n  fieldArrayName,\r\n  fetchedFrom,\r\n}) => {\r\n  const GlobalConstants = useContext(GlobalContext);\r\n  const editMsg = FindLangKey(\r\n    'edit-medical-font-alert-save-sure'\r\n  );\r\n  return (\r\n    <React.Fragment>\r\n      <Stack direction=\"row-reverse\" spacing={1}>\r\n        <Button\r\n          sx={{\r\n            color: `${themeColors.ColorPrimary} !important`,\r\n          }}\r\n          disabled={AccessControl(\r\n            'edit-medical-form-action-edit-form'\r\n          )}\r\n          color=\"colorPrimer\"\r\n          variant=\"contained\"\r\n          fullWidth\r\n          onClick={() => {\r\n            const values = getValues();\r\n\r\n            SwalAlert('warning', editMsg, true, () => {\r\n              SaveElectronicForm(\r\n                HandleSubmitGroupView(\r\n                  values?.MedicalDefaultValues\r\n                ),\r\n                {\r\n                  idElsFormPatient: fetchedFrom?.IdReport,\r\n                  formID: StateBank.formId,\r\n                  idCartablPatient:\r\n                    StateBank.IdCartablePatient,\r\n                  navigate: GlobalConstants.navigate,\r\n                },\r\n                reset,\r\n                fieldArrayName,\r\n                StateBank\r\n              );\r\n            });\r\n          }}\r\n        >\r\n          {FindLangKey('genral-public-edit-medical-form')}\r\n        </Button>\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default EditAddOrCancelForm;\r\n","import { Stack } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport EditElementTypeMatcher from \"./EditElementTypeMatcher\";\r\nimport useGlobalMatchingField from \"Global/Components/CommonComponents/GroupedView/Hooks/useGlobalMatchingField\";\r\nimport useFindDependedItems from \"Global/Hooks/useFindDependedItems/useFindDependedItems\";\r\nimport { GroupByRadioType } from \"Global/Components/CommonComponents/GroupedView/Functions/GroupByRadioType\";\r\nimport ComponentMemoizer from \"Global/Components/ComponentMemoizer/ComponentMemoizer\";\r\nconst EditInnerContenetAccordionContent = ({\r\n  GroupId,\r\n  fields,\r\n  control,\r\n  errors,\r\n  setValue,\r\n}) => {\r\n  const MatchingFields = fields?.filter(\r\n    (element) => element?.element?.IdGroupDetail === GroupId\r\n  );\r\n  useGlobalMatchingField(fields);\r\n  const [filteredRootNodes] = useFindDependedItems(MatchingFields);\r\n  const groupedData = GroupByRadioType(filteredRootNodes);\r\n  return (\r\n    <React.Fragment>\r\n      <Stack spacing={1}>\r\n        <ComponentMemoizer\r\n          element={groupedData?.map((data, index) =>\r\n            groupedData?.length > 0 ? (\r\n              <EditElementTypeMatcher\r\n                element={data}\r\n                field={data}\r\n                control={control}\r\n                errors={errors}\r\n                key={index}\r\n                setValue={setValue}\r\n              />\r\n            ) : (\r\n              <></>\r\n            )\r\n          )}\r\n          dependecies={[JSON.stringify(groupedData)]}\r\n        />\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default EditInnerContenetAccordionContent;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"rootAccordion\":\"Accodion_rootAccordion__qAq9X\"};","import React, { useContext } from 'react';\r\nimport { EditGroupViewContext } from '../../EditableGroupedView/context/EditGroupViewContextProvider';\r\n\r\nconst useMarkEditedLogicAccordion = (titleId) => {\r\n  const GroupViewContextConstants = useContext(\r\n    EditGroupViewContext\r\n  );\r\n\r\n  const ZeroFilteredEditGroupViewConstants =\r\n    GroupViewContextConstants?.MedicalDefaultValues?.map(\r\n      (element) => ({\r\n        ...element,\r\n        value:\r\n          Number(element.value) === 0 ? '' : element.value,\r\n      })\r\n    );\r\n\r\n  const matchForms =\r\n    ZeroFilteredEditGroupViewConstants?.filter(\r\n      (element) =>\r\n        element?.value?.toString()?.length > 0 &&\r\n        element?.element?.IdGroupDetail === titleId\r\n    );\r\n  const isFormEdited = matchForms?.map((frm) => {\r\n    if (\r\n      frm?.UiValue?.Value?.toString() !==\r\n      frm?.value?.toString()\r\n    ) {\r\n      return {\r\n        ...frm,\r\n        isEdit: false,\r\n      };\r\n    } else {\r\n      return {\r\n        ...frm,\r\n      };\r\n    }\r\n  });\r\n  return isFormEdited;\r\n};\r\n\r\nexport default useMarkEditedLogicAccordion;\r\n","import { Check, Edit } from \"@mui/icons-material\";\r\nimport React from \"react\";\r\nimport useMarkEditedLogicAccordion from \"../Hooks/useMarkEditedLogicAccordion\";\r\n\r\nconst MarkEditOrFilled = ({ titleId }) => {\r\n  const isFormEdited = useMarkEditedLogicAccordion(titleId);\r\n\r\n  return isFormEdited?.length > 0 && isFormEdited[0].isEdit ? (\r\n    <span\r\n      style={{\r\n        color: \"#2196f3\",\r\n        marginLeft: \"1em\",\r\n      }}\r\n    >\r\n      <Edit />\r\n    </span>\r\n  ) : isFormEdited?.length > 0 && !isFormEdited[0].isEdit ? (\r\n    <span\r\n      style={{\r\n        color: \"#2196f3\",\r\n        marginLeft: \"1em\",\r\n      }}\r\n    >\r\n      <Check />\r\n    </span>\r\n  ) : (\r\n    <></>\r\n  );\r\n};\r\n\r\nexport default MarkEditOrFilled;\r\n","import React from \"react\";\r\nimport { ExpandMore } from \"@mui/icons-material\";\r\nimport {\r\n  Accordion,\r\n  AccordionDetails,\r\n  AccordionSummary,\r\n  Stack,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport styles from \"./Accodion.module.scss\";\r\nimport MarkEditOrFilled from \"./Components/MarkEditOrFilled\";\r\nconst EditableAccordionContents = ({ FormElement, title, titleId }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <Accordion classes={{ root: styles.rootAccordion }} square={true}>\r\n        <AccordionSummary\r\n          expandIcon={<ExpandMore />}\r\n          aria-controls=\"panel1a-content\"\r\n          id=\"panel1a-header\"\r\n        >\r\n          <Stack alignItems=\"center\" direction=\"row\" spacing={1}>\r\n            <MarkEditOrFilled titleId={titleId} />\r\n            <Typography>{title.replace(/ي/g, \"ی\")}</Typography>\r\n          </Stack>\r\n        </AccordionSummary>\r\n        <AccordionDetails className={styles.accordionDetails}>\r\n          {FormElement}\r\n        </AccordionDetails>\r\n      </Accordion>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default EditableAccordionContents;\r\n","import React from \"react\";\r\nimport ComponentMemoizer from \"Global/Components/ComponentMemoizer/ComponentMemoizer\";\r\nimport { Alert, LinearProgress, Stack } from \"@mui/material\";\r\nimport { ArabicToPersian } from \"utils/ConvertToPersianTextFromArabic\";\r\nimport { GlobalContext } from \"Global/Context/GlobalContextProvider\";\r\nimport { useContext } from \"react\";\r\nimport EditAddOrCancelForm from \"./EditAddOrCancelForm\";\r\nimport EditInnerContenetAccordionContent from \"./EditInnerContenetAccordionContent\";\r\nimport EditableAccordionContents from \"../EditableAccordionContents/EditableAccordionContents\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\n\r\nconst EditGroupViewInnerContent = ({\r\n  StateBank,\r\n  control,\r\n  errors,\r\n  fields,\r\n  getValues,\r\n  reset,\r\n  fieldArrayName,\r\n  fetchedFrom,\r\n  setValue,\r\n}) => {\r\n  const GlobalConstants = useContext(GlobalContext);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ComponentMemoizer\r\n        element={\r\n          StateBank?.formId === StateBank?.GroupFormId ? (\r\n            StateBank?.title?.length > 0 ? (\r\n              <Stack spacing={\".5em\"} width=\"100%\">\r\n                {StateBank?.FormView?.length === 0 ? (\r\n                  <Alert dir=\"rtl\" severity=\"warning\">\r\n                    {FindLangKey(\"general-public-warning-please-wait\")}\r\n                  </Alert>\r\n                ) : (\r\n                  StateBank?.FormView?.map((element) => (\r\n                    <EditableAccordionContents\r\n                      key={GlobalConstants.uuidV4()}\r\n                      titleId={element.Id}\r\n                      FormElement={\r\n                        <EditInnerContenetAccordionContent\r\n                          GroupId={element.Id}\r\n                          fields={fields}\r\n                          control={control}\r\n                          errors={errors}\r\n                          reset={reset}\r\n                          fieldArrayName={fieldArrayName}\r\n                          setValue={setValue}\r\n                        />\r\n                      }\r\n                      title={ArabicToPersian(element?.NameGroup)}\r\n                    />\r\n                  ))\r\n                )}\r\n                <EditAddOrCancelForm\r\n                  StateBank={StateBank}\r\n                  getValues={getValues}\r\n                  reset={reset}\r\n                  fieldArrayName={fieldArrayName}\r\n                  fetchedFrom={fetchedFrom}\r\n                />\r\n              </Stack>\r\n            ) : (\r\n              <></>\r\n            )\r\n          ) : (\r\n            <LinearProgress />\r\n          )\r\n        }\r\n        dependecies={[JSON.stringify(StateBank), JSON.stringify(fields)]}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default EditGroupViewInnerContent;\r\n","import React from \"react\";\r\nimport useCreateComplexField from \"Global/Hooks/useCreateComplexField\";\r\nimport { LinearProgress } from \"@mui/material\";\r\nimport { EditGroupViewContextProvider } from \"./context/EditGroupViewContextProvider\";\r\nimport EditGroupViewInnerContent from \"./EditGroupViewInnerContent\";\r\n\r\nconst EditGroupedView = ({\r\n  StateBank,\r\n  fieldArrayName,\r\n  DefaultValues,\r\n  fetchedFrom,\r\n}) => {\r\n  const { fields, control, formState, getValues, reset, watch, setValue } =\r\n    useCreateComplexField(`${fieldArrayName}`, DefaultValues);\r\n  // const [, setEditFormValue] = useAtom(EditWatchAtom);\r\n  // React.useEffect(() => {\r\n  //   const subscription = watch(() => setEditFormValue(watch()));\r\n  //   return () => subscription.unsubscribe();\r\n  // }, [watch]);\r\n\r\n  return (\r\n    <EditGroupViewContextProvider watch={watch}>\r\n      <React.Fragment>\r\n        {StateBank?.title?.length > 0 ? (\r\n          <EditGroupViewInnerContent\r\n            StateBank={StateBank}\r\n            control={control}\r\n            errors={formState?.errors}\r\n            fields={fields}\r\n            getValues={getValues}\r\n            reset={reset}\r\n            fieldArrayName={fieldArrayName}\r\n            fetchedFrom={fetchedFrom}\r\n            setValue={setValue}\r\n          />\r\n        ) : (\r\n          <LinearProgress />\r\n        )}\r\n      </React.Fragment>\r\n    </EditGroupViewContextProvider>\r\n  );\r\n};\r\n\r\nexport default EditGroupedView;\r\n","import React from \"react\";\r\nimport EditMedicalFormDefaultValues from \"../../Variables/EditMedicalFormDefaultValues\";\r\nimport EditGroupedView from \"Global/Components/EditableComponents/EditableGroupedView/EditGroupedView\";\r\n\r\nconst EditFormContent = ({ StateBank, fetchedFrom }) => {\r\n  const MedicalDefaultValues = EditMedicalFormDefaultValues(StateBank);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <EditGroupedView\r\n        StateBank={StateBank}\r\n        fieldArrayName={\"MedicalDefaultValues\"}\r\n        DefaultValues={MedicalDefaultValues}\r\n        isEdit={true}\r\n        fetchedFrom={fetchedFrom}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default EditFormContent;\r\n","import { Container, Stack } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport FormInfoCard from \"./Components/FormInfoCard/FormInfoCard\";\r\nimport useStateBank from \"./StateBank/useStateBank\";\r\nimport EditFormContent from \"./Components/EditFormContent/EditFormContent\";\r\nconst EditMedicalForm = () => {\r\n  const fetchedFrom = JSON.parse(window.sessionStorage.getItem(\"EditableForm\"));\r\n  const StateBank = useStateBank(fetchedFrom);\r\n  return (\r\n    <React.Fragment>\r\n      <Container>\r\n        <Stack sx={{ mt: \"1em\" }} spacing={1}>\r\n          <FormInfoCard fetchedFrom={fetchedFrom} />\r\n          <EditFormContent StateBank={StateBank} fetchedFrom={fetchedFrom} />\r\n        </Stack>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default EditMedicalForm;\r\n//\r\n"],"names":["_ref","fetchedFrom","_jsx","React","children","_jsxs","Stack","direction","justifyContent","sx","paddingX","EditDate","style","textAlign","Edit","marginRight","EditTime","confirmedMsg","FindLangKey","unconfirmedMsg","Card","p","border","concat","themeColors","className","styles","bgcolor","spacing","Name","Date","color","Conferm","Time","length","EditInformation","_Fragment","GetFormData","async","setGatheredData","parameters","user","JSON","parse","sessionStorage","getItem","Post","process","idElsFormPatient","formID","formId","patientFormID","idPatient","IdPatient","idType","idConfer","Id","AlloEdit","idCartablPatient","idPerson","IdPerson","then","response","_response$data6","_response$data6$Data","_response$data6$Data$","data","resCode","prev","_response$data","_response$data$Data","_response$data$Data$F","_response$data2","_response$data2$Data","_response$data3","_response$data3$Data","_response$data4","_response$data4$Data","_response$data5","_response$data5$Data","ObjName1","Data","Form","GroupList","ObjName2","ListDetail","ObjName3","IdForm","ObjName4","IdCartbalePatient","ObjName5","setTitle","SwalAlert","resMessage","useRecoilAllEditState","setFunctionArray","StateRecoil","initialRender","_fetchedFrom","_fetchedFrom2","current","functions","IdReport","IdElsForms","StateBank","setStateBank","setStateRecoil","forceRender","setForceRender","title","FunctionArray","gatheredData","useGatherDataFromApi","stringify","MedicalFormattedValues","_StateBank$GroupEleme","_MedicalFormattedValu","GroupElements","map","GroupElement","_GroupElement$ElsForm","_GroupElement$ElsForm2","_GroupElement$ElsForm3","_GroupElement$ElsForm4","_GroupElement$ElsForm5","_GroupElement$ElsForm6","_GroupElement$ImageBa","_GroupElement$ElsForm7","_GroupElement$ElsForm8","_GroupElement$ElsForm9","_GroupElement$ElsForm10","ElsFormDetail","ElsRecord","Type","base64","idcommand","IdCommand","iddetail","element","UiValue","value","Value","name","isEdit","ImageBase64","Number","toString","PannelNo","RadionPanelNo","sort","a","b","EditFormValueNormlizer","MedicalFormDefaultValues","setMedicalFormDefaultValues","EditGroupViewContext","createContext","EditGroupViewContextProvider","watch","GroupViewContextConstants","Provider","getValues","reset","fieldArrayName","GlobalConstants","useContext","GlobalContext","editMsg","Button","disabled","AccessControl","variant","fullWidth","onClick","values","SaveElectronicForm","HandleSubmitGroupView","MedicalDefaultValues","IdCartablePatient","navigate","GroupId","fields","control","errors","setValue","MatchingFields","filter","_element$element","IdGroupDetail","useGlobalMatchingField","filteredRootNodes","useFindDependedItems","groupedData","GroupByRadioType","ComponentMemoizer","index","EditElementTypeMatcher","field","dependecies","titleId","_GroupViewContextCons","ZeroFilteredEditGroupViewConstants","matchForms","_element$value","_element$value$toStri","frm","_frm$UiValue","_frm$UiValue$Value","_frm$value","isFormEdited","useMarkEditedLogicAccordion","marginLeft","Check","FormElement","Accordion","classes","root","square","AccordionSummary","expandIcon","ExpandMore","id","alignItems","MarkEditOrFilled","Typography","replace","AccordionDetails","_StateBank$title","_StateBank$FormView","_StateBank$FormView2","GroupFormId","width","FormView","Alert","dir","severity","EditableAccordionContents","EditInnerContenetAccordionContent","ArabicToPersian","NameGroup","uuidV4","EditAddOrCancelForm","LinearProgress","DefaultValues","formState","useCreateComplexField","EditGroupViewInnerContent","EditMedicalFormDefaultValues","EditGroupedView","EditMedicalForm","window","useStateBank","Container","mt","FormInfoCard","EditFormContent"],"sourceRoot":""}