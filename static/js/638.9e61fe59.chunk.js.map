{"version":3,"file":"static/js/638.9e61fe59.chunk.js","mappings":"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","sources":["Routes/Protected/AccountList/Adapters/GetBankAccountInformation.js","Routes/Protected/AccountList/Components/Accounts/components/AccountDataContainer/AccountDataContainer.js","Routes/Protected/AccountList/Components/BankAccountInformationSummrary/BankAccountInformationSummrary.js","Routes/Protected/AccountList/Adapters/ActivateBankAccount.js","Routes/Protected/AccountList/Adapters/DeactiveBankAccount.js","Routes/Protected/AccountList/Adapters/DeleteBankAccount.js","Routes/Protected/AccountList/Components/Accounts/components/ActivateDeactivateButtonStack/ActivateDeactivateButtonStack.js","Routes/Protected/AccountList/Components/Accounts/components/DeactivateOnlyButton/DeactivateOnlyButton.js","Routes/Protected/AccountList/Components/Accounts/components/OperationButtons/OperationButtons.js","Routes/Protected/AccountList/Components/AccountCard/AccountCard.js","Routes/Protected/AccountList/Components/Accounts/Accounts.js","Routes/Protected/AccountList/Adapters/GetBanksList.js","Routes/Protected/AccountList/Variables/AddBankAccountDefaultValues.js","Routes/Protected/AccountList/Variables/AddBankAccountFormDataArray.js","Routes/Protected/AccountList/Components/AddBankAccount/AddBankAccount.js","Routes/Protected/AccountList/Adapters/AddNewBankAccount.js","Routes/Protected/AccountList/Adapters/EditBankAccountInformation.js","Routes/Protected/AccountList/BankAccountList.js"],"sourcesContent":["import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { GlobalContext } from 'Global/Context/GlobalContextProvider';\r\nimport Cookies from 'js-cookie';\r\nimport { useContext } from 'react';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const GetBankAccountInformation = async (\r\n  setGatheredData\r\n) => {\r\n  const IdPerson =\r\n    Cookies.get('user') &&\r\n    JSON.parse(Cookies.get('user'))?.IdPerson;\r\n\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_ELS_PERSON_HESABLIST}`,\r\n    true,\r\n    {\r\n      idPerson: IdPerson,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1)\r\n      setGatheredData(response?.data?.Data);\r\n    else\r\n      SwalAlert('error', response.data.resMessage, false);\r\n  });\r\n};\r\n","import { Stack } from \"@mui/material\";\r\nimport React from \"react\";\r\n\r\nconst AccountDataContainer = ({ title, content, i18n }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <Stack\r\n        direction={i18n?.language === \"en\" ? \"row\" : \"row-reverse\"}\r\n        justifyContent=\"space-between\"\r\n        width=\"100%\"\r\n      >\r\n        <p>{title}</p>\r\n        <p>{content}</p>\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AccountDataContainer;\r\n","import React from \"react\";\r\nimport AccountDataContainer from \"../Accounts/components/AccountDataContainer/AccountDataContainer\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useContext } from \"react\";\r\nimport { GlobalContext } from \"Global/Context/GlobalContextProvider\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\n\r\nconst BankAccountInformationSummrary = ({ element }) => {\r\n  const languageArray = useContext(GlobalContext)?.LanguageArray;\r\n  const { i18n } = useTranslation();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <AccountDataContainer\r\n        title={`${FindLangKey(\r\n          \"bank-account-list-input-card-number\",\r\n          languageArray\r\n        )}:`}\r\n        content={element?.FldShomareCart}\r\n        i18n={i18n}\r\n      />\r\n      <AccountDataContainer\r\n        title={`${FindLangKey(\r\n          \"bank-account-list-input-account-number\",\r\n          languageArray\r\n        )}:`}\r\n        content={element?.FldHesabNo}\r\n        i18n={i18n}\r\n      />\r\n      <AccountDataContainer\r\n        title={`${FindLangKey(\r\n          \"bank-account-list-shaba-number\",\r\n          languageArray\r\n        )}:`}\r\n        content={element?.FldShomareShaba}\r\n        i18n={i18n}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BankAccountInformationSummrary;\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport Cookies from 'js-cookie';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const ActivateBankAccount = async (\r\n  id,\r\n  setForceRender\r\n) => {\r\n  const IdPerson =\r\n    Cookies.get('user') &&\r\n    JSON.parse(Cookies.get('user'))?.IdPerson;\r\n\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_ELS_PERSON_ACTIVE_HESAB}`,\r\n    true,\r\n    {\r\n      idPerson: IdPerson,\r\n      id,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      SwalAlert(\r\n        'success',\r\n        response.data.resMessage,\r\n        false\r\n      ).then(() => setForceRender((prev) => !prev));\r\n    } else\r\n      SwalAlert('error', response.data.resMessage, false);\r\n  });\r\n};\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport Cookies from 'js-cookie';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const DeactiveBankAccount = async (\r\n  id,\r\n  setForceRender\r\n) => {\r\n  const IdPerson =\r\n    Cookies.get('user') &&\r\n    JSON.parse(Cookies.get('user'))?.IdPerson;\r\n\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_ELS_PERSON_DEACTIVE_HESAB}`,\r\n    true,\r\n    {\r\n      idPerson: IdPerson,\r\n      id,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      SwalAlert(\r\n        'success',\r\n        response.data.resMessage,\r\n        false\r\n      ).then(() => setForceRender((prev) => !prev));\r\n    } else\r\n      SwalAlert('error', response.data.resMessage, false);\r\n  });\r\n};\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport Cookies from 'js-cookie';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const DeleteBankAccount = async (\r\n  id,\r\n  setForceRender\r\n) => {\r\n  const IdPerson =\r\n    Cookies.get('user') &&\r\n    JSON.parse(Cookies.get('user'))?.IdPerson;\r\n\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_ELS_PERSON_DELETE_HESAB}`,\r\n    true,\r\n    {\r\n      idPerson: IdPerson,\r\n      id,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      SwalAlert(\r\n        'success',\r\n        response.data.resMessage,\r\n        false\r\n      ).then(() => setForceRender((prev) => !prev));\r\n    } else\r\n      SwalAlert('error', response.data.resMessage, false);\r\n  });\r\n};\r\n","import { Button } from \"@mui/material\";\r\nimport SwalAlert from \"Global/Components/CommonComponents/SwalAlert/SwalAlert\";\r\nimport { GlobalContext } from \"Global/Context/GlobalContextProvider\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\nimport AccessControl from \"Global/security/AccessControl\";\r\nimport React from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { DeleteBankAccount } from \"Routes/Protected/AccountList/Adapters/DeleteBankAccount\";\r\n\r\nconst ActivateDeactivateButtonStack = ({\r\n  ActivateBankAccount,\r\n  id,\r\n  setForceRender,\r\n}) => {\r\n  const languageArray = useContext(GlobalContext)?.LanguageArray;\r\n  const delete_MSG = FindLangKey(\"bank-account-list-alert-sure-delete\");\r\n  return (\r\n    <React.Fragment>\r\n      <Button\r\n        color=\"colorPrimer\"\r\n        variant=\"contained\"\r\n        fullWidth\r\n        onClick={(event) => {\r\n          ActivateBankAccount(id, setForceRender);\r\n          event.stopPropagation();\r\n        }}\r\n        disabled={AccessControl(\"bank-account-list-btn-activate-account\")}\r\n      >\r\n        {FindLangKey(\r\n          \"bank-account-list-btn-activate-bank-account\",\r\n          languageArray\r\n        )}\r\n      </Button>\r\n      <Button\r\n        color=\"error\"\r\n        variant=\"contained\"\r\n        onClick={(event) => {\r\n          event.stopPropagation();\r\n          SwalAlert(\"warning\", delete_MSG, true, () => {\r\n            DeleteBankAccount(id, setForceRender);\r\n          });\r\n        }}\r\n        disabled={AccessControl(\"bank-account-list-btn-delete-account\")}\r\n      >\r\n        {FindLangKey(\"general-public-label-delete\", languageArray)}\r\n      </Button>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ActivateDeactivateButtonStack;\r\n","import { Button } from \"@mui/material\";\r\nimport { GlobalContext } from \"Global/Context/GlobalContextProvider\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\nimport AccessControl from \"Global/security/AccessControl\";\r\nimport React from \"react\";\r\nimport { useContext } from \"react\";\r\n\r\nconst DeactivateOnlyButton = ({ DeactiveBankAccount, id, setForceRender }) => {\r\n  const languageArray = useContext(GlobalContext)?.LanguageArray;\r\n\r\n  return (\r\n    <Button\r\n      disabled={AccessControl(\"bank-account-list-btn-deactivate-account\")}\r\n      color=\"error\"\r\n      variant=\"contained\"\r\n      fullWidth\r\n      onClick={(event) => {\r\n        DeactiveBankAccount(id, setForceRender);\r\n        event.stopPropagation();\r\n      }}\r\n    >\r\n      {FindLangKey(\r\n        \"bank-account-list-btn-deactivate-bank-account\",\r\n        languageArray\r\n      )}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default DeactivateOnlyButton;\r\n","import { Button, Stack } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport { ActivateBankAccount } from \"Routes/Protected/AccountList/Adapters/ActivateBankAccount\";\r\nimport { DeactiveBankAccount } from \"Routes/Protected/AccountList/Adapters/DeactiveBankAccount\";\r\nimport ActivateDeactivateButtonStack from \"../ActivateDeactivateButtonStack/ActivateDeactivateButtonStack\";\r\nimport DeactivateOnlyButton from \"../DeactivateOnlyButton/DeactivateOnlyButton\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst OperationButtons = ({ id, setForceRender, ActiveHesab }) => {\r\n  const { i18n } = useTranslation();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Stack\r\n        alignItems=\"center\"\r\n        direction={i18n?.language === \"en\" ? \"row\" : \"row-reverse\"}\r\n        spacing={1}\r\n        width=\"100%\"\r\n        className=\"account-operations-color-design\"\r\n      >\r\n        {!ActiveHesab ? (\r\n          <ActivateDeactivateButtonStack\r\n            ActivateBankAccount={ActivateBankAccount}\r\n            id={id}\r\n            setForceRender={setForceRender}\r\n          />\r\n        ) : (\r\n          <DeactivateOnlyButton\r\n            DeactiveBankAccount={DeactiveBankAccount}\r\n            id={id}\r\n            setForceRender={setForceRender}\r\n          />\r\n        )}\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default OperationButtons;\r\n","import { Card, Stack } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport BankAccountInformationSummrary from \"../BankAccountInformationSummrary/BankAccountInformationSummrary\";\r\nimport OperationButtons from \"../Accounts/components/OperationButtons/OperationButtons\";\r\nimport { ArabicToPersian } from \"utils/ConvertToPersianTextFromArabic\";\r\n\r\nconst AccountCard = ({\r\n  GlobalConstants,\r\n  setSelectedElement,\r\n  element,\r\n  setForceRender,\r\n\r\n  SelectedElement,\r\n}) => {\r\n  return (\r\n    <React.Fragment>\r\n      <Card\r\n        sx={{\r\n          width: \"100%\",\r\n          p: \"1em\",\r\n          border:\r\n            SelectedElement && SelectedElement[0]?.FldId === element.FldId\r\n              ? \"2px solid #88d4d4\"\r\n              : \"unset\",\r\n        }}\r\n        key={GlobalConstants.uuidV4()}\r\n        onClick={(event) => {\r\n          setSelectedElement([element]);\r\n          event.stopPropagation();\r\n        }}\r\n      >\r\n        <Stack alignItems=\"flex-end\" spacing={1}>\r\n          <h4 style={{ textAlign: \"center\", width: \"100%\" }}>\r\n            {ArabicToPersian(element?.NameBank)}\r\n          </h4>\r\n          <br />\r\n          <BankAccountInformationSummrary element={element} />\r\n          <OperationButtons\r\n            id={element?.FldId}\r\n            setForceRender={setForceRender}\r\n            ActiveHesab={element?.ActiveHesab}\r\n          />\r\n        </Stack>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AccountCard;\r\n","import { Box, Stack, LinearProgress } from \"@mui/material\";\r\nimport AccordionWithCustomContent from \"Global/Components/UnEditableComponents/AccordionWithCustomContent/AccordionWithCustomContent\";\r\nimport useGatherDataFromApi from \"Global/Hooks/useGatherDataFromApi\";\r\nimport React, { useContext } from \"react\";\r\nimport { GetBankAccountInformation } from \"../../Adapters/GetBankAccountInformation\";\r\nimport AccountListAccordionContentCreator from \"../../Functions/AccountListAccordionContentCreator\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\nimport AccountCard from \"../AccountCard/AccountCard\";\r\nimport { GlobalContext } from \"Global/Context/GlobalContextProvider\";\r\n\r\nconst Accounts = ({\r\n  forceRender,\r\n  setForceRender,\r\n  setSelectedElement,\r\n  SelectedElement,\r\n  languageArray,\r\n}) => {\r\n  const { gatheredData } = useGatherDataFromApi(\r\n    GetBankAccountInformation,\r\n    forceRender\r\n  );\r\n  const GlobalConstants = useContext(GlobalContext);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {forceRender ? <></> : <></>}\r\n      <Box sx={{ marginTop: \"1em\" }}>\r\n        {/* <AccordionWithCustomContent\r\n          title={FindLangKey(\r\n            \"bank-account-list-accordion-account-list\",\r\n            languageArray\r\n          )}\r\n          Content={AccountListAccordionContentCreator(\r\n            gatheredData,\r\n            setForceRender,\r\n            setSelectedElement,\r\n            SelectedElement\r\n          )}\r\n        /> */}\r\n        <Stack spacing={1}>\r\n          {gatheredData ? (\r\n            gatheredData?.map((element) => (\r\n              <AccountCard\r\n                GlobalConstants={GlobalConstants}\r\n                setSelectedElement={setSelectedElement}\r\n                element={element}\r\n                setForceRender={setForceRender}\r\n                key={GlobalConstants.uuidV4()}\r\n                SelectedElement={SelectedElement}\r\n              />\r\n            ))\r\n          ) : (\r\n            <LinearProgress color=\"colorPrimer\" />\r\n          )}\r\n        </Stack>\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Accounts;\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport Cookies from 'js-cookie';\r\nimport { ArabicToPersian } from 'utils/ConvertToPersianTextFromArabic';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const GetBanksList = async (setGatheredData) => {\r\n  const IdPerson =\r\n    Cookies.get('user') &&\r\n    JSON.parse(Cookies.get('user'))?.IdPerson;\r\n\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_BANKLIST}`,\r\n    true,\r\n    {\r\n      idPerson: IdPerson,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1)\r\n      setGatheredData(\r\n        response?.data?.Data?.map((elemet) => {\r\n          return {\r\n            ItemValue: elemet.FldId,\r\n            ItemContent: ArabicToPersian(elemet.FldName),\r\n          };\r\n        })\r\n      );\r\n    else\r\n      SwalAlert('error', response.data.resMessage, false);\r\n  });\r\n};\r\n","export const AddBankAccountDefaultValues = {\r\n  Id: 0,\r\n  idBank: \"\",\r\n  hesabNo: \"\",\r\n  shomareCart: \"\",\r\n  shomareSheba: \"\",\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport CustomizableSelect from \"Global/Components/CommonComponents/CustomizableSelect/CustomizableSelect\";\r\nimport PersianSupportNumericTextField from \"Global/Components/UnEditableComponents/PersianSupportNumericTextField/PersianSupportNumericTextField\";\r\nimport EditablePersianSupportNumericTextField from \"Global/Components/EditableComponents/EditablePersianSupportNumericTextField\";\r\nimport { ArabicToPersian } from \"utils/ConvertToPersianTextFromArabic\";\r\nimport { GlobalContext } from \"Global/Context/GlobalContextProvider\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\n\r\nexport const AddBankAccountFormDataArray = (\r\n  bankAccountData,\r\n  [SelectedElement]\r\n) => {\r\n  const [DataArray, setDataArray] = React.useState([]);\r\n  const languageArray = useContext(GlobalContext)?.LanguageArray;\r\n  const languageElements = [\r\n    FindLangKey(\"bank-account-list-select-bank\", languageArray),\r\n    FindLangKey(\"bank-account-list-input-card-number\", languageArray),\r\n    FindLangKey(\"bank-account-list-input-account-number\", languageArray),\r\n    FindLangKey(\"bank-account-list-shaba-number\", languageArray),\r\n  ];\r\n  React.useMemo(() => {\r\n    setDataArray([\r\n      {\r\n        element: (\r\n          <CustomizableSelect\r\n            SelectableDataArray={bankAccountData}\r\n            label={languageElements[0]}\r\n            isSingle={true}\r\n            editable={SelectedElement}\r\n            value={ArabicToPersian(SelectedElement?.NameBank)}\r\n          />\r\n        ),\r\n        name: \"idBank\",\r\n        required: true,\r\n      },\r\n      {\r\n        element: !SelectedElement ? (\r\n          <PersianSupportNumericTextField label={languageElements[1]} />\r\n        ) : (\r\n          <EditablePersianSupportNumericTextField\r\n            value={SelectedElement.FldShomareCart}\r\n            label={languageElements[1]}\r\n          />\r\n        ),\r\n        name: \"shomareCart\",\r\n        required: true,\r\n      },\r\n      {\r\n        element: !SelectedElement ? (\r\n          <PersianSupportNumericTextField label={languageElements[2]} />\r\n        ) : (\r\n          <EditablePersianSupportNumericTextField\r\n            value={SelectedElement.FldHesabNo}\r\n            label={languageElements[2]}\r\n          />\r\n        ),\r\n        name: \"hesabNo\",\r\n        required: true,\r\n      },\r\n      {\r\n        element: !SelectedElement ? (\r\n          <PersianSupportNumericTextField label={languageElements[3]} />\r\n        ) : (\r\n          <EditablePersianSupportNumericTextField\r\n            value={SelectedElement.FldShomareShaba}\r\n            label={languageElements[3]}\r\n          />\r\n        ),\r\n        name: \"shomareSheba\",\r\n        required: true,\r\n      },\r\n    ]);\r\n  }, [bankAccountData, SelectedElement, JSON.stringify(languageElements)]);\r\n\r\n  return DataArray;\r\n};\r\n","import React from \"react\";\r\nimport SubmitButton from \"Global/Components/UnEditableComponents/SubmitButton/SubmitButton\";\r\nimport useGatherDataFromApi from \"Global/Hooks/useGatherDataFromApi\";\r\nimport ReactHookFormGenerator from \"Global/ReactHookFormGenerator/ReactHookFormGenerator\";\r\nimport { Stack } from \"@mui/material\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { GetBanksList } from \"../../Adapters/GetBanksList\";\r\nimport { AddBankAccountDefaultValues } from \"../../Variables/AddBankAccountDefaultValues\";\r\nimport { AddBankAccountFormDataArray } from \"../../Variables/AddBankAccountFormDataArray\";\r\nimport { AddNewBankAccount } from \"../../Adapters/AddNewBankAccount\";\r\nimport { EditBankAccountInformation } from \"../../Adapters/EditBankAccountInformation\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\nimport AccessControl from \"Global/security/AccessControl\";\r\n\r\nconst AddBankAccount = ({\r\n  forceRender,\r\n  setForceRender,\r\n  SelectedElement,\r\n  languageArray,\r\n}) => {\r\n  const { control, formState, handleSubmit } = useForm({\r\n    defaultValues: AddBankAccountDefaultValues,\r\n  });\r\n  const { gatheredData } = useGatherDataFromApi(GetBanksList, forceRender);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <form\r\n        onSubmit={handleSubmit((data) => {\r\n          !SelectedElement.length > 0\r\n            ? AddNewBankAccount(data, setForceRender)\r\n            : EditBankAccountInformation(\r\n                {\r\n                  ...data,\r\n                  Id: SelectedElement[0].FldId,\r\n                  idBank: gatheredData.filter(\r\n                    (eachdata) =>\r\n                      eachdata.ItemContent === data.idBank ||\r\n                      eachdata.ItemValue === data.idBank\r\n                  )[0].ItemValue,\r\n                },\r\n                setForceRender\r\n              );\r\n        })}\r\n      >\r\n        <Stack marginTop=\"1em\" spacing={1}>\r\n          <ReactHookFormGenerator\r\n            control={control}\r\n            formState={formState}\r\n            DataArray={AddBankAccountFormDataArray(\r\n              gatheredData,\r\n              SelectedElement\r\n            )}\r\n          />\r\n          <SubmitButton\r\n            disabled={AccessControl(\"bank-account-list-btn-add-new-account\")}\r\n            label={\r\n              !SelectedElement.length > 0\r\n                ? FindLangKey(\r\n                    \"bank-account-list-btn-add-new-bank-account\",\r\n                    languageArray\r\n                  )\r\n                : FindLangKey(\r\n                    \"bank-account-list-btn-edit-bank-account\",\r\n                    languageArray\r\n                  )\r\n            }\r\n          />\r\n        </Stack>\r\n      </form>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddBankAccount;\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport Cookies from 'js-cookie';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const AddNewBankAccount = async (\r\n  accountInfo,\r\n  setForceRender\r\n) => {\r\n  const IdPerson =\r\n    Cookies.get('user') &&\r\n    JSON.parse(Cookies.get('user'))?.IdPerson;\r\n\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_ELS_PERSON_ADDHESAB}`,\r\n    true,\r\n    {\r\n      idPerson: IdPerson,\r\n      ...accountInfo,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      SwalAlert(\r\n        'success',\r\n        response.data.resMessage,\r\n        false\r\n      ).then(() => setForceRender((prev) => !prev));\r\n    } else\r\n      SwalAlert('error', response.data.resMessage, false);\r\n  });\r\n};\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport Cookies from 'js-cookie';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const EditBankAccountInformation = async (\r\n  accountInfo,\r\n  setForceRender\r\n) => {\r\n  const IdPerson =\r\n    Cookies.get('user') &&\r\n    JSON.parse(Cookies.get('user'))?.IdPerson;\r\n  console.log('ACC=>', accountInfo);\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_ELS_PERSON_EDITHESAB}`,\r\n    true,\r\n    {\r\n      idPerson: IdPerson,\r\n      ...accountInfo,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      SwalAlert(\r\n        'success',\r\n        response.data.resMessage,\r\n        false\r\n      ).then(() => setForceRender((prev) => !prev));\r\n    } else\r\n      SwalAlert('error', response.data.resMessage, false);\r\n  });\r\n};\r\n","import React from \"react\";\r\nimport Accounts from \"./Components/Accounts/Accounts\";\r\nimport AddBankAccount from \"./Components/AddBankAccount/AddBankAccount\";\r\nimport { Container } from \"@mui/material\";\r\n\r\nimport { useContext } from \"react\";\r\nimport { GlobalContext } from \"Global/Context/GlobalContextProvider\";\r\n\r\nconst BankAccountList = () => {\r\n  const languageArray = useContext(GlobalContext)?.LanguageArray;\r\n  const [forceRender, setForceRender] = React.useState(false);\r\n  const [SelectedElement, setSelectedElement] = React.useState([]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Container maxWidth=\"md\">\r\n        <Accounts\r\n          forceRender={forceRender}\r\n          setForceRender={setForceRender}\r\n          setSelectedElement={setSelectedElement}\r\n          SelectedElement={SelectedElement}\r\n          languageArray={languageArray}\r\n        />\r\n        <AddBankAccount\r\n          setForceRender={setForceRender}\r\n          SelectedElement={SelectedElement}\r\n          forceRender={forceRender}\r\n          languageArray={languageArray}\r\n        />\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BankAccountList;\r\n"],"names":["GetBankAccountInformation","async","_JSON$parse","IdPerson","Cookies","JSON","parse","Post","concat","process","idPerson","then","response","_response$data","data","resCode","setGatheredData","Data","SwalAlert","resMessage","_ref","title","content","i18n","_jsx","React","children","_jsxs","Stack","direction","language","justifyContent","width","_useContext","element","languageArray","useContext","GlobalContext","LanguageArray","useTranslation","AccountDataContainer","FindLangKey","FldShomareCart","FldHesabNo","FldShomareShaba","ActivateBankAccount","id","setForceRender","prev","DeactiveBankAccount","delete_MSG","Button","color","variant","fullWidth","onClick","event","stopPropagation","disabled","AccessControl","DeleteBankAccount","ActiveHesab","alignItems","spacing","className","DeactivateOnlyButton","ActivateDeactivateButtonStack","_SelectedElement$","GlobalConstants","setSelectedElement","SelectedElement","Card","sx","p","border","FldId","style","textAlign","ArabicToPersian","NameBank","BankAccountInformationSummrary","OperationButtons","uuidV4","forceRender","gatheredData","useGatherDataFromApi","_Fragment","Box","marginTop","map","AccountCard","LinearProgress","GetBanksList","_response$data$Data","elemet","ItemValue","ItemContent","FldName","AddBankAccountDefaultValues","Id","idBank","hesabNo","shomareCart","shomareSheba","AddBankAccountFormDataArray","bankAccountData","DataArray","setDataArray","languageElements","CustomizableSelect","SelectableDataArray","label","isSingle","editable","value","name","required","EditablePersianSupportNumericTextField","PersianSupportNumericTextField","stringify","control","formState","handleSubmit","useForm","defaultValues","onSubmit","length","accountInfo","AddNewBankAccount","console","log","EditBankAccountInformation","filter","eachdata","ReactHookFormGenerator","SubmitButton","BankAccountList","Container","maxWidth","Accounts","AddBankAccount"],"sourceRoot":""}