{"version":3,"file":"static/js/806.dff99b56.chunk.js","mappings":"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","sources":["Global/Adapters/GetInsuranceListPublic.js","Routes/Protected/PatientList/Adapters/GetDetectionList.js","Routes/Protected/PatientList/Components/SearchTypeSelector.js","Routes/Protected/PatientList/Variables/DefaultData.js","Routes/Protected/PatientList/Adapters/GetPatientList.js","Routes/Protected/PatientList/Hooks/usePatientFormLogicPack.js","Routes/Protected/PatientList/Components/PatientListForm.js","Routes/Protected/PatientList/StateMachine/useStateMachine.js","Routes/Protected/PatientList/Components/Patients.js","Routes/Protected/PatientList/PatientList.js"],"sourcesContent":["import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { ArabicToPersian } from 'utils/ConvertToPersianTextFromArabic';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const GetInsuranceListPublic = async (\r\n  setGatheredData,\r\n  isObjectFormNeeded\r\n) => {\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_GET_INSURANCE_LIST}`,\r\n    true,\r\n    {\r\n      clause: '',\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      isObjectFormNeeded\r\n        ? setGatheredData((prev) => ({\r\n            ...prev,\r\n            [isObjectFormNeeded]:\r\n              response.data.Data.list.map((elemet) => {\r\n                return {\r\n                  ItemValue: elemet.ID,\r\n                  ItemContent: ArabicToPersian(elemet.Name),\r\n                };\r\n              }),\r\n          }))\r\n        : setGatheredData(\r\n            response.data.Data.list.map((elemet) => {\r\n              return {\r\n                ItemValue: elemet.ID,\r\n                ItemContent: ArabicToPersian(elemet.Name),\r\n              };\r\n            })\r\n          );\r\n    } else\r\n      SwalAlert('error', response.data.resMessage, false);\r\n  });\r\n};\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { ArabicToPersian } from 'utils/ConvertToPersianTextFromArabic';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const GetDetectionList = async (\r\n  setDetectionList,\r\n  objName\r\n) => {\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_GET_TASHKHIS_LIST}`,\r\n    true,\r\n    {\r\n      idSystem: 900,\r\n      clause: '',\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1)\r\n      setDetectionList({\r\n        [objName]: response.data.Data.list.map((elemet) => {\r\n          return {\r\n            ItemValue: elemet.Id,\r\n            ItemContent: ArabicToPersian(elemet.Name),\r\n          };\r\n        }),\r\n      });\r\n    else\r\n      SwalAlert('error', response.data.resMessage, false);\r\n  });\r\n};\r\n","import React from 'react';\r\nimport { Stack } from '@mui/material';\r\nimport { useTranslation } from 'react-i18next';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport EditableCustomizableSelect from 'Global/Components/EditableComponents/EditableCustomizableSelect/EditableCustomizableSelect';\r\n\r\nconst SearchTypeSelector = ({\r\n  setSearchType,\r\n  languageArray,\r\n}) => {\r\n  const { t, i18n } = useTranslation();\r\n\r\n  const type_array = [\r\n    {\r\n      ItemContent: FindLangKey(\r\n        'patient-list-radio-type-all',\r\n        languageArray\r\n      ),\r\n      ItemValue: '0',\r\n    },\r\n    {\r\n      ItemContent: FindLangKey(\r\n        'patient-list-radio-type-ended',\r\n        languageArray\r\n      ),\r\n      ItemValue: '2',\r\n    },\r\n    {\r\n      ItemContent: FindLangKey(\r\n        'patient-list-radio-type-canceled',\r\n        languageArray\r\n      ),\r\n      ItemValue: '3',\r\n    },\r\n  ];\r\n\r\n  const type_label = FindLangKey(\r\n    'lab-patient-tarikh-type-label'\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Stack width=\"100%\">\r\n        <EditableCustomizableSelect\r\n          SelectableDataArray={type_array}\r\n          initialData={[\r\n            {\r\n              ItemContent: FindLangKey(\r\n                'patient-list-radio-type-all',\r\n                languageArray\r\n              ),\r\n              ItemValue: FindLangKey(\r\n                'patient-list-radio-type-all',\r\n                languageArray\r\n              ),\r\n            },\r\n          ]}\r\n          label={type_label}\r\n          onChange={(val) => {\r\n            setSearchType(val);\r\n          }}\r\n          enableInitialOnchange\r\n          isSingle\r\n        />\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default SearchTypeSelector;\r\n","export const DefaultData = {\r\n  fromDate: new Intl.DateTimeFormat(\"fa-u-ca-persian-nu-latn\", {\r\n    dateStyle: \"short\",\r\n  }).format(new Date().setMonth(new Date().getMonth() - 1)),\r\n  toDate: new Intl.DateTimeFormat(\"fa-u-ca-persian-nu-latn\", {\r\n    dateStyle: \"short\",\r\n  }).format(new Date()),\r\n  idTashkhisList: \"\",\r\n  idInsuranceList: \"\",\r\n  patientSearchField: \"\",\r\n  searchType: 0,\r\n};\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport Cookies from 'js-cookie';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const GetPatientList = async (\r\n  setPatientData,\r\n  parameters\r\n) => {\r\n  const Id = JSON.parse(Cookies.get('user'));\r\n\r\n  console.log('parameters->', parameters);\r\n\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_DOCTORWORKLIST_PATIENT_LIST}`,\r\n    true,\r\n    {\r\n      ...parameters.data,\r\n      idPerson: Id.IdPerson,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.tasks.resCode === 1)\r\n      setPatientData &&\r\n        setPatientData((prev) => ({\r\n          ...prev,\r\n          [parameters.objName]: response.data.tasks.Data,\r\n        }));\r\n    else\r\n      SwalAlert(\r\n        'error',\r\n        response.data.tasks.resMessage,\r\n        false\r\n      );\r\n  });\r\n};\r\n","import React from \"react\";\r\nimport { GetPatientList } from \"../Adapters/GetPatientList\";\r\nimport { DefaultData } from \"../Variables/DefaultData\";\r\nimport { GetInsuranceListPublic } from \"Global/Adapters/GetInsuranceListPublic\";\r\nconst usePatientFormLogicPack = (setFunctionArray) => {\r\n  const [InsuranceSelector, setInsuranceSelector] = React.useState();\r\n  const [SearchType, setSearchType] = React.useState(\"\");\r\n  const [PatientSearchField, setPatientSearchField] = React.useState(\"\");\r\n  const [DateRangeValue, setDateRangeValue] = React.useState(\"\");\r\n  const [DetectorList, setDetectorList] = React.useState(\"\");\r\n  const HandlePatientSearchField = (event) => {\r\n    setPatientSearchField(event.target.value);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (\r\n      InsuranceSelector?.ItemContent &&\r\n      !Object.values(DateRangeValue).some((item) => item.length === 0)\r\n    ) {\r\n      setFunctionArray([\r\n        {\r\n          functions: GetInsuranceListPublic,\r\n          parameters: \"InsuranceList\",\r\n        },\r\n        {\r\n          functions: GetPatientList,\r\n          parameters: {\r\n            objName: \"PatientList\",\r\n            data: {\r\n              ...DefaultData,\r\n              idInsuranceList: InsuranceSelector?.ItemContent?.join(\",\"),\r\n              idTashkhisList: DetectorList?.ItemContent.join(\",\") || \"\",\r\n              patientSearchField:\r\n                (PatientSearchField.length && PatientSearchField) || \"\",\r\n              searchType: (SearchType.length && parseInt(SearchType)) || 0,\r\n              fromDate: DateRangeValue?.FromDate,\r\n              toDate: DateRangeValue?.ToDate,\r\n            },\r\n          },\r\n        },\r\n      ]);\r\n    }\r\n  }, [\r\n    InsuranceSelector,\r\n    SearchType,\r\n    PatientSearchField,\r\n    DateRangeValue,\r\n    DetectorList,\r\n  ]);\r\n  return {\r\n    setSearchType,\r\n    setInsuranceSelector,\r\n    setDetectorList,\r\n    setDateRangeValue,\r\n    HandlePatientSearchField,\r\n  };\r\n};\r\n\r\nexport default usePatientFormLogicPack;\r\n","import React from \"react\";\r\nimport SearchTypeSelector from \"./SearchTypeSelector\";\r\nimport CustomizableSelect from \"Global/Components/CommonComponents/CustomizableSelect/CustomizableSelect\";\r\nimport DateRangePicker from \"Global/Components/CommonComponents/DateRangePicker/DateRangePicker\";\r\nimport PersianSupportTextField from \"Global/Components/UnEditableComponents/PersianSupportTextField/PersianSupportTextField\";\r\nimport { Search } from \"@mui/icons-material\";\r\nimport { DefaultData } from \"../Variables/DefaultData\";\r\nimport usePatientFormLogicPack from \"../Hooks/usePatientFormLogicPack\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\n\r\nconst PatientListForm = ({ StateBank, setFunctionArray, languageArray }) => {\r\n  const { t, i18n } = useTranslation();\r\n\r\n  const {\r\n    setSearchType,\r\n    setInsuranceSelector,\r\n    setDetectorList,\r\n    setDateRangeValue,\r\n    HandlePatientSearchField,\r\n  } = usePatientFormLogicPack(setFunctionArray);\r\n\r\n  const searchBaseMsg = FindLangKey(\"general-public-search-based-on\");\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <SearchTypeSelector\r\n        setSearchType={setSearchType}\r\n        languageArray={languageArray}\r\n      />\r\n      {/* <p style={{ textAlign: \"center\", fontSize: \".8em\" }}>{searchBaseMsg}</p> */}\r\n\r\n      <CustomizableSelect\r\n        label={FindLangKey(\"general-public-insurance-list\", languageArray)}\r\n        SelectableDataArray={StateBank?.InsuranceList}\r\n        GetSelectedValue={setInsuranceSelector}\r\n      />\r\n      <CustomizableSelect\r\n        label={FindLangKey(\"patient-list-select-diagnosis-list\", languageArray)}\r\n        SelectableDataArray={StateBank?.DetectionList}\r\n        GetSelectedValue={setDetectorList}\r\n      />\r\n      <DateRangePicker\r\n        GetDateRange={setDateRangeValue}\r\n        ExcludeOneMonth={true}\r\n        KeepSelectedDate={true}\r\n      />\r\n      <PersianSupportTextField\r\n        label={FindLangKey(\"patient-list-input-search-name-id\", languageArray)}\r\n        onlyIcon={<Search />}\r\n        CustomOnChange={HandlePatientSearchField}\r\n        isEnglish={i18n?.language === \"en\"}\r\n        styles={{\r\n          marginTop: \"-1em\",\r\n        }}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PatientListForm;\r\n","import React from \"react\";\r\nimport useGatherDataFromApi from \"Global/Hooks/useGatherDataFromApi\";\r\nimport { GetInsuranceListPublic } from \"Global/Adapters/GetInsuranceListPublic\";\r\nimport { GetDetectionList } from \"../Adapters/GetDetectionList\";\r\nimport { GetPatientList } from \"../Adapters/GetPatientList\";\r\nimport { DefaultData } from \"../Variables/DefaultData\";\r\n\r\nconst useStateMachine = () => {\r\n  const [FunctionArray, setFunctionArray] = React.useState([]);\r\n  const [StateBank, setStateBank] = React.useState();\r\n  React.useLayoutEffect(() => {\r\n    setFunctionArray([\r\n      {\r\n        functions: GetInsuranceListPublic,\r\n        parameters: \"InsuranceList\",\r\n      },\r\n      {\r\n        functions: GetDetectionList,\r\n        parameters: \"DetectionList\",\r\n      },\r\n      // {\r\n      //   functions: GetPatientList,\r\n      //   parameters: {\r\n      //     objName: \"PatientList\",\r\n      //     data: DefaultData,\r\n      //   },\r\n      // },\r\n    ]);\r\n  }, []);\r\n  const { gatheredData } = useGatherDataFromApi(FunctionArray);\r\n\r\n  React.useMemo(() => {\r\n    setStateBank(gatheredData);\r\n  }, [gatheredData, FunctionArray]);\r\n  return [StateBank, setFunctionArray];\r\n};\r\n\r\nexport default useStateMachine;\r\n","import React, { useContext } from \"react\";\r\nimport { GlobalContext } from \"Global/Context/GlobalContextProvider\";\r\nimport EachPatient from \"Routes/Protected/CurrentPatients/Components/EachPatient/EachPatient\";\r\nimport { Card } from \"@mui/material\";\r\nimport styles from \"Routes/Protected/CurrentPatients/Styles/Current.Patient.module.scss\";\r\nimport useOptimizeListRenderPerformance from \"Global/Hooks/useOptimizeListRenderPerformance\";\r\nimport useSortSelectedPatientsToTop from \"Global/Hooks/useSortSelectedPatientsToTop\";\r\nconst Patients = ({ patientList }) => {\r\n  const userFilePatients = useSortSelectedPatientsToTop(patientList);\r\n  const { list, handleTouchMove, handleScroll } =\r\n    useOptimizeListRenderPerformance(userFilePatients);\r\n  const GlobalConstants = useContext(GlobalContext);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div\r\n        style={{\r\n          all: \"inherit\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          gap: \"8px\",\r\n          width: \"100%\",\r\n        }}\r\n        onWheel={handleScroll}\r\n        onTouchMove={handleTouchMove}\r\n      >\r\n        {list?.map((Patient, index) => (\r\n          <Card\r\n            elevation={2}\r\n            sx={{\r\n              p: \".3em\",\r\n              borderRadius: \"20px\",\r\n              width: \"100%\",\r\n            }}\r\n            className={styles.PatientCard}\r\n            key={index}\r\n          >\r\n            <EachPatient\r\n              Patient={Patient}\r\n              key={GlobalConstants.uuidV4()}\r\n              bgColor={\r\n                Patient?.EndOfTreatment\r\n                  ? \"yellowgreen\"\r\n                  : Patient?.CancelByDoctor\r\n                  ? \"yellow\"\r\n                  : \"\"\r\n              }\r\n              disableActions={\r\n                Patient?.EndOfTreatment || Patient?.CancelByDoctor\r\n              }\r\n            />\r\n          </Card>\r\n        ))}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Patients;\r\n","import React from \"react\";\r\nimport PatientListForm from \"./Components/PatientListForm\";\r\nimport { Container, Stack } from \"@mui/material\";\r\nimport useStateMachine from \"./StateMachine/useStateMachine\";\r\nimport Patients from \"./Components/Patients\";\r\nimport { useContext } from \"react\";\r\nimport { GlobalContext } from \"Global/Context/GlobalContextProvider\";\r\n\r\nconst PatientList = () => {\r\n  const languageArray = useContext(GlobalContext)?.LanguageArray;\r\n\r\n  const [StateBank, setFunctionArray] = useStateMachine();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Container maxWidth=\"md\">\r\n        <Stack marginTop=\"1em\" alignItems=\"center\" gap={\".5em\"}>\r\n          <PatientListForm\r\n            StateBank={StateBank}\r\n            setFunctionArray={setFunctionArray}\r\n            languageArray={languageArray}\r\n          />\r\n          <Patients\r\n            patientList={StateBank?.PatientList}\r\n            languageArray={languageArray}\r\n          />\r\n        </Stack>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PatientList;\r\n"],"names":["GetInsuranceListPublic","async","setGatheredData","isObjectFormNeeded","Post","concat","process","clause","then","response","data","resCode","prev","Data","list","map","elemet","ItemValue","ID","ItemContent","ArabicToPersian","Name","SwalAlert","resMessage","GetDetectionList","setDetectionList","objName","idSystem","Id","_ref","setSearchType","languageArray","t","i18n","useTranslation","type_array","FindLangKey","type_label","_jsx","React","children","Stack","width","EditableCustomizableSelect","SelectableDataArray","initialData","label","onChange","val","enableInitialOnchange","isSingle","DefaultData","fromDate","Intl","DateTimeFormat","dateStyle","format","Date","setMonth","getMonth","toDate","idTashkhisList","idInsuranceList","patientSearchField","searchType","GetPatientList","setPatientData","parameters","JSON","parse","Cookies","console","log","idPerson","IdPerson","tasks","setFunctionArray","InsuranceSelector","setInsuranceSelector","SearchType","PatientSearchField","setPatientSearchField","DateRangeValue","setDateRangeValue","DetectorList","setDetectorList","_InsuranceSelector$It","Object","values","some","item","length","functions","join","parseInt","FromDate","ToDate","HandlePatientSearchField","event","target","value","StateBank","usePatientFormLogicPack","_jsxs","SearchTypeSelector","CustomizableSelect","InsuranceList","GetSelectedValue","DetectionList","DateRangePicker","GetDateRange","ExcludeOneMonth","KeepSelectedDate","PersianSupportTextField","onlyIcon","Search","CustomOnChange","isEnglish","language","styles","marginTop","useStateMachine","FunctionArray","setStateBank","gatheredData","useGatherDataFromApi","patientList","userFilePatients","useSortSelectedPatientsToTop","handleTouchMove","handleScroll","useOptimizeListRenderPerformance","GlobalConstants","useContext","GlobalContext","style","all","display","flexDirection","gap","onWheel","onTouchMove","Patient","index","Card","elevation","sx","p","borderRadius","className","EachPatient","bgColor","EndOfTreatment","CancelByDoctor","disableActions","uuidV4","PatientList","_useContext","LanguageArray","Container","maxWidth","alignItems","PatientListForm","Patients"],"sourceRoot":""}