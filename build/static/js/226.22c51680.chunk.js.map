{"version":3,"file":"static/js/226.22c51680.chunk.js","mappings":"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","sources":["Global/Hooks/useObserverElement/useOberseveElement.js","Routes/Protected/AddNewConfer/context/hooks/useCustomizedListRenderer.js","Routes/Protected/AddNewConfer/context/hooks/useTopSelectedObject.js","Routes/Protected/AddNewConfer/functions/HandleSearchItem.js","Routes/Protected/AddNewConfer/context/hooks/useSortListByConditions.js","Routes/Protected/AddNewConfer/Adapters/GetConferServices.js","Routes/Protected/AddNewConfer/Adapters/GetConferInfo.js","Routes/Protected/AddNewConfer/context/context.js","Routes/Protected/AddNewConfer/context/functions/FunctionArray.js","Routes/Protected/AddNewConfer/functions/HandleReplaceStoredItems.js","Routes/Protected/AddNewConfer/Adapters/CalcByDetection.js","Routes/Protected/AddNewConfer/Components/Form/components/Insurance.js","Routes/Protected/AddNewConfer/Components/Form/components/CenterOff.js","Routes/Protected/AddNewConfer/Components/Form/components/DoctorOff.js","Routes/Protected/AddNewConfer/Components/Form/components/DetectionList.js","Routes/Protected/AddNewConfer/Components/Form/Form.js","webpack://new-ui/./src/Routes/Protected/AddNewConfer/style/Confer.general.style.module.scss?3e74","Routes/Protected/AddNewConfer/Components/Confers/components/ConferName.js","Routes/Protected/AddNewConfer/Components/Confers/components/ConferControls.js","Routes/Protected/AddNewConfer/Components/Confers/components/ConferPrice.js","Routes/Protected/AddNewConfer/Components/Confers/components/Confer.js","Routes/Protected/AddNewConfer/Components/Confers/components/ConferMap.js","Routes/Protected/AddNewConfer/Components/Confers/components/SearchBar.js","Routes/Protected/AddNewConfer/Adapters/CofirmConfer.js","Routes/Protected/AddNewConfer/functions/HandleSubmitForm.js","Routes/Protected/AddNewConfer/Adapters/AddConfer.js","Routes/Protected/AddNewConfer/Components/Confers/Confers.js","Routes/Protected/AddNewConfer/AddNewConfer.js","Routes/Protected/AddNewConfer/Components/DesktopScrollUp/DesktopScrollUp.js","Routes/Protected/AddNewConfer/Adapters/ConferPriceCalculator.js","Routes/Protected/AddNewConfer/Hooks/useHandleConferPrice.js","Routes/Protected/AddNewConfer/Hooks/useHandleSessionStoreConfer.js","Routes/Protected/AddNewConfer/functions/HandleDecreaseCount.js","Routes/Protected/AddNewConfer/functions/HandleIncreaseCount.js","Routes/Protected/PatientList/Adapters/GetDetectionList.js","../node_modules/@mui/icons-material/esm/Add.js","../node_modules/@mui/icons-material/esm/AddTask.js","../node_modules/@mui/icons-material/esm/List.js","../node_modules/@mui/icons-material/esm/Remove.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst useOberseveElement = (ref) => {\r\n  const [inView, setInView] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver(([entry]) =>\r\n      setInView(entry.isIntersecting)\r\n    );\r\n    observer.observe(ref.current);\r\n    return () => {\r\n      observer.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  return inView;\r\n};\r\n\r\nexport default useOberseveElement;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nconst useCustomizedListRenderer = (\r\n  largeListArray,\r\n  additionalFn,\r\n  FnParams,\r\n  ApplyFilter,\r\n  confer,\r\n  resetTrigger,\r\n  indx = 50\r\n) => {\r\n  const [highestIndex, setHighestIndex] = useState(indx);\r\n  const [itemsToShow, setItemsToShow] = useState(highestIndex);\r\n  const [list, setList] = useState([]);\r\n  const [startY, setStartY] = useState(0);\r\n  const [activated, setActivated] = useState(false);\r\n  const [firstCall, setFirstCall] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (confer && largeListArray) {\r\n      let newHighestIndex = indx;\r\n      confer.forEach((item) => {\r\n        const index = largeListArray.findIndex(\r\n          (largeListItem) => largeListItem.ID === item.ID\r\n        );\r\n        if (index > newHighestIndex) {\r\n          newHighestIndex = index + 20;\r\n        }\r\n      });\r\n      setHighestIndex(newHighestIndex);\r\n      setItemsToShow(newHighestIndex);\r\n    }\r\n  }, [confer, largeListArray, resetTrigger]);\r\n\r\n  const handleScroll = (e) => {\r\n    if (e.deltaY > 0) {\r\n      setItemsToShow((prev) => prev + 1);\r\n    } else {\r\n      setItemsToShow((prev) => (prev > highestIndex ? prev - 1 : prev));\r\n    }\r\n  };\r\n\r\n  const handleTouchStart = (e) => {\r\n    setStartY(e.touches[0].clientY);\r\n  };\r\n\r\n  const handleTouchMove = (e) => {\r\n    const currentY = e.touches[0].clientY;\r\n    if (currentY > startY) {\r\n      setItemsToShow((prev) => prev + 1);\r\n    } else {\r\n      setItemsToShow((prev) => (prev > highestIndex ? prev - 1 : prev));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (largeListArray) {\r\n      let updatedList = largeListArray.slice(0, itemsToShow);\r\n      if (additionalFn) {\r\n        updatedList = additionalFn(updatedList, ...FnParams);\r\n      }\r\n      ApplyFilter\r\n        ? setList(ApplyFilter(largeListArray, FnParams))\r\n        : setList(updatedList);\r\n    }\r\n  }, [largeListArray, itemsToShow, FnParams, resetTrigger]);\r\n\r\n  useEffect(() => {\r\n    setActivated(true);\r\n    setFirstCall(false);\r\n  }, []);\r\n\r\n  return {\r\n    list,\r\n    handleTouchMove,\r\n    handleScroll,\r\n    handleTouchStart,\r\n    activated,\r\n    firstCall,\r\n  };\r\n};\r\n\r\nexport default useCustomizedListRenderer;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst useTopSelectedObject = (largeList, resetTrigger, setResetTrigger) => {\r\n  const [sortedList, setSortedList] = useState(largeList);\r\n  const [stack, setStack] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const newStack = [...stack];\r\n    largeList.forEach((item) => {\r\n      if (item.Count > 0 && !newStack.includes(item.ID)) {\r\n        newStack.push(item.ID);\r\n      } else if (item.Count === 0 && newStack.includes(item.ID)) {\r\n        newStack.splice(newStack.indexOf(item.ID), 1);\r\n      }\r\n    });\r\n    setStack(newStack);\r\n  }, [largeList]);\r\n\r\n  useEffect(() => {\r\n    if (resetTrigger > 0) {\r\n      setStack([]);\r\n    }\r\n  }, [resetTrigger, largeList]);\r\n  useEffect(() => {\r\n    if (stack.length === 0) setResetTrigger(0);\r\n  }, [stack]);\r\n\r\n  useEffect(() => {\r\n    const newSortedList = [...largeList];\r\n    stack.forEach((id, index) => {\r\n      const itemIndex = newSortedList.findIndex((item) => item.ID === id);\r\n      if (itemIndex !== -1) {\r\n        const [item] = newSortedList.splice(itemIndex, 1);\r\n        newSortedList.splice(index, 0, item);\r\n      }\r\n    });\r\n    setSortedList(newSortedList);\r\n  }, [stack]);\r\n\r\n  return sortedList;\r\n};\r\n\r\nexport default useTopSelectedObject;\r\n","import { ArabicToPersian } from \"utils/ConvertToPersianTextFromArabic\";\r\n\r\nexport const HandleSearchItem = (arr, search) => {\r\n  // Create a copy of the array to avoid modifying the original\r\n\r\n  const persianArr = arr?.map((confer) => ({\r\n    ...confer,\r\n    Name: ArabicToPersian(confer?.Name),\r\n  }));\r\n\r\n  let result = [...persianArr];\r\n\r\n  // Check if search is a number\r\n  let searchIsNumber = !isNaN(search);\r\n\r\n  // Define a function to calculate the score of each item\r\n  let getScore = (item) => {\r\n    let score = 0;\r\n    if (searchIsNumber && Number(item.Code) === Number(search)) {\r\n      score += 2;\r\n    }\r\n    if (item.Name.includes(search)) {\r\n      score += 1;\r\n    }\r\n    return score;\r\n  };\r\n\r\n  // Sort the array based on the score of each item\r\n  result.sort((a, b) => getScore(b) - getScore(a));\r\n\r\n  // Return the top ten results\r\n  return result.slice(0, 10);\r\n};\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport useTopSelectedObject from \"./useTopSelectedObject\";\r\nimport { HandleSearchItem } from \"../../functions/HandleSearchItem\";\r\nimport useDebounce from \"Global/Hooks/useDebounce/useDebounce\";\r\n\r\nconst useSortListByConditions = (\r\n  largeList = [],\r\n  seacrh,\r\n  resetTrigger,\r\n  setResetTrigger,\r\n  bringTop,\r\n  Llist\r\n) => {\r\n  const sortedList = useTopSelectedObject(\r\n    Llist,\r\n    resetTrigger,\r\n    setResetTrigger\r\n  );\r\n\r\n  const debouncedData = useDebounce(seacrh, 1);\r\n\r\n  const items = HandleSearchItem(Llist, debouncedData);\r\n\r\n  const memoItems = useMemo(() => items, [JSON.stringify(items)]);\r\n\r\n  const sortedWordList = useTopSelectedObject(\r\n    memoItems,\r\n    resetTrigger,\r\n    setResetTrigger\r\n  );\r\n\r\n  return seacrh.length === 0\r\n    ? bringTop\r\n      ? sortedList\r\n      : largeList\r\n    : bringTop\r\n    ? sortedWordList\r\n    : memoItems;\r\n};\r\n\r\nexport default useSortListByConditions;\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { TimeToMinutes } from 'utils/TimeToMinutes';\r\nimport { env } from 'env';\r\n\r\nexport const GetConferServices = async (\r\n  setGatheredData,\r\n  parameters\r\n) => {\r\n  const patient = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  );\r\n\r\n  console.log('the patient is =>', { patient, parameters });\r\n\r\n  parameters?.idInsurance &&\r\n    Post(\r\n      'POST',\r\n      `${process.env.REACT_APP_API_URL_API_GET_ERJASERVICE_LIST}`,\r\n      true,\r\n      {\r\n        dateHozoor:\r\n          patient?.DateHozoor || patient?.InsertDate,\r\n        idInsurance: parameters?.idInsurance,\r\n        Idperson: patient?.IdPerson || patient?.FldIdDoctor,\r\n        searchfield: '',\r\n        timeHozoor: TimeToMinutes(\r\n          patient?.TimeHozoor || patient?.InsertTime\r\n        ),\r\n      }\r\n    ).then((response) => {\r\n      if (response.data.resCode === 1) {\r\n        setGatheredData((prev) => ({\r\n          ...prev,\r\n          [parameters?.ObjName]:\r\n            response?.data?.Data?.InsuranceServiceList.map(\r\n              (el) => ({\r\n                ...el,\r\n                select: false,\r\n                InsurancePart: 0,\r\n                PatientPart: 0,\r\n                TotalPrice: 0,\r\n              })\r\n            ),\r\n        }));\r\n      } else\r\n        SwalAlert('error', response.data.resMessage, false);\r\n    });\r\n};\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const GetConferInfo = async (\r\n  setGatheredData,\r\n  parameters\r\n) => {\r\n  const patient = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  );\r\n\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_ADD_EDIT}`,\r\n    true,\r\n    {\r\n      idAppWorkList: patient?.Id || patient?.FldId,\r\n      idConfer: 0,\r\n      idPatient: patient?.IdPatient || patient?.FldId,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      setGatheredData((prev) => ({\r\n        ...prev,\r\n        [parameters.ObjName]: response.data.Data,\r\n      }));\r\n    } else\r\n      SwalAlert('error', response.data.resMessage, false);\r\n  });\r\n};\r\n","import useGatherDataFromApi from 'Global/Hooks/useGatherDataFromApi';\r\nimport useCustomizedListRenderer from './hooks/useCustomizedListRenderer';\r\nimport useSortListByConditions from './hooks/useSortListByConditions';\r\nimport React, {\r\n  useCallback,\r\n  useLayoutEffect,\r\n  useState,\r\n} from 'react';\r\nimport { createContext } from 'react';\r\nimport { FunctionArray } from './functions/FunctionArray';\r\nimport { ArabicToPersian } from 'utils/ConvertToPersianTextFromArabic';\r\nimport { useEffect } from 'react';\r\nimport { useRef } from 'react';\r\nimport { HandleReplaceStoredItems } from '../functions/HandleReplaceStoredItems';\r\nimport { GetCurrentDateInJalai } from 'utils/GetCurrentDateInJalai';\r\n\r\nimport { CalcByDetection } from '../Adapters/CalcByDetection';\r\n\r\nexport const ConferContext = createContext();\r\n\r\nexport const context = ({ children }) => {\r\n  const [bringTop, setBringTop] = useState(false); // toggle bringing selected items to the top\r\n\r\n  const [resetTrigger, setResetTrigger] = useState(0); // reset every sorted item when insurance changes\r\n  const savedInsurance = sessionStorage.getItem(\r\n    'saved_insurance'\r\n  );\r\n  const savedInsuranceRef = useRef(\r\n    savedInsurance !== 'undefined' &&\r\n      savedInsurance !== 'null'\r\n      ? JSON.parse(savedInsurance)\r\n      : null\r\n  );\r\n\r\n  const patient = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  ); // getting patient information from session storage\r\n  const saved_confers =\r\n    sessionStorage.getItem('saved_confers'); //getting saved confers from session storage\r\n  const saveItemsRef = useRef(JSON.parse(saved_confers)); //session saved items goes in ref to not update during lifecycle\r\n  const [dataString, setDataString] = useState(''); // ID count data string store\r\n  const [Insurance, setInsurance] = useState(\r\n    savedInsuranceRef.current\r\n      ? savedInsuranceRef.current[0].ItemValue\r\n      : patient?.IdInsurance || patient?.FldIdInsurance\r\n  ); // Id insurance state (select box)\r\n  const [InsuranceOff, setInsuranceOff] = useState(0); //insurance doctor state\r\n  const [search, setSearch] = useState(''); // search bar state\r\n  const [detection, setDetection] = useState();\r\n  const [detectionBaseList, setDetectionBaseList] =\r\n    useState({\r\n      enabled: false,\r\n      list: [],\r\n    });\r\n\r\n  // const HandleSearchDebounce = useCallback(\r\n  //   () => debounce((nextValue) => setSearchDebounce(nextValue), 3000),\r\n  //   []\r\n  // );\r\n\r\n  // useEffect(() => {\r\n  //   HandleSearchDebounce(search);\r\n  // }, [search]);\r\n\r\n  // note, the hook useEffect has changed to useMemo. in case of error, roll it back\r\n  const { gatheredData } = useGatherDataFromApi(\r\n    FunctionArray(Insurance)\r\n  ); // gathering API datas\r\n  const [largeList, setLargeList] = useState(\r\n    gatheredData?.Confer || []\r\n  ); //confer service list set in state to be changable\r\n\r\n  const [selected, setSelected] = useState(\r\n    saveItemsRef.current || []\r\n  ); //selected Items\r\n\r\n  console.log('->', { selected, detectionBaseList });\r\n\r\n  useEffect(() => {\r\n    if (\r\n      gatheredData?.Confer &&\r\n      gatheredData?.Confer?.length > 0\r\n    ) {\r\n      setLargeList(gatheredData?.Confer);\r\n    }\r\n  }, [gatheredData?.Confer]); // when confer services fetched, sets the state\r\n  const { list, handleTouchMove, handleScroll } =\r\n    useCustomizedListRenderer(\r\n      largeList,\r\n      undefined,\r\n      undefined,\r\n      undefined,\r\n      saveItemsRef.current,\r\n      resetTrigger,\r\n      25\r\n    ); // optimize list rendering\r\n\r\n  const [tmpList, setTmpList] = useState([]);\r\n\r\n  useEffect(() => {}, [JSON.stringify(largeList)]);\r\n\r\n  const sortedList = useSortListByConditions(\r\n    list,\r\n    search,\r\n    resetTrigger,\r\n    setResetTrigger,\r\n    bringTop,\r\n    largeList\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (selected.length > 0) {\r\n      sessionStorage.setItem(\r\n        'saved_confers',\r\n        JSON.stringify(selected)\r\n      );\r\n    } else {\r\n      sessionStorage.removeItem('saved_confers');\r\n    }\r\n  }, [selected]); //session save items\r\n\r\n  useEffect(() => {\r\n    if (saveItemsRef.current && gatheredData?.Confer) {\r\n      setLargeList(\r\n        HandleReplaceStoredItems(\r\n          gatheredData?.Confer,\r\n          saveItemsRef.current\r\n        )\r\n      );\r\n    }\r\n  }, [gatheredData?.Confer]); //set retereived session items\r\n\r\n  useEffect(() => {\r\n    const structuredData = selected\r\n      .map((element) => `${element.ID},${element.Count}`)\r\n      .join('#');\r\n    setDataString(structuredData);\r\n  }, [selected]); // create ID Count string for API\r\n\r\n  useEffect(() => {\r\n    if (resetTrigger > 0) {\r\n      saveItemsRef.current = [];\r\n      sessionStorage.removeItem('saved_confers');\r\n      setSelected([]);\r\n      setLargeList([]);\r\n    }\r\n  }, [resetTrigger]);\r\n\r\n  useEffect(() => {\r\n    if (gatheredData?.Confer?.length > 0) {\r\n      sessionStorage.setItem(\r\n        'saved_insurance',\r\n        JSON.stringify(\r\n          gatheredData?.InsuranceList?.filter(\r\n            (fl) => fl.ItemValue === Insurance\r\n          )\r\n        )\r\n      );\r\n    }\r\n  }, [gatheredData?.Confer]);\r\n\r\n  useEffect(() => {\r\n    if (detectionBaseList?.enabled) {\r\n      CalcByDetection(\r\n        Insurance,\r\n        detection,\r\n        setDetectionBaseList,\r\n        setBringTop,\r\n        setLargeList\r\n      );\r\n    }\r\n  }, [detectionBaseList?.enabled]);\r\n\r\n  useEffect(() => {\r\n    if (detectionBaseList.list) {\r\n      setSelected(detectionBaseList?.list);\r\n    }\r\n  }, [JSON.stringify(detectionBaseList.list)]);\r\n\r\n  // useEffect(() => {\r\n  //   if (detectionBaseList?.list?.length > 0) {\r\n  //     setBringTop(true);\r\n  //   }\r\n  // }, [JSON.stringify(detectionBaseList?.list)]);\r\n\r\n  // console.log('detectiondetection--->', detection);\r\n\r\n\r\n  console.log('dataString--->',dataString)\r\n\r\n  const contextObj = {\r\n    defaultinsurance: savedInsuranceRef.current\r\n      ? [\r\n          {\r\n            ItemValue: ArabicToPersian(\r\n              savedInsuranceRef.current[0].ItemContent\r\n            ),\r\n            ItemContent: ArabicToPersian(\r\n              savedInsuranceRef.current[0].ItemContent\r\n            ),\r\n          },\r\n        ]\r\n      : [\r\n          {\r\n            ItemValue: ArabicToPersian(\r\n              patient?.InsuranceName ||\r\n                patient?.NameInsurance\r\n            ),\r\n            ItemContent: ArabicToPersian(\r\n              patient?.InsuranceName ||\r\n                patient?.NameInsurance\r\n            ),\r\n          },\r\n        ],\r\n    insurance: gatheredData?.InsuranceList,\r\n    info: gatheredData?.Info,\r\n    services: gatheredData?.Confer,\r\n    set_insurance: setInsurance,\r\n    set_doctor_off: setInsuranceOff,\r\n    doctor_off: InsuranceOff,\r\n    set_search: setSearch,\r\n    optimized_services: sortedList,\r\n    scroll_handlers: [handleTouchMove, handleScroll],\r\n    set_largelist: setLargeList,\r\n    id_insurance: Insurance,\r\n    set_select: setSelected,\r\n    selected,\r\n    ApiReadyData: {\r\n      dateCreditNoteBook: GetCurrentDateInJalai(),\r\n      discountDoctor: InsuranceOff,\r\n      discountMarkaz: gatheredData?.Info?.DiscountMarkaz,\r\n      erjaId: 0,\r\n      idInsurance: Insurance,\r\n      insuranceNumber: '',\r\n      noPageNoteBook: '',\r\n      serviceListData: dataString,\r\n      idDiagnosis: detection,\r\n    },\r\n    set_reset: setResetTrigger,\r\n    reset: resetTrigger,\r\n    set_reset: setResetTrigger,\r\n    setBringTop,\r\n    setDetection,\r\n    detection,\r\n    detectionBaseList,\r\n    setDetectionBaseList,\r\n    search,\r\n    bringTop,\r\n  }; // objects that will be passed to context API\r\n\r\n  // console.log(\"detection->\", detection);\r\n  return (\r\n    <ConferContext.Provider value={contextObj}>\r\n      {children}\r\n    </ConferContext.Provider>\r\n  );\r\n};\r\n","import { GetInsuranceListPublic } from \"Global/Adapters/GetInsuranceListPublic\";\r\nimport { GetConferServices } from \"../../Adapters/GetConferServices\";\r\nimport { GetConferInfo } from \"../../Adapters/GetConferInfo\";\r\n\r\nexport const FunctionArray = (selectedInsurance) => {\r\n  const functions = [\r\n    {\r\n      functions: GetInsuranceListPublic,\r\n      parameters: \"InsuranceList\",\r\n    },\r\n    {\r\n      functions: GetConferServices,\r\n      parameters: {\r\n        ObjName: \"Confer\",\r\n        idInsurance: selectedInsurance,\r\n      },\r\n    },\r\n    {\r\n      functions: GetConferInfo,\r\n      parameters: {\r\n        ObjName: \"Info\",\r\n      },\r\n    },\r\n  ];\r\n  return functions;\r\n};\r\n","export const HandleReplaceStoredItems = (arr1, arr2) => {\r\n  const result = [...arr1];\r\n  arr2.forEach((obj2) => {\r\n    const index = result.findIndex((obj1) => obj1.ID === obj2.ID);\r\n    if (index !== -1) {\r\n      result[index] = obj2;\r\n    }\r\n  });\r\n  return result;\r\n};\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { TimeToMinutes } from 'utils/TimeToMinutes';\r\nimport { env } from 'env';\r\n\r\nexport const CalcByDetection = async (\r\n  idInsurance,\r\n  idDetection,\r\n  setDetectionBaseList,\r\n  setBringTop,\r\n  setLargeList\r\n) => {\r\n  setDetectionBaseList((prev) => ({\r\n    ...prev,\r\n    loading: true,\r\n  }));\r\n\r\n  const patient = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  );\r\n\r\n  console.log('patientpatient--->', patient);\r\n\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_CALC_SERVICE_BY_TASHKHIS}`,\r\n    true,\r\n    {\r\n      dateeHozoor: patient?.DateHozoor,\r\n      idInsurance: idInsurance,\r\n      idPerson: patient?.IdPerson,\r\n      timeHozoor: TimeToMinutes(patient?.TimeHozoor),\r\n      idTashkhis: idDetection,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      if (response?.data?.Data?.list?.length > 0) {\r\n        setLargeList((prev) => {\r\n          return prev.map((large_list_el) => {\r\n            if (\r\n              response?.data?.Data?.list?.findIndex(\r\n                (el) => el.ID === large_list_el.ID\r\n              ) > -1\r\n            ) {\r\n              return response?.data?.Data?.list[\r\n                response?.data?.Data?.list?.findIndex(\r\n                  (el) => el.ID === large_list_el.ID\r\n                )\r\n              ];\r\n            } else {\r\n              return large_list_el;\r\n            }\r\n          });\r\n        });\r\n        //        setBringTop(true);\r\n      }\r\n      setDetectionBaseList((prev) => ({\r\n        enabled: prev.enabled,\r\n        list: response.data.Data.list.map((el) => ({\r\n          ...el,\r\n          select: true,\r\n        })),\r\n      }));\r\n    } else {\r\n      SwalAlert('error', response.data.resMessage, false);\r\n      setDetectionBaseList({\r\n        enabled: false,\r\n        list: [],\r\n      });\r\n    }\r\n  });\r\n};\r\n","import EditableCustomizableSelect from 'Global/Components/EditableComponents/EditableCustomizableSelect/EditableCustomizableSelect';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport i18next from 'i18next';\r\nimport React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\n\r\nconst Insurance = ({ context, languageArray }) => {\r\n  const [insuranceValue, setInsuranceValue] = useState();\r\n  useEffect(() => {\r\n    if (insuranceValue?.ItemValue) {\r\n      context?.set_reset((prev) => prev + 1);\r\n    }\r\n  }, [insuranceValue]);\r\n\r\n  console.log('-------------------->', {\r\n    context: context?.insurance,\r\n    defaultinsurance: context?.defaultinsurance,\r\n  });\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <EditableCustomizableSelect\r\n        isSingle={true}\r\n        isEnglish={i18next.language === 'en'}\r\n        initialData={context?.defaultinsurance}\r\n        SelectableDataArray={context?.insurance}\r\n        label={FindLangKey(\r\n          'general-public-insurance-type',\r\n          languageArray\r\n        )}\r\n        onChange={context?.set_insurance}\r\n        GetSelectedValue={setInsuranceValue}\r\n        enableInitialOnchange={true}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Insurance;\r\n","import EditablePersianSupportTextField from \"Global/Components/EditableComponents/EditablePersianSupportTextField\";\r\nimport ReadOnlyTextField from \"Global/Components/ReadOnlyComponents/ReadOnlyTextField\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\nimport i18next from \"i18next\";\r\nimport React from \"react\";\r\n\r\nconst CenterOff = ({ context, languageArray }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <EditablePersianSupportTextField\r\n        label={FindLangKey(\"add-new-confer-input-off-markaz\", languageArray)}\r\n        isEnglish={i18next.language === \"en\"}\r\n        Initialvalue={context?.info?.DiscountMarkaz || 0}\r\n        disabled={true}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default CenterOff;\r\n","import EditablePersianSupportNumericTextField from \"Global/Components/EditableComponents/EditablePersianSupportNumericTextField\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\nimport i18next from \"i18next\";\r\nimport React from \"react\";\r\n\r\nconst DoctorOff = ({ context, languageArray }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <EditablePersianSupportNumericTextField\r\n        label={FindLangKey(\"add-new-confer-input-off-doctor\", languageArray)}\r\n        isEnglish={i18next.language === \"en\"}\r\n        value={context?.info?.DiscountDoctor || 0}\r\n        onChange={context?.set_doctor_off}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DoctorOff;\r\n","import CustomizableSelect from 'Global/Components/CommonComponents/CustomizableSelect/CustomizableSelect';\r\nimport EditableCustomizableSelect from 'Global/Components/EditableComponents/EditableCustomizableSelect/EditableCustomizableSelect';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport GetPostResponse from 'Global/Functions/GetPostResponse/GetPostResponse';\r\nimport { ConferContext } from 'Routes/Protected/AddNewConfer/context/context';\r\nimport { GetDetectionList } from 'Routes/Protected/PatientList/Adapters/GetDetectionList';\r\nimport { env } from 'env';\r\nimport React, {\r\n  useContext,\r\n  useEffect,\r\n  useState,\r\n} from 'react';\r\nimport { ArabicToPersian } from 'utils/ConvertToPersianTextFromArabic';\r\n\r\nconst DetectionList = () => {\r\n  const context = useContext(ConferContext);\r\n\r\n  const [data, setData] = useState(null);\r\n\r\n  const patient = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  );\r\n\r\n  const detections_msg = FindLangKey(\r\n    'general-public-label-diagnose'\r\n  );\r\n\r\n  const [detectionList, setDetectionList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    GetDetectionList(setDetectionList, 'detectionList');\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      const item = detectionList?.detectionList?.filter(\r\n        (el) => el.ItemContent === data?.ItemContent\r\n      )[0];\r\n\r\n      context?.setDetection(item?.ItemValue);\r\n    }\r\n  }, [data, JSON.stringify(detectionList)]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {patient?.NameDiagnosis ? (\r\n        <EditableCustomizableSelect\r\n          isSingle={true}\r\n          SelectableDataArray={detectionList?.detectionList}\r\n          label={detections_msg}\r\n          initialData={[\r\n            {\r\n              ItemValue: ArabicToPersian(\r\n                patient?.NameDiagnosis\r\n              ),\r\n              ItemContent: ArabicToPersian(\r\n                patient?.NameDiagnosis\r\n              ),\r\n            },\r\n          ]}\r\n          enableInitialOnchange={true}\r\n          GetSelectedValue={setData}\r\n        />\r\n      ) : (\r\n        <CustomizableSelect\r\n          isSingle={true}\r\n          SelectableDataArray={detectionList?.detectionList}\r\n          label={detections_msg}\r\n          enableInitialOnchange={true}\r\n          GetSelectedValue={setData}\r\n        />\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DetectionList;\r\n","import React from 'react';\r\nimport { Stack } from '@mui/material';\r\nimport { useContext } from 'react';\r\nimport { ConferContext } from '../../context/context';\r\nimport Insurance from './components/Insurance';\r\nimport CenterOff from './components/CenterOff';\r\nimport DoctorOff from './components/DoctorOff';\r\n\r\nimport { GlobalContext } from 'Global/Context/GlobalContextProvider';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport DetectionList from './components/DetectionList';\r\n\r\nconst Form = () => {\r\n  const context = useContext(ConferContext);\r\n  const languageArray =\r\n    useContext(GlobalContext)?.LanguageArray;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <form\r\n        onSubmit={(event) => {\r\n          event.preventDefault();\r\n        }}\r\n      >\r\n        <Stack spacing={'.5em'}>\r\n          <Insurance\r\n            context={context}\r\n            languageArray={languageArray}\r\n          />\r\n          <DetectionList context={context} />\r\n          {/* <DateCredit languageArray={languageArray} /> */}\r\n          <Stack direction=\"row-reverse\" gap=\".5em\">\r\n            <CenterOff\r\n              context={context}\r\n              languageArray={languageArray}\r\n            />\r\n            <DoctorOff\r\n              context={context}\r\n              languageArray={languageArray}\r\n            />\r\n          </Stack>\r\n        </Stack>\r\n      </form>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"frameGradient\":\"Confer_general_style_frameGradient__H07gJ\",\"ConferGeneral\":\"Confer_general_style_ConferGeneral__R1i4a\",\"ConferGeneral_select\":\"Confer_general_style_ConferGeneral_select__zxC1W\",\"ConferName\":\"Confer_general_style_ConferName__WFF4A\",\"confersContainer\":\"Confer_general_style_confersContainer__ASVEs\"};","import React from \"react\";\r\nimport { Stack } from \"@mui/material\";\r\nimport { ArabicToPersian } from \"utils/ConvertToPersianTextFromArabic\";\r\nimport style from \"../../../style/Confer.general.style.module.scss\";\r\nconst ConferName = ({ confer }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <Stack>\r\n        <p className={style.ConferName}>{ArabicToPersian(confer?.Name)}</p>\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ConferName;\r\n","import React from 'react';\r\nimport { Add, Remove } from '@mui/icons-material';\r\nimport { IconButton, Stack } from '@mui/material';\r\nimport { HandleIncreaseCount } from 'Routes/Protected/AddNewConfer/functions/HandleIncreaseCount';\r\nimport { HandleDecreaseCount } from 'Routes/Protected/AddNewConfer/functions/HandleDecreaseCount';\r\nimport { useState } from 'react';\r\nimport { themeColors } from 'Global/JsxThemeColor/JsxThemeColor';\r\n\r\nconst ConferControls = ({ context, confer }) => {\r\n  const [debounce, setDebounce] = useState(false);\r\n\r\n  const { setBringTop } = context;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Stack alignItems=\"center\">\r\n        <p\r\n          style={{\r\n            fontSize: '0.9em',\r\n            color: `${themeColors.ColorPrimary}`,\r\n          }}\r\n        >\r\n          {confer?.ID}\r\n        </p>\r\n        <IconButton\r\n          onClick={(event) => {\r\n            HandleIncreaseCount(\r\n              context,\r\n              confer,\r\n              setDebounce\r\n            );\r\n            setBringTop(false);\r\n          }}\r\n          disabled={debounce}\r\n        >\r\n          <Add\r\n            sx={{\r\n              fill: `${themeColors.ColorPrimary} !important`,\r\n            }}\r\n          />\r\n        </IconButton>\r\n\r\n        <p>{confer?.Count}</p>\r\n        <IconButton\r\n          onClick={(event) => {\r\n            HandleDecreaseCount(\r\n              context,\r\n              confer,\r\n              setDebounce\r\n            );\r\n            setBringTop(false);\r\n          }}\r\n          disabled={debounce || confer.Count === 0}\r\n        >\r\n          <Remove\r\n            sx={{\r\n              fill: `${themeColors.ColorPrimary} !important`,\r\n            }}\r\n          />\r\n        </IconButton>\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ConferControls;\r\n","import React from \"react\";\r\nimport useHandleConferPrice from \"Routes/Protected/AddNewConfer/Hooks/useHandleConferPrice\";\r\nimport i18next from \"i18next\";\r\nimport { Stack } from \"@mui/material\";\r\nimport { Price3DigitSplitter } from \"utils/Price3DigitSplitter\";\r\nimport { useContext } from \"react\";\r\nimport { GlobalContext } from \"Global/Context/GlobalContextProvider\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\n\r\nconst ConferPrice = ({ confer, context }) => {\r\n  useHandleConferPrice(confer, context);\r\n  const languageArray = useContext(GlobalContext)?.LanguageArray;\r\n  return (\r\n    <React.Fragment>\r\n      <Stack width=\"100%\">\r\n        <hr />\r\n        <Stack alignSelf=\"end\" width=\"60%\">\r\n          <Stack direction=\"row-reverse\" justifyContent=\"space-between\">\r\n            <p>\r\n              {FindLangKey(\r\n                \"confer-add-edit-common-label-patient-payable\",\r\n                languageArray\r\n              )}\r\n              :\r\n            </p>\r\n            <p>{Price3DigitSplitter(confer?.PatientPart)}</p>\r\n          </Stack>\r\n          <Stack\r\n            alignItems=\"center\"\r\n            direction=\"row-reverse\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <p>\r\n              {FindLangKey(\r\n                \"confer-add-edit-common-label-insurance-payable\",\r\n                languageArray\r\n              )}\r\n              :\r\n            </p>\r\n            <p>{Price3DigitSplitter(confer?.InsurancePart)}</p>\r\n          </Stack>\r\n          <Stack\r\n            alignItems=\"center\"\r\n            direction=\"row-reverse\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <p>\r\n              {FindLangKey(\r\n                \"confer-add-edit-common-label-total-price\",\r\n                languageArray\r\n              )}\r\n              :\r\n            </p>\r\n            <p>{Price3DigitSplitter(confer?.TotalPrice)}</p>\r\n          </Stack>\r\n        </Stack>\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ConferPrice;\r\n","import { Stack } from '@mui/material';\r\nimport React from 'react';\r\nimport style from '../../../style/Confer.general.style.module.scss';\r\nimport ConferName from './ConferName';\r\nimport ConferControls from './ConferControls';\r\nimport ConferPrice from './ConferPrice';\r\nimport useHandleSessionStoreConfer from 'Routes/Protected/AddNewConfer/Hooks/useHandleSessionStoreConfer';\r\nconst Confer = ({ confer, context }) => {\r\n  useHandleSessionStoreConfer(confer, context); //adds removes or updates confers for session storage and also for selected\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Stack\r\n        className={\r\n          confer?.Count > 0\r\n            ? style.ConferGeneral_select\r\n            : style.ConferGeneral //show thicker border if selected\r\n        }\r\n        direction=\"row-reverse\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        sx={{\r\n          borderColor: confer.select && 'gray !important',\r\n        }} // sessioned items will be in gray\r\n      >\r\n        <Stack alignItems=\"flex-end\" width=\"100%\">\r\n          {/* showing name of the confer */}\r\n          <ConferName confer={confer} />\r\n          {confer?.Count > 0 ? (\r\n            <ConferPrice\r\n              confer={confer}\r\n              context={context}\r\n            /> //showing price of the confer if selected\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </Stack>\r\n        {/* showing increase or decrease quantity buttons */}\r\n        <ConferControls context={context} confer={confer} />\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Confer;\r\n","import React, { memo } from \"react\";\r\nimport Confer from \"./Confer\";\r\nimport { Box, CircularProgress, Stack } from \"@mui/material\";\r\nimport style from \"../../../style/Confer.general.style.module.scss\";\r\nconst ConferMap = ({ context }) => {\r\n  return (\r\n    <React.Fragment>\r\n      {context?.services && // if services fetched and optimized list is ready, show confers otherwise show loading circle\r\n      context?.optimized_services &&\r\n      context?.optimized_services?.length > 0 ? (\r\n        <React.Fragment>\r\n          <div\r\n            onWheel={context?.scroll_handlers[1]}\r\n            onTouchMove={context?.scroll_handlers[0]}\r\n            style={{ transition: \"all .3s ease\" }} // div with scroll and touch event listener to show more or less items\r\n          >\r\n            <Box\r\n              sx={{ mt: \".5em\", transition: \"all .5s ease\" }}\r\n              className={style.confersContainer}\r\n            >\r\n              {context?.optimized_services?.map(\r\n                (\r\n                  confer //mapped confers\r\n                ) => (\r\n                  <Confer confer={confer} key={confer.ID} context={context} />\r\n                )\r\n              )}\r\n            </Box>\r\n          </div>\r\n        </React.Fragment>\r\n      ) : (\r\n        // loading circle\r\n        <Stack marginTop=\"1em\" width=\"100%\" alignItems=\"center\">\r\n          <CircularProgress />\r\n        </Stack>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default memo(ConferMap);\r\n","import i18next from \"i18next\";\r\nimport React from \"react\";\r\nimport { Search } from \"@mui/icons-material\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\nimport EditablePersianSupportTextField from \"Global/Components/EditableComponents/EditablePersianSupportTextField\";\r\n\r\nconst SearchBar = ({ context }) => {\r\n  const label = FindLangKey(\"general-public-search\");\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"confer-search-color-layout\">\r\n        <EditablePersianSupportTextField\r\n          label={label}\r\n          isEnglish={i18next.language === \"en\"}\r\n          onChange={context?.set_search}\r\n          Initialvalue={context?.search}\r\n          customOnChange={(event) => {\r\n            if (event.target.value.length > 0) {\r\n              context?.setBringTop(false);\r\n            }\r\n          }}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const ConfirmConfer = async (\r\n  idConfer,\r\n  setForceRender\r\n) => {\r\n  const Pateint = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  );\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_SUBMIT_TRANSACT}`,\r\n    true,\r\n    {\r\n      idConfer: parseInt(idConfer),\r\n      idPerson: Pateint?.IdPerson || Pateint?.FldIdDoctor,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      SwalAlert('success', response.data.resMessage, false);\r\n      setForceRender && setForceRender((prev) => !prev);\r\n    } else {\r\n      SwalAlert('error', response.data.resMessage, false);\r\n      setForceRender && setForceRender((prev) => !prev);\r\n    }\r\n  });\r\n};\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport i18next from 'i18next';\r\nimport { AddConfer } from '../Adapters/AddConfer';\r\n\r\nexport const HandleSubmitForm = (\r\n  ApiData,\r\n  info,\r\n  navigate,\r\n  confirmMsg,\r\n  confirmAdd,\r\n  noItemAlert\r\n) => {\r\n  console.log('ApiDataApiData--->', ApiData);\r\n\r\n  if (ApiData?.serviceListData?.length > 0) {\r\n    SwalAlert('warning', confirmAdd, true, () => {\r\n      AddConfer(ApiData, navigate, confirmMsg);\r\n    });\r\n  } else {\r\n    SwalAlert('warning', noItemAlert, false);\r\n  }\r\n};\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\n\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { ConfirmConfer } from './CofirmConfer';\r\nimport { env } from 'env';\r\nimport { TimeToMinutes } from 'utils/TimeToMinutes';\r\n\r\nexport const AddConfer = async (\r\n  data,\r\n  navigate,\r\n  confirmMsg\r\n) => {\r\n  const patient = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  );\r\n\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_ADD_EDIT_CONFER_PATIENT}`,\r\n    true,\r\n    {\r\n      ...data,\r\n      idPatient: patient?.IdPatient,\r\n      idAppWorkList: patient?.Id,\r\n      Idperson: patient?.IdPerson,\r\n      timeHozoor: TimeToMinutes(patient?.TimeHozoor),\r\n      dateHozoor: patient?.DateHozoor,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      SwalAlert('success', response.data.resMessage, false);\r\n    } else\r\n      SwalAlert('error', response.data.resMessage, false);\r\n    setTimeout(() => {\r\n      navigate(-1);\r\n    }, 600);\r\n  });\r\n};\r\n","import React, { useRef } from 'react';\r\nimport { useContext } from 'react';\r\nimport { ConferContext } from '../../context/context';\r\nimport {\r\n  Stack,\r\n  Button,\r\n  LinearProgress,\r\n  IconButton,\r\n} from '@mui/material';\r\nimport ConferMap from './components/ConferMap';\r\nimport SearchBar from './components/SearchBar';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport {\r\n  AddTask,\r\n  KeyboardDoubleArrowUp,\r\n  List,\r\n} from '@mui/icons-material';\r\nimport { themeColors } from 'Global/JsxThemeColor/JsxThemeColor';\r\nimport AccessControl from 'Global/security/AccessControl';\r\nimport { GlobalContext } from 'Global/Context/GlobalContextProvider';\r\nimport { HandleSubmitForm } from '../../functions/HandleSubmitForm';\r\nimport useOberseveElement from 'Global/Hooks/useObserverElement/useOberseveElement';\r\nimport DesktopScrollUp from '../DesktopScrollUp/DesktopScrollUp';\r\n\r\nconst Confers = () => {\r\n  const context = useContext(ConferContext); // data that comes from context API\r\n  const GlobalConstants = useContext(GlobalContext);\r\n  const scrollTop_Ref = useRef(null);\r\n  const inView = useOberseveElement(scrollTop_Ref);\r\n\r\n  const showItemsBtn = FindLangKey(\r\n    'add-edit-confer-show-items'\r\n  );\r\n\r\n  const selectItemsOnDetection_msg = FindLangKey(\r\n    'add-confer-btn-label-select-services-by-detection'\r\n  );\r\n\r\n  const confirmMsg = FindLangKey(\r\n    'add-new-alert-confirm-confer'\r\n  );\r\n  const confirmAdd = FindLangKey(\r\n    'add-new-alert-confirm-adding-confer'\r\n  );\r\n  const noItemAlert = FindLangKey(\r\n    'add-new-alert-no-items-selected'\r\n  );\r\n\r\n  const setBringTop = context?.setBringTop;\r\n  const bringTop = context?.bringTop;\r\n  const detectionBaseList =\r\n    context?.detectionBaseList?.enabled;\r\n\r\n  const Handle_Trigger_Submit = () => {\r\n    HandleSubmitForm(\r\n      context?.ApiReadyData,\r\n      context?.info,\r\n      GlobalConstants.navigate,\r\n      confirmMsg,\r\n      confirmAdd,\r\n      noItemAlert\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Stack>\r\n        <Button\r\n          variant=\"outlined\"\r\n          fullWidth\r\n          sx={{\r\n            mb: '.5em',\r\n            minHeight: '40px',\r\n            color: detectionBaseList\r\n              ? `${themeColors.ColorSecondary} !important`\r\n              : `${themeColors.ColorPrimary} !important`,\r\n            backgroundColor: detectionBaseList\r\n              ? `${themeColors.ColorPrimary} !important`\r\n              : `${themeColors.ColorSecondary} !important`,\r\n          }}\r\n          color=\"colorPrimer\"\r\n          startIcon={<AddTask />}\r\n          onClick={() => {\r\n            context?.setDetectionBaseList((prev) => ({\r\n              ...prev,\r\n              enabled: !prev.enabled,\r\n            }));\r\n            setBringTop((prev) => !prev);\r\n          }}\r\n        >\r\n          {selectItemsOnDetection_msg}\r\n        </Button>\r\n        {/* show select items on top  */}\r\n\r\n        <Button\r\n          variant=\"outlined\"\r\n          fullWidth\r\n          sx={{\r\n            mb: '.5em',\r\n            minHeight: '40px',\r\n            color: bringTop\r\n              ? `${themeColors.ColorSecondary} !important`\r\n              : `${themeColors.ColorPrimary} !important`,\r\n            backgroundColor: bringTop\r\n              ? `${themeColors.ColorPrimary} !important`\r\n              : `${themeColors.ColorSecondary} !important`,\r\n          }}\r\n          color=\"colorPrimer\"\r\n          startIcon={<List />}\r\n          onClick={() => {\r\n            setBringTop((prev) => !prev);\r\n            context?.set_search('');\r\n          }}\r\n        >\r\n          {showItemsBtn}\r\n        </Button>\r\n        {context?.detectionBaseList?.loading ? (\r\n          <LinearProgress sx={{ my: '.5em' }} />\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {/* searching for items in confers */}\r\n        <SearchBar context={context} />\r\n        <div style={{ marginTop: '.5em' }}>\r\n          <Button\r\n            disabled={AccessControl(\r\n              'add-confer-operation-add-confer'\r\n            )}\r\n            variant=\"contained\"\r\n            fullWidth\r\n            sx={{\r\n              color: `${themeColors.ColorPrimary} !important`,\r\n            }}\r\n            onClick={Handle_Trigger_Submit}\r\n            ref={scrollTop_Ref}\r\n          >\r\n            {FindLangKey('general-public-add-new-confer')}\r\n          </Button>\r\n        </div>\r\n\r\n        <DesktopScrollUp\r\n          inView={inView}\r\n          scrollRef={scrollTop_Ref}\r\n        />\r\n\r\n        {/* parent component of mapped Confers */}\r\n        <ConferMap context={context} />\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Confers;\r\n","import React, { useRef } from 'react';\r\nimport { Container, Stack } from '@mui/material';\r\nimport { context as ContextProvider } from './context/context';\r\nimport Form from './Components/Form/Form';\r\nimport Confers from './Components/Confers/Confers';\r\nimport { useEffect } from 'react';\r\nconst AddNewConfer = () => {\r\n  // entry point. context provider, form and confers\r\n  useEffect(() => {\r\n    return () => {\r\n      sessionStorage.removeItem('saved_confers');\r\n      sessionStorage.removeItem('saved_insurance');\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ContextProvider>\r\n        <Container sx={{ mt: '1em' }} maxWidth=\"md\">\r\n          <Stack gap={'.5em'}>\r\n            <Form />\r\n            <Confers />\r\n          </Stack>\r\n        </Container>\r\n      </ContextProvider>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddNewConfer;\r\n","import { KeyboardDoubleArrowUp } from '@mui/icons-material';\r\nimport { IconButton } from '@mui/material';\r\nimport useCheckScreenWidth from 'Global/Hooks/useCheckScreenWidth';\r\nimport { themeColors } from 'Global/JsxThemeColor/JsxThemeColor';\r\n\r\nimport React from 'react';\r\n\r\nconst DesktopScrollUp = ({ inView, scrollRef }) => {\r\n  const screenWidth = useCheckScreenWidth(); // 1024 for Desktop\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!inView && screenWidth > 1024 ? (\r\n        <IconButton\r\n          sx={{\r\n            alignSelf: 'center',\r\n            position: 'fixed',\r\n            backgroundColor: `${themeColors.ColorPrimary}`,\r\n          }}\r\n          onClick={() => {\r\n            scrollRef.current.scrollIntoView({\r\n              behavior: 'smooth',\r\n            });\r\n          }}\r\n        >\r\n          <KeyboardDoubleArrowUp\r\n            color=\"colorSecondar\"\r\n            sx={{\r\n              fontSize: '.7em',\r\n            }}\r\n          />\r\n        </IconButton>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DesktopScrollUp;\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { TimeToMinutes } from 'utils/TimeToMinutes';\r\nimport { env } from 'env';\r\n\r\nexport const ConferPriceCalculator = async (\r\n  idInsurance,\r\n  serviceID,\r\n  count,\r\n  SetPriceTag,\r\n  confer\r\n) => {\r\n  const patient = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  );\r\n\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_CALC_SERVICE_PRICE}`,\r\n    true,\r\n    {\r\n      dateeHozoor:\r\n        patient?.DateHozoor || patient?.InsertDate,\r\n      idInsurance: idInsurance,\r\n      idPerson: patient?.IdPerson || patient?.FldIdDoctor,\r\n      serviceID: serviceID,\r\n      timeHozoor: TimeToMinutes(\r\n        patient?.TimeHozoor || patient?.InsertTime\r\n      ),\r\n      count,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      const price = response.data.Data.list[0];\r\n      SetPriceTag((prev) =>\r\n        prev.map((element) =>\r\n          element.ID === confer.ID\r\n            ? {\r\n                ...element,\r\n                InsurancePart: price?.InsurancePart,\r\n                PatientPart: price?.PatientPart,\r\n                TotalPrice: price?.TotalPrice,\r\n              }\r\n            : element\r\n        )\r\n      );\r\n    } else\r\n      SwalAlert('error', response.data.resMessage, false);\r\n  });\r\n};\r\n","import React from \"react\";\r\nimport { ConferPriceCalculator } from \"../Adapters/ConferPriceCalculator\";\r\n\r\nconst useHandleConferPrice = (confer, context) => {\r\n  React.useEffect(() => {\r\n    if (confer?.Count > 0) {\r\n      ConferPriceCalculator(\r\n        context?.id_insurance,\r\n        confer.ID,\r\n        confer.Count,\r\n        context?.set_largelist,\r\n        confer\r\n      );\r\n    }\r\n  }, [confer?.Count]);\r\n};\r\n\r\nexport default useHandleConferPrice;\r\n","import React, { useEffect } from \"react\";\r\n\r\nconst useHandleSessionStoreConfer = (confer, context) => {\r\n  useEffect(() => {\r\n    if (confer.Count > 0) {\r\n      if (context?.selected?.findIndex((obj) => obj.ID === confer.ID) === -1) {\r\n        context.set_select((prev) => [...prev, { ...confer, select: true }]);\r\n      } else {\r\n        context.set_select((prev) =>\r\n          prev.map((element) =>\r\n            element.ID === confer.ID ? { ...confer, select: true } : element\r\n          )\r\n        );\r\n      }\r\n    } else {\r\n      if (confer.Count === 0) {\r\n        if (\r\n          context?.selected?.findIndex((obj) => obj.ID === confer.ID) !== -1\r\n        ) {\r\n          context.set_select((prev) =>\r\n            prev.filter((fl) => fl.ID !== confer.ID)\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }, [confer]);\r\n};\r\n\r\nexport default useHandleSessionStoreConfer;\r\n","export const HandleDecreaseCount = (context, confer, setDebounce) => {\r\n  setDebounce(true);\r\n  setTimeout(() => {\r\n    setDebounce(false);\r\n  }, 650);\r\n  if (confer.Count > 0) {\r\n    context?.set_largelist((prev) =>\r\n      prev.map((element) =>\r\n        element.ID === confer.ID\r\n          ? {\r\n              ...element,\r\n              Count: element.Count - 1,\r\n            }\r\n          : element\r\n      )\r\n    );\r\n  }\r\n};\r\n","export const HandleIncreaseCount = (context, confer, setDebounce) => {\r\n  setDebounce(true);\r\n  setTimeout(() => {\r\n    setDebounce(false);\r\n  }, 650);\r\n  context?.set_largelist((prev) =>\r\n    prev.map((element) =>\r\n      element.ID === confer.ID\r\n        ? {\r\n            ...element,\r\n            Count: element.Count + 1,\r\n          }\r\n        : element\r\n    )\r\n  );\r\n};\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { ArabicToPersian } from 'utils/ConvertToPersianTextFromArabic';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const GetDetectionList = async (\r\n  setDetectionList,\r\n  objName\r\n) => {\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_GET_TASHKHIS_LIST}`,\r\n    true,\r\n    {\r\n      idSystem: 900,\r\n      clause: '',\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1)\r\n      setDetectionList({\r\n        [objName]: response.data.Data.list.map((elemet) => {\r\n          return {\r\n            ItemValue: elemet.Id,\r\n            ItemContent: ArabicToPersian(elemet.Name),\r\n          };\r\n        }),\r\n      });\r\n    else\r\n      SwalAlert('error', response.data.resMessage, false);\r\n  });\r\n};\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M22 5.18 10.59 16.6l-4.24-4.24 1.41-1.41 2.83 2.83 10-10L22 5.18zM12 20c-4.41 0-8-3.59-8-8s3.59-8 8-8c1.57 0 3.04.46 4.28 1.25l1.45-1.45C16.1 2.67 14.13 2 12 2 6.48 2 2 6.48 2 12s4.48 10 10 10c1.73 0 3.36-.44 4.78-1.22l-1.5-1.5c-1 .46-2.11.72-3.28.72zm7-5h-3v2h3v3h2v-3h3v-2h-3v-3h-2v3z\"\n}), 'AddTask');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 13h2v-2H3v2zm0 4h2v-2H3v2zm0-8h2V7H3v2zm4 4h14v-2H7v2zm0 4h14v-2H7v2zM7 7v2h14V7H7z\"\n}), 'List');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 13H5v-2h14v2z\"\n}), 'Remove');"],"names":["ref","inView","setInView","useState","useEffect","observer","IntersectionObserver","_ref","entry","isIntersecting","observe","current","disconnect","largeListArray","additionalFn","FnParams","ApplyFilter","confer","resetTrigger","indx","arguments","length","undefined","highestIndex","setHighestIndex","itemsToShow","setItemsToShow","list","setList","startY","setStartY","activated","setActivated","firstCall","setFirstCall","newHighestIndex","forEach","item","index","findIndex","largeListItem","ID","handleScroll","e","deltaY","prev","handleTouchStart","touches","clientY","handleTouchMove","currentY","updatedList","slice","useTopSelectedObject","largeList","setResetTrigger","sortedList","setSortedList","stack","setStack","newStack","Count","includes","push","splice","indexOf","newSortedList","id","itemIndex","HandleSearchItem","arr","search","result","map","Name","ArabicToPersian","searchIsNumber","isNaN","getScore","score","Number","Code","sort","a","b","seacrh","bringTop","Llist","debouncedData","useDebounce","items","memoItems","useMemo","JSON","stringify","sortedWordList","GetConferServices","async","setGatheredData","parameters","patient","parse","sessionStorage","getItem","console","log","idInsurance","Post","concat","process","dateHozoor","DateHozoor","InsertDate","Idperson","IdPerson","FldIdDoctor","searchfield","timeHozoor","TimeToMinutes","TimeHozoor","InsertTime","then","response","data","resCode","_response$data","_response$data$Data","ObjName","Data","InsuranceServiceList","el","select","InsurancePart","PatientPart","TotalPrice","SwalAlert","resMessage","GetConferInfo","idAppWorkList","Id","FldId","idConfer","idPatient","IdPatient","ConferContext","createContext","context","_gatheredData$Info","children","setBringTop","savedInsurance","savedInsuranceRef","useRef","saved_confers","saveItemsRef","dataString","setDataString","Insurance","setInsurance","ItemValue","IdInsurance","FldIdInsurance","InsuranceOff","setInsuranceOff","setSearch","detection","setDetection","detectionBaseList","setDetectionBaseList","enabled","gatheredData","useGatherDataFromApi","selectedInsurance","functions","GetInsuranceListPublic","setLargeList","Confer","selected","setSelected","_gatheredData$Confer","useCustomizedListRenderer","tmpList","setTmpList","useSortListByConditions","setItem","removeItem","HandleReplaceStoredItems","arr1","arr2","obj2","obj1","structuredData","element","join","_gatheredData$Confer2","_gatheredData$Insuran","InsuranceList","filter","fl","idDetection","loading","dateeHozoor","idPerson","idTashkhis","_response$data$Data$l","large_list_el","_response$data2","_response$data2$Data","_response$data2$Data$","_response$data3","_response$data3$Data","_response$data4","_response$data4$Data","_response$data4$Data$","CalcByDetection","contextObj","defaultinsurance","ItemContent","InsuranceName","NameInsurance","insurance","info","Info","services","set_insurance","set_doctor_off","doctor_off","set_search","optimized_services","scroll_handlers","set_largelist","id_insurance","set_select","ApiReadyData","dateCreditNoteBook","GetCurrentDateInJalai","discountDoctor","discountMarkaz","DiscountMarkaz","erjaId","insuranceNumber","noPageNoteBook","serviceListData","idDiagnosis","set_reset","reset","_jsx","Provider","value","languageArray","insuranceValue","setInsuranceValue","React","EditableCustomizableSelect","isSingle","isEnglish","i18next","initialData","SelectableDataArray","label","FindLangKey","onChange","GetSelectedValue","enableInitialOnchange","_context$info","EditablePersianSupportTextField","Initialvalue","disabled","EditablePersianSupportNumericTextField","DiscountDoctor","DetectionList","useContext","setData","detections_msg","detectionList","setDetectionList","GetDetectionList","_detectionList$detect","NameDiagnosis","CustomizableSelect","Form","_useContext","GlobalContext","LanguageArray","onSubmit","event","preventDefault","_jsxs","Stack","spacing","direction","gap","CenterOff","DoctorOff","className","style","debounce","setDebounce","alignItems","fontSize","color","themeColors","IconButton","onClick","HandleIncreaseCount","Add","sx","fill","HandleDecreaseCount","Remove","useHandleConferPrice","width","alignSelf","justifyContent","Price3DigitSplitter","useHandleSessionStoreConfer","borderColor","ConferName","ConferPrice","_Fragment","ConferControls","ConferMap","_context$optimized_se","_context$optimized_se2","onWheel","onTouchMove","transition","Box","mt","marginTop","CircularProgress","memo","customOnChange","target","HandleSubmitForm","ApiData","navigate","confirmMsg","confirmAdd","noItemAlert","_ApiData$serviceListD","setTimeout","AddConfer","Confers","_context$detectionBas","_context$detectionBas2","GlobalConstants","scrollTop_Ref","useOberseveElement","showItemsBtn","selectItemsOnDetection_msg","Button","variant","fullWidth","mb","minHeight","backgroundColor","startIcon","AddTask","List","LinearProgress","my","SearchBar","AccessControl","Handle_Trigger_Submit","DesktopScrollUp","scrollRef","AddNewConfer","ContextProvider","Container","maxWidth","screenWidth","useCheckScreenWidth","position","scrollIntoView","behavior","KeyboardDoubleArrowUp","serviceID","count","SetPriceTag","price","ConferPriceCalculator","_context$selected","_context$selected2","obj","objName","idSystem","clause","elemet","createSvgIcon","d"],"sourceRoot":""}