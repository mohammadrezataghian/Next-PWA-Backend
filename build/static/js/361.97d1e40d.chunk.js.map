{"version":3,"file":"static/js/361.97d1e40d.chunk.js","mappings":"wLAAO,MAAMA,EAA8B,CACzCC,YAAa,GACbC,YAAa,I,qCCAR,MAAMC,EAA2BA,CACtCC,EACAC,IACG,CAeH,CACEC,SACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAuB,CACtBC,OAAOC,EAAAA,EAAAA,GACL,qCACAN,GAEFO,UAA8B,QAAf,OAAJN,QAAI,IAAJA,OAAI,EAAJA,EAAMO,UACjBC,YAAY,IAGhBC,KAAM,cACNC,UAAU,GAEZ,CACET,SACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAuB,CACtBC,OAAOC,EAAAA,EAAAA,GACL,gCACAN,GAEFO,UAA8B,QAAf,OAAJN,QAAI,IAAJA,OAAI,EAAJA,EAAMO,UACjBC,YAAY,IAGhBC,KAAM,iBACNC,UAAU,I,kFChCd,MAiDA,EAjDuBC,KAAO,IAADC,EAC3B,MAAM,QAAEC,EAAO,UAAEC,EAAS,aAAEC,IAAiBC,EAAAA,EAAAA,IAAQ,CACnDC,cAAetB,KAEX,KAAEK,IAASkB,EAAAA,EAAAA,MACXnB,EACqB,QADRa,GACjBO,EAAAA,EAAAA,YAAWC,EAAAA,UAAc,IAAAR,OAAA,EAAzBA,EAA2BS,cAEvBC,GAAejB,EAAAA,EAAAA,GACnB,mCAGF,OACEH,EAAAA,EAAAA,KAACqB,EAAAA,SAAc,CAAAC,UACbtB,EAAAA,EAAAA,KAACuB,EAAAA,EAAS,CAACC,SAAS,KAAIF,UACtBG,EAAAA,EAAAA,MAAA,QACEC,SAAUb,GAAcc,IAClBA,EAAKhC,cAAgBgC,EAAKC,eC1BZC,WAAiB,IAADC,EAC5C,MAAMC,EACJC,EAAAA,EAAAA,IAAY,UACmB,QADZF,EACnBG,KAAKC,MAAMF,EAAAA,EAAAA,IAAY,gBAAQ,IAAAF,OAAA,EAA/BA,EAAiCK,KAEnCC,EAAAA,EAAAA,MACE,OAAO,GAADC,OACHC,6BACH,EACA,CACEH,GAAIJ,KACDJ,IAELY,MAAMC,IACwB,IAA1BA,EAASb,KAAKc,SAChBC,EAAAA,EAAAA,GAAU,UAAWF,EAASb,KAAKgB,YAAY,IAE/CD,EAAAA,EAAAA,GAAU,QAASF,EAASb,KAAKgB,YAAY,EAAM,GACrD,EDSUC,CAAejB,IAEfe,EAAAA,EAAAA,GAAU,UAAWtB,GAAc,GAGrCyB,QAAQC,IAAI,mBAAoBnB,EAAK,IACpCL,SAAA,EAEHtB,EAAAA,EAAAA,KAAC+C,EAAAA,EAAK,CAACC,IAAI,OAAOC,UAAU,MAAMC,GAAI,OAAO5B,UAC3CtB,EAAAA,EAAAA,KAACmD,EAAAA,EAAsB,CACrBxC,QAASA,EACTC,UAAWA,EACXwC,UAAWxD,EACTC,EACAC,QAKNE,EAAAA,EAAAA,KAACqD,EAAAA,EAAY,CACXnD,OAAOC,EAAAA,EAAAA,GACL,sCACAN,WAKO,C","sources":["Routes/Protected/ChangePasswrod/Variables/ChangePasswordDefaultValues.js","Routes/Protected/ChangePasswrod/Variables/ChangePasswrodDataArrray.js","Routes/Protected/ChangePasswrod/ChangePasswrod.js","Routes/Protected/ChangePasswrod/Adapters/PasswordChange.js"],"sourcesContent":["export const ChangePasswordDefaultValues = {\r\n  oldPassword: \"\",\r\n  newPassword: \"\",\r\n};\r\n","import PersianSupportTextField from 'Global/Components/UnEditableComponents/PersianSupportTextField/PersianSupportTextField';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nexport const ChangePasswrodDataArrray = (\r\n  languageArray,\r\n  i18n\r\n) => [\r\n  // {\r\n  //   element: (\r\n  //     <PersianSupportTextField\r\n  //       label={FindLangKey(\r\n  //         'change-password-input-current-password',\r\n  //         languageArray\r\n  //       )}\r\n  //       isEnglish={i18n?.language === 'en'}\r\n  //       isPassword={true}\r\n  //     />\r\n  //   ),\r\n  //   name: 'oldPassword',\r\n  //   required: true,\r\n  // },\r\n  {\r\n    element: (\r\n      <PersianSupportTextField\r\n        label={FindLangKey(\r\n          'change-password-input-new-password',\r\n          languageArray\r\n        )}\r\n        isEnglish={i18n?.language === 'en'}\r\n        isPassword={true}\r\n      />\r\n    ),\r\n    name: 'newPassword',\r\n    required: true,\r\n  },\r\n  {\r\n    element: (\r\n      <PersianSupportTextField\r\n        label={FindLangKey(\r\n          'sign-up-input-repeat-password',\r\n          languageArray\r\n        )}\r\n        isEnglish={i18n?.language === 'en'}\r\n        isPassword={true}\r\n      />\r\n    ),\r\n    name: 'repeatPassword',\r\n    required: true,\r\n  },\r\n];\r\n","import { Container, Stack } from '@mui/material';\r\nimport ReactHookFormGenerator from 'Global/ReactHookFormGenerator/ReactHookFormGenerator';\r\nimport React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { ChangePasswordDefaultValues } from './Variables/ChangePasswordDefaultValues';\r\nimport { ChangePasswrodDataArrray } from './Variables/ChangePasswrodDataArrray';\r\nimport SubmitButton from 'Global/Components/UnEditableComponents/SubmitButton/SubmitButton';\r\nimport { PasswordChange } from './Adapters/PasswordChange';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useContext } from 'react';\r\nimport { GlobalContext } from 'Global/Context/GlobalContextProvider';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\n\r\nconst ChangePasswrod = () => {\r\n  const { control, formState, handleSubmit } = useForm({\r\n    defaultValues: ChangePasswordDefaultValues,\r\n  });\r\n  const { i18n } = useTranslation();\r\n  const languageArray =\r\n    useContext(GlobalContext)?.LanguageArray;\r\n\r\n  const mismatch_msg = FindLangKey(\r\n    'sign-up-alert-password-mismatch'\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Container maxWidth=\"md\">\r\n        <form\r\n          onSubmit={handleSubmit((data) => {\r\n            if (data.newPassword === data.repeatPassword) {\r\n              PasswordChange(data);\r\n            } else {\r\n              SwalAlert('warning', mismatch_msg, false);\r\n            }\r\n\r\n            console.log('PasswordChange->', data);\r\n          })}\r\n        >\r\n          <Stack gap=\".5em\" marginTop=\"2em\" mb={'.5em'}>\r\n            <ReactHookFormGenerator\r\n              control={control}\r\n              formState={formState}\r\n              DataArray={ChangePasswrodDataArrray(\r\n                languageArray,\r\n                i18n\r\n              )}\r\n            />\r\n          </Stack>\r\n\r\n          <SubmitButton\r\n            label={FindLangKey(\r\n              'change-password-btn-change-password',\r\n              languageArray\r\n            )}\r\n          />\r\n        </form>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ChangePasswrod;\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport Cookies from 'js-cookie';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const PasswordChange = async (data) => {\r\n  const IdwebUser =\r\n    Cookies.get('user') &&\r\n    JSON.parse(Cookies.get('user'))?.Id;\r\n\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_USER_CHANGE_PASSWORD}`,\r\n    true,\r\n    {\r\n      Id: IdwebUser,\r\n      ...data,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      SwalAlert('success', response.data.resMessage, false);\r\n    } else\r\n      SwalAlert('error', response.data.resMessage, false);\r\n  });\r\n};\r\n"],"names":["ChangePasswordDefaultValues","oldPassword","newPassword","ChangePasswrodDataArrray","languageArray","i18n","element","_jsx","PersianSupportTextField","label","FindLangKey","isEnglish","language","isPassword","name","required","ChangePasswrod","_useContext","control","formState","handleSubmit","useForm","defaultValues","useTranslation","useContext","GlobalContext","LanguageArray","mismatch_msg","React","children","Container","maxWidth","_jsxs","onSubmit","data","repeatPassword","async","_JSON$parse","IdwebUser","Cookies","JSON","parse","Id","Post","concat","process","then","response","resCode","SwalAlert","resMessage","PasswordChange","console","log","Stack","gap","marginTop","mb","ReactHookFormGenerator","DataArray","SubmitButton"],"sourceRoot":""}