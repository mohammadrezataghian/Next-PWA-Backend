{"version":3,"file":"static/js/306.37322e89.chunk.js","mappings":"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","sources":["webpack://new-ui/./src/Routes/Protected/LabTestResult/styles/card.frame.module.scss?65a6","Routes/Protected/LabTestResult/functions/TitleMessages.js","Routes/Protected/LabTestResult/variable/CardData.js","Routes/Protected/LabTestResult/Adapters/GetResultReport.js","Routes/Protected/LabTestResult/functions/HandleDownloadReport.js","Routes/Protected/LabTestResult/Adapters/ShowResultReport.js","Routes/Protected/LabTestResult/functions/HandleShowReport.js","Routes/Protected/LabTestResult/components/TestResultCards/TestResultCards.js","Routes/Protected/LabTestResult/hooks/useGetResultList.js","Routes/Protected/LabTestResult/LabTestResult.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"frameGradient\":\"card_frame_frameGradient__yfIvu\",\"Card\":\"card_frame_Card__-Syx8\"};","import FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\n\r\nexport const TitleMessages = () => {\r\n  const refferralDateTime = FindLangKey(\"lab-test-title-date-time\");\r\n  const referalLocationMsg = FindLangKey(\"lab-test-title-referral-location\");\r\n  const titleMsg = FindLangKey(\"lab-test-title-title\");\r\n  return [refferralDateTime, referalLocationMsg, titleMsg];\r\n};\r\n","import { ArabicToPersian } from \"utils/ConvertToPersianTextFromArabic\";\r\nimport { TitleMessages } from \"../functions/TitleMessages\";\r\n\r\nexport const CardData = (test) => {\r\n  const [refferralDateTime, referalLocationMsg, titleMsg] = TitleMessages();\r\n  const data = [\r\n    {\r\n      title: refferralDateTime,\r\n      value: `${test?.Date} - ${test?.Time}`,\r\n    },\r\n    {\r\n      title: referalLocationMsg,\r\n      value: ArabicToPersian(test?.MahaleMorajee),\r\n    },\r\n    {\r\n      title: titleMsg,\r\n      value: ArabicToPersian(test?.NameNoeMorajee),\r\n    },\r\n  ];\r\n  return data;\r\n};\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport Swal from 'sweetalert2';\r\nimport { Base64Downloader } from 'utils/Base64Downloader';\r\nimport { v4 as uuidV4 } from 'uuid';\r\nimport { env } from 'env';\r\n\r\nexport const GetResultReport = async (\r\n  data,\r\n  set,\r\n  setForceRender\r\n) => {\r\n  set(true);\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_GET_REPORT}`,\r\n    true,\r\n    {\r\n      noeIdShakhesDev: data.dev,\r\n      itemId: data.id,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      Base64Downloader(response?.data?.Data, `${uuidV4()}`);\r\n      setForceRender((prev) => !prev);\r\n      Swal.close();\r\n    } else {\r\n      SwalAlert('error', response.data.resMessage, false);\r\n    }\r\n    set(false);\r\n  });\r\n};\r\n","import FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\nimport { GetResultReport } from \"../Adapters/GetResultReport\";\r\n\r\nexport const HandleDownloadReport = (\r\n  dev,\r\n  id,\r\n  set,\r\n  setForceRender\r\n) => {\r\n  GetResultReport({ dev, id }, set, setForceRender);\r\n};\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { Base64toNewTab } from 'utils/Base64toNewTab';\r\n\r\nexport const ShowResultReport = async (\r\n  data,\r\n  setForceRender,\r\n  setPreviewImage,\r\n  setLoadingPreview\r\n) => {\r\n  console.log('--->', {\r\n    noeIdShakhesDev: data.dev,\r\n    itemId: data.id,\r\n  });\r\n\r\n  setLoadingPreview(true);\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_GET_REPORT}`,\r\n    true,\r\n    {\r\n      noeIdShakhesDev: data.dev,\r\n      itemId: data.id,\r\n    }\r\n  ).then((response) => {\r\n\r\n    console.log('the response is +=>',response)\r\n\r\n    if (response.data.resCode === 1) {\r\n      Base64toNewTab(response.data.Data);\r\n    } else {\r\n      SwalAlert('error', response.data.resMessage, false);\r\n    }\r\n    setLoadingPreview(false);\r\n  });\r\n};\r\n","import { ShowResultReport } from \"../Adapters/ShowResultReport\";\r\n\r\nexport const HandleShowReport = (\r\n  dev,\r\n  id,\r\n  setForceRender,\r\n  setPreviewImage,\r\n  setLoadingPreview\r\n) => {\r\n  setLoadingPreview(true);\r\n\r\n  ShowResultReport(\r\n    { dev, id },\r\n    setForceRender,\r\n    setPreviewImage,\r\n    setLoadingPreview\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport style from '../../styles/card.frame.module.scss';\r\nimport {\r\n  Button,\r\n  Card,\r\n  Stack,\r\n  LinearProgress,\r\n} from '@mui/material';\r\nimport { CardData } from '../../variable/CardData';\r\nimport { Download, Visibility } from '@mui/icons-material';\r\nimport { HandleDownloadReport } from '../../functions/HandleDownloadReport';\r\nimport { themeColors } from 'Global/JsxThemeColor/JsxThemeColor';\r\nimport { HandleShowReport } from '../../functions/HandleShowReport';\r\nimport useCheckScreenWidth from 'Global/Hooks/useCheckScreenWidth';\r\nimport { ToBlob } from 'utils/ToBlob';\r\n\r\nconst TestResultCards = ({\r\n  test,\r\n  setForceRender,\r\n  Bedehkar,\r\n}) => {\r\n  const screenWidth = useCheckScreenWidth(); // 1024 for Desktop\r\n\r\n  const [previewData, showPreviewData] = useState();\r\n  const [get, set] = useState();\r\n\r\n  const datas = CardData(test);\r\n  const downloadMsg = FindLangKey(\r\n    'general-public-btn-download'\r\n  );\r\n  const downlaodingMsg = FindLangKey(\r\n    'general-public-alert-downloading'\r\n  );\r\n  const preview_msg = FindLangKey('general-public-preview');\r\n\r\n  const bedehkar_label = FindLangKey(\r\n    'lab-test-red-label-unable-to-get-result-because-bedehkari'\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Card\r\n        sx={{ mt: '1em', p: '.3em' }}\r\n        className={style?.Card}\r\n      >\r\n        <Stack\r\n          gap=\"1em\"\r\n          bgcolor=\"white\"\r\n          padding=\".5em\"\r\n          borderRadius=\"20px\"\r\n        >\r\n          {datas?.map((data, index) => (\r\n            <Stack\r\n              direction=\"row-reverse\"\r\n              justifyContent={'space-between'}\r\n              key={index}\r\n            >\r\n              <p>{data?.title}</p>\r\n              <p>{data?.value}</p>\r\n            </Stack>\r\n          ))}\r\n\r\n          {Bedehkar ? (\r\n            <p\r\n              style={{\r\n                textAlign: 'center',\r\n                marginBlock: '.5em',\r\n                color: 'red',\r\n              }}\r\n            >\r\n              {bedehkar_label}\r\n            </p>\r\n          ) : (\r\n            <></>\r\n          )}\r\n\r\n          <Stack\r\n            gap=\".5em\"\r\n            direction=\"row-reverse\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Button\r\n              variant=\"contained\"\r\n              fullWidth\r\n              sx={{\r\n                color: `${themeColors.ColorPrimary} !important`,\r\n                maxHeight: '40px !important',\r\n              }}\r\n              onClick={() =>\r\n                HandleDownloadReport(\r\n                  test?.NoeIdShakhesDev,\r\n                  test?.ID,\r\n                  set,\r\n                  setForceRender\r\n                )\r\n              }\r\n              disabled={Bedehkar}\r\n            >\r\n              {downloadMsg}\r\n            </Button>\r\n\r\n            <Button\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{\r\n                color: `${themeColors.ColorPrimary} !important`,\r\n                maxHeight: '40px !important',\r\n              }}\r\n              onClick={() => {\r\n                if (previewData) {\r\n                  showPreviewData(undefined);\r\n                } else {\r\n                  HandleShowReport(\r\n                    test?.NoeIdShakhesDev,\r\n                    test?.ID,\r\n                    setForceRender,\r\n                    showPreviewData,\r\n                    set\r\n                  );\r\n                }\r\n              }}\r\n              disabled={Bedehkar}\r\n            >\r\n              {preview_msg}\r\n            </Button>\r\n          </Stack>\r\n\r\n          <>\r\n            {get ? (\r\n              <LinearProgress />\r\n            ) : previewData ? (\r\n              // <iframe\r\n              //   src={ToBlob(previewData)}\r\n              //   title={\"report\"}\r\n              //   style={{\r\n              //     border: \"none\",\r\n              //     borderRadius: \"5px\",\r\n              //     width: \"100%\",\r\n              //   }}\r\n              //   loading=\"در حال بارگیری\"\r\n\r\n              // />\r\n              // <>\r\n              //   <Document\r\n              //     file={}\r\n              //     onLoadSuccess={onDocumentLoadSuccess}\r\n              //   >\r\n              //     <Page pageNumber={pageNumber} width={100} height={\"20%\"} />\r\n              //   </Document>\r\n              //   <p>\r\n              //     Page {pageNumber} of {numPages}\r\n              //   </p>\r\n              // </>\r\n\r\n              <></>\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </>\r\n        </Stack>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default TestResultCards;\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport Cookies from 'js-cookie';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Post } from 'Xhr/Xhr';\r\n\r\nconst useGetResultList = () => {\r\n  const [resultList, setResultList] = useState();\r\n\r\n  const patient = JSON.parse(Cookies.get('user'));\r\n\r\n  useEffect(() => {\r\n    setResultList('loading');\r\n\r\n    Post(\r\n      'Post',\r\n      `${process.env.REACT_APP_API_URL_API_FIND_TURN}`,\r\n      true,\r\n      {\r\n        idPatient: patient?.IdPatient,\r\n      }\r\n    ).then((response) => {\r\n      if (response.data.resCode === 1) {\r\n        setResultList(response.data.Data);\r\n      } else {\r\n        SwalAlert('error', response.data.Data, false);\r\n        setResultList([]);\r\n      }\r\n    });\r\n  }, [patient?.IdPatient]);\r\n\r\n  return resultList;\r\n};\r\n\r\nexport default useGetResultList;\r\n","import {\r\n  Alert,\r\n  Container,\r\n  LinearProgress,\r\n  Stack,\r\n} from '@mui/material';\r\nimport React, { useState } from 'react';\r\n// import { ResultList } from './functions/ResultList';\r\nimport TestResultCards from './components/TestResultCards/TestResultCards';\r\nimport useConditionalGrid from 'Global/Hooks/useConditionalGrid';\r\nimport i18next from 'i18next';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport useCheckScreenWidth from 'Global/Hooks/useCheckScreenWidth';\r\nimport useGetResultList from './hooks/useGetResultList';\r\n\r\nconst LabTestResult = () => {\r\n  const screenWidth = useCheckScreenWidth(); // 1024 for Desktop\r\n\r\n  const testResults = useGetResultList();\r\n\r\n  // const testResults = ResultList();\r\n  const [forceRender, setForceRender] = useState(false);\r\n\r\n  const isGrid = useConditionalGrid(\r\n    testResults?.PatientTurnList\r\n  );\r\n  const notFoundMsg = FindLangKey(\r\n    'general-public-flat-alert-no-data'\r\n  );\r\n\r\n  console.log('testResults-->',testResults)\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {forceRender ? <></> : <></>}\r\n      <Container>\r\n        <Stack\r\n          display={isGrid ? 'grid' : ''}\r\n          sx={{\r\n            gridTemplateColumns: isGrid\r\n              ? 'repeat(2, 1fr) !important'\r\n              : '',\r\n            direction: 'rtl',\r\n            gap: '.5em',\r\n            '& > *':\r\n              screenWidth > 1024\r\n                ? {\r\n                    // Add this block\r\n                    height: 'fit-content',\r\n                    alignSelf: 'start',\r\n                  }\r\n                : {},\r\n          }}\r\n        >\r\n          {testResults?.length === 0 ? (\r\n            <Alert\r\n              dir={\r\n                i18next.language === 'en' ? 'ltr' : 'rtl'\r\n              }\r\n              severity=\"info\"\r\n              sx={{\r\n                mt: '1em',\r\n                width: '100%',\r\n              }}\r\n            >\r\n              {notFoundMsg}\r\n            </Alert>\r\n          ) : testResults === 'loading' ? (\r\n            <LinearProgress />\r\n          ) : (\r\n            testResults?.PatientTurnList?.map((test) => (\r\n              <TestResultCards\r\n                test={test}\r\n                key={test?.ID}\r\n                setForceRender={setForceRender}\r\n                Bedehkar={test?.Bedehkar}\r\n              />\r\n            ))\r\n          )}\r\n        </Stack>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default LabTestResult;\r\n"],"names":["CardData","test","refferralDateTime","referalLocationMsg","titleMsg","FindLangKey","title","value","concat","Date","Time","ArabicToPersian","MahaleMorajee","NameNoeMorajee","HandleDownloadReport","dev","id","set","setForceRender","async","data","Post","process","noeIdShakhesDev","itemId","then","response","_response$data","resCode","Base64Downloader","Data","uuidV4","prev","Swal","SwalAlert","resMessage","GetResultReport","HandleShowReport","setPreviewImage","setLoadingPreview","console","log","Base64toNewTab","ShowResultReport","_ref","Bedehkar","useCheckScreenWidth","previewData","showPreviewData","useState","get","datas","downloadMsg","preview_msg","bedehkar_label","_jsx","React","children","Card","sx","mt","p","className","style","_jsxs","Stack","gap","bgcolor","padding","borderRadius","map","index","direction","justifyContent","textAlign","marginBlock","color","_Fragment","alignItems","Button","variant","fullWidth","themeColors","maxHeight","onClick","NoeIdShakhesDev","ID","disabled","undefined","LinearProgress","useGetResultList","resultList","setResultList","patient","JSON","parse","Cookies","useEffect","idPatient","IdPatient","LabTestResult","_testResults$PatientT","screenWidth","testResults","forceRender","isGrid","useConditionalGrid","PatientTurnList","notFoundMsg","Container","display","gridTemplateColumns","height","alignSelf","length","Alert","dir","i18next","severity","width","TestResultCards"],"sourceRoot":""}