{"version":3,"file":"static/js/275.9dfbee27.chunk.js","mappings":"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","sources":["Global/Components/CommonComponents/TextIconStack/TextIconStack.js","Global/Components/UnEditableComponents/SingularTimePicker/SingularTimePicker.js","Routes/Protected/AddNewMedicalForm/Adapters/GetMedicalFormOptions.js","Routes/Protected/AddNewMedicalForm/Adapters/GetFormTitlesByOption.js","Routes/Protected/AddNewMedicalForm/Hooks/useRecoilAllSates.js","Routes/Protected/AddNewMedicalForm/Hooks/useFormIdBasedRecoil.js","Routes/Protected/AddNewMedicalForm/Hooks/useSetTitle.js","Routes/Protected/AddNewMedicalForm/StateBank/useStateBank.js","Global/Components/CommonComponents/GroupedView/Options/FormOptionTitle.js","webpack://new-ui/./src/Global/Components/CommonComponents/GroupedView/Styles/Medical.Form.Options.module.scss?a418","Global/Components/CommonComponents/GroupedView/Options/EachOptionImage.js","Routes/Protected/AddNewMedicalForm/Components/Forms/EachMedicalFormOption.js","Global/Components/CommonComponents/GroupedView/Options/MedicalFormsOptions.js","Global/Components/CommonComponents/GroupedView/Options/OptionTtileBox.js","Global/Components/CommonComponents/GroupedView/Components/AddOrCancelForm.js","webpack://new-ui/./src/Global/Components/CommonComponents/AccordionContents/Accodion.module.scss?936b","Global/Components/CommonComponents/GroupedView/context/GroupViewContextProvider.js","Global/Components/CommonComponents/AccordionContents/Hooks/useHandleAccordionContentLogic.js","Global/Components/CommonComponents/AccordionContents/AccordionContents.js","Global/Components/CommonComponents/GroupedView/Components/InnerContenetAccordionContent.js","Global/Components/CommonComponents/GroupedView/Components/GroupViewInnerContent.js","Global/Components/CommonComponents/GroupedView/GroupedView.js","Routes/Protected/AddNewMedicalForm/Variables/MedicalFormDefaultValues.js","Global/Components/Generators/FormElementCreatorByType/Functions/DefaultValueNormalizer.js","Global/Components/CommonComponents/GroupedView/Options/MedicalOptionsGroupView.js","Routes/Protected/AddNewMedicalForm/Adapters/DeleteSavedForm.js","Routes/Protected/AddNewMedicalForm/Adapters/UnConfirmListView.js","Routes/Protected/AddNewMedicalForm/Components/FormListView/ConfirmUnconfirmButton.js","Routes/Protected/AddNewMedicalForm/Adapters/ConfirmListView.js","Routes/Protected/AddNewMedicalForm/Components/FormListView/ListActions.js","Routes/Protected/AddNewMedicalForm/Adapters/GetListViewReport.js","Routes/Protected/AddNewMedicalForm/Functions/HandleDeleteForm.js","Routes/Protected/AddNewMedicalForm/Components/FormListView/EachList.js","utils/TopOrderLatestDateTime.js","webpack://new-ui/./src/Routes/Protected/AddNewMedicalForm/Styles/List.Container.module.scss?ead2","Routes/Protected/AddNewMedicalForm/Components/FormListView/ListViewContainer.js","Routes/Protected/AddNewMedicalForm/AddNewMedicalForm.js","../node_modules/@mui/icons-material/esm/Print.js"],"sourcesContent":["import { Stack } from \"@mui/material\";\r\nimport { themeColors } from \"Global/JsxThemeColor/JsxThemeColor\";\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst TextIconStack = ({ Icon, Gap, Text, isIconElement }) => {\r\n  const { t, i18n } = useTranslation();\r\n  return (\r\n    <Stack\r\n      spacing={Gap}\r\n      direction={i18n?.language === \"en\" ? \"row\" : \"row-reverse\"}\r\n    >\r\n      {isIconElement ? (\r\n        isIconElement\r\n      ) : (\r\n        <img width={20} height={20} src={Icon} alt={Text} />\r\n      )}\r\n\r\n      <p\r\n        style={{\r\n          color: `${themeColors.ColorPrimary} !important`,\r\n        }}\r\n      >\r\n        {Text}\r\n      </p>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default TextIconStack;\r\n","import { TextField } from \"@mui/material\";\r\nimport AdapterJalali from \"@date-io/date-fns-jalali\";\r\nimport dayjs from \"dayjs\";\r\nimport {\r\n  MobileTimePicker,\r\n  LocalizationProvider,\r\n} from \"@mui/x-date-pickers-pro\";\r\nimport React from \"react\";\r\nimport { TimeToMinutes } from \"utils/TimeToMinutes\";\r\nimport { ConvertDateObjectToTimeFormat } from \"utils/ConvertDateObjectToTimeFormat\";\r\nimport RightAlignedTextField from \"Global/Components/CommonComponents/RightAlignedTextField/RightAlignedTextField\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\nconst SingularTimePicker = ({\r\n  label,\r\n  onChange,\r\n  errors,\r\n  name,\r\n  getter,\r\n  isDateTime = false,\r\n  isEnglish = true,\r\n  OutputInMinutes = false,\r\n}) => {\r\n  const [value, setValue] = React.useState(dayjs(new Date()));\r\n\r\n  const done_msg = FindLangKey(\"general-public-label-approve\");\r\n  const cancel_msg = FindLangKey(\"general-public-label-dismiss\");\r\n\r\n  return (\r\n    <LocalizationProvider\r\n      dateAdapter={AdapterJalali}\r\n      localeText={{\r\n        okButtonLabel: done_msg,\r\n        cancelButtonLabel: cancel_msg,\r\n      }}\r\n    >\r\n      <div dir={isEnglish ? \"ltr\" : \"rtl\"}>\r\n        <MobileTimePicker\r\n          label={label}\r\n          ampm={false}\r\n          value={value}\r\n          onChange={(newValue) => {\r\n            setValue(newValue);\r\n            !isDateTime &&\r\n              onChange &&\r\n              onChange(\r\n                OutputInMinutes\r\n                  ? TimeToMinutes(ConvertDateObjectToTimeFormat(newValue))\r\n                  : ConvertDateObjectToTimeFormat(newValue)\r\n              );\r\n\r\n            getter &&\r\n              getter((prev) => ({\r\n                ...prev,\r\n                Time: TimeToMinutes(ConvertDateObjectToTimeFormat(newValue)),\r\n              }));\r\n          }}\r\n          renderInput={(params) =>\r\n            !isEnglish ? (\r\n              <RightAlignedTextField\r\n                color=\"colorPrimer\"\r\n                {...params}\r\n                fullWidth\r\n              />\r\n            ) : (\r\n              <TextField\r\n                color=\"colorPrimer\"\r\n                {...params}\r\n                fullWidth\r\n                InputProps={{\r\n                  style: {\r\n                    maxHeight: \"40px\",\r\n                  },\r\n                }}\r\n              />\r\n            )\r\n          }\r\n        />\r\n      </div>\r\n    </LocalizationProvider>\r\n  );\r\n};\r\n\r\nexport default SingularTimePicker;\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport Cookies from 'js-cookie';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const GetMedicalFormOptions = async (\r\n  setGatheredData,\r\n  objName\r\n) => {\r\n  const user = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  );\r\n\r\n  return Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_INSERT_EDIT_ELS_FORM}`,\r\n    true,\r\n    {\r\n      allowConferm: true,\r\n      idInput: user.Id || user.FldId,\r\n      idPatient: user.IdPatient,\r\n      idPerson: user.IdPerson || user.FldIdDoctor,\r\n      idType: 27,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      setGatheredData((prev) => ({\r\n        ...prev,\r\n        [objName.ObjName1]: response.data.Data.NewFormList,\r\n        [objName.ObjName2]:\r\n          response.data.Data.InsertedFormList,\r\n      }));\r\n    }\r\n  });\r\n};\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport Cookies from 'js-cookie';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const GetFormTitlesByOption = async (\r\n  setGatheredData,\r\n  parameters\r\n) => {\r\n  const user = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  );\r\n\r\n  return Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_ELS_FORM_ADD_EDIT}`,\r\n    true,\r\n    {\r\n      idElsFormPatient: 0,\r\n      formID: parameters?.formId,\r\n      patientFormID: 0,\r\n      idPatient: user.IdPatient,\r\n      idType: 27,\r\n      idConfer: user.Id || user.FldId,\r\n      AlloEdit: true,\r\n      idCartablPatient: 0,\r\n      idPerson: user.IdPerson || user.FldIdDoctor, //nazar sanji \"\"\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      setGatheredData((prev) => ({\r\n        ...prev,\r\n        [parameters?.ObjName1]:\r\n          response?.data?.Data?.Form?.GroupList,\r\n        [parameters?.ObjName2]:\r\n          response?.data?.Data?.Form?.ListDetail,\r\n        [parameters?.ObjName3]:\r\n          response?.data?.Data?.Form?.Id,\r\n        [parameters?.ObjName4]:\r\n          response?.data?.Data?.IdCartbalePatient,\r\n      }));\r\n    } else {\r\n      SwalAlert('error', response.data.resMessage, false);\r\n    }\r\n  });\r\n};\r\n","import React from \"react\";\r\nimport { GetMedicalFormOptions } from \"../Adapters/GetMedicalFormOptions\";\r\nimport { GetFormTitlesByOption } from \"../Adapters/GetFormTitlesByOption\";\r\n\r\nconst useRecoilAllSates = (setFunctionArray, StateRecoil, formId) => {\r\n  const initialRender = React.useRef(true);\r\n  React.useMemo(() => {\r\n    if (!initialRender.current) {\r\n      setFunctionArray([\r\n        {\r\n          functions: GetMedicalFormOptions,\r\n          parameters: {\r\n            ObjName1: \"MedicalFormOptions\",\r\n            ObjName2: \"FormListView\",\r\n          },\r\n        },\r\n        {\r\n          functions: GetFormTitlesByOption,\r\n          parameters: {\r\n            ObjName1: \"FormView\",\r\n            ObjName2: \"GroupElements\",\r\n            ObjName3: \"GroupFormId\",\r\n            ObjName4: \"IdCartablePatient\",\r\n            formId: formId,\r\n          },\r\n        },\r\n      ]);\r\n    }\r\n    initialRender.current = false;\r\n  }, [StateRecoil]);\r\n};\r\n\r\nexport default useRecoilAllSates;\r\n","import React from \"react\";\r\nimport { GetFormTitlesByOption } from \"../Adapters/GetFormTitlesByOption\";\r\n\r\nconst useFormIdBasedRecoil = (formId, setFunctionArray) => {\r\n  React.useEffect(() => {\r\n    if (formId) {\r\n      setFunctionArray((prev) => [\r\n        {\r\n          functions: GetFormTitlesByOption,\r\n          parameters: {\r\n            ObjName1: \"FormView\",\r\n            ObjName2: \"GroupElements\",\r\n            ObjName3: \"GroupFormId\",\r\n            ObjName4: \"IdCartablePatient\",\r\n            formId: formId,\r\n          },\r\n        },\r\n      ]);\r\n    }\r\n  }, [formId]);\r\n};\r\n\r\nexport default useFormIdBasedRecoil;\r\n","import React from \"react\";\r\n\r\nconst useSetTitle = (\r\n  title,\r\n  gatheredData,\r\n  setTitle,\r\n  setformId,\r\n  setStateBank,\r\n  formId,\r\n  setForceRender,\r\n  setStateRecoil\r\n) => {\r\n  React.useEffect(() => {\r\n    if (title.length === 0) {\r\n      setStateBank((prev) => ({\r\n        ...prev,\r\n        ...gatheredData,\r\n        title,\r\n        setTitle,\r\n        setformId,\r\n        setStateBank,\r\n        formId,\r\n        setForceRender,\r\n        setStateRecoil,\r\n      }));\r\n    }\r\n  }, [title]);\r\n};\r\n\r\nexport default useSetTitle;\r\n","import React from \"react\";\r\nimport { GetMedicalFormOptions } from \"../Adapters/GetMedicalFormOptions\";\r\nimport useGatherDataFromApi from \"Global/Hooks/useGatherDataFromApi\";\r\nimport useRecoilAllSates from \"../Hooks/useRecoilAllSates\";\r\nimport useFormIdBasedRecoil from \"../Hooks/useFormIdBasedRecoil\";\r\nimport useSetTitle from \"../Hooks/useSetTitle\";\r\n\r\nconst useStateBank = () => {\r\n  const [forceRender, setForceRender] = React.useState(false);\r\n  const [StateBank, setStateBank] = React.useState([]);\r\n  const [title, setTitle] = React.useState(\"\");\r\n  const [StateRecoil, setStateRecoil] = React.useState(false);\r\n  const [formId, setformId] = React.useState();\r\n  const [FunctionArray, setFunctionArray] = React.useState([\r\n    {\r\n      functions: GetMedicalFormOptions,\r\n      parameters: {\r\n        ObjName1: \"MedicalFormOptions\",\r\n        ObjName2: \"FormListView\",\r\n      },\r\n    },\r\n  ]);\r\n  useRecoilAllSates(setFunctionArray, StateRecoil, formId);\r\n  useFormIdBasedRecoil(formId, setFunctionArray);\r\n  const { gatheredData } = useGatherDataFromApi(FunctionArray, forceRender);\r\n\r\n  useSetTitle(\r\n    title,\r\n    gatheredData,\r\n    setTitle,\r\n    setformId,\r\n    setStateBank,\r\n    formId,\r\n    setForceRender,\r\n    setStateRecoil\r\n  );\r\n  React.useMemo(() => {\r\n    setStateBank((prev) => ({\r\n      ...prev,\r\n      ...gatheredData,\r\n      title,\r\n      setTitle,\r\n      setformId,\r\n      setStateBank,\r\n      formId,\r\n      setForceRender,\r\n      setStateRecoil,\r\n    }));\r\n  }, [JSON.stringify(gatheredData), title, StateRecoil]);\r\n\r\n  return StateBank;\r\n};\r\n\r\nexport default useStateBank;\r\n","import React from \"react\";\r\nimport { Button } from \"@mui/material\";\r\nimport { ArabicToPersian } from \"utils/ConvertToPersianTextFromArabic\";\r\n\r\nconst FormOptionTitle = ({ StateBank }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <Button\r\n        variant=\"outlined\"\r\n        fullWidth\r\n        sx={{\r\n          mb: \"1em\",\r\n          opacity: StateBank?.title?.length > 0 ? \"initial\" : 0,\r\n        }}\r\n      >\r\n        {ArabicToPersian(StateBank?.title)}\r\n      </Button>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default FormOptionTitle;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"MedicalFormOptionsContainer\":\"Medical_Form_Options_MedicalFormOptionsContainer__ZcsBq\",\"MedicalFormOptionsContainerDesktop\":\"Medical_Form_Options_MedicalFormOptionsContainerDesktop__YiQ+r\"};","import React from \"react\";\r\nimport { Stack } from \"@mui/material\";\r\nimport { ArabicToPersian } from \"utils/ConvertToPersianTextFromArabic\";\r\n\r\nconst EachOptionImage = ({ image, element }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <Stack alignItems=\"center\">\r\n        <img width={70} height={70} src={image} alt={element?.Description} />\r\n        <p style={{ textAlign: \"center\" }}>\r\n          {ArabicToPersian(\r\n            element?.Description?.length > 0\r\n              ? element?.Description\r\n              : element?.Name\r\n          )}\r\n        </p>\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default EachOptionImage;\r\n","import React from 'react';\r\nimport { Box } from '@mui/material';\r\nimport EachOptionImage from '../../../../../Global/Components/CommonComponents/GroupedView/Options/EachOptionImage';\r\n\r\nconst EachMedicalFormOption = ({ element, stateBank }) => {\r\n  const cachedIcons = JSON.parse(\r\n    localStorage.getItem('icons')\r\n  );\r\n  const imgHeader = 'data:image/svg+xml;base64,';\r\n  return (\r\n    <React.Fragment>\r\n      <Box\r\n        onClick={() => {\r\n          stateBank?.setTitle(\r\n            element?.Description?.length > 0\r\n              ? element?.Description\r\n              : element?.Name\r\n          );\r\n          stateBank?.setformId(element?.ID);\r\n        }}\r\n      >\r\n        <EachOptionImage\r\n          image={\r\n            imgHeader +\r\n            cachedIcons?.PatientFormIcon[\r\n              `${element?.idTypeForm}.svg`\r\n            ]\r\n          }\r\n          element={element}\r\n        />\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default EachMedicalFormOption;\r\n","import React, { useContext } from 'react';\r\nimport { GlobalContext } from 'Global/Context/GlobalContextProvider';\r\nimport { LinearProgress, Stack } from '@mui/material';\r\nimport styles from '../Styles/Medical.Form.Options.module.scss';\r\nimport EachMedicalFormOption from '../../../../../Routes/Protected/AddNewMedicalForm/Components/Forms/EachMedicalFormOption';\r\nimport useCheckScreenWidth from 'Global/Hooks/useCheckScreenWidth';\r\n\r\nconst MedicalFormsOptions = ({ stateBank }) => {\r\n  const GlobalConstants = useContext(GlobalContext);\r\n  const screenWidth = useCheckScreenWidth(); // 1024 for Desktop\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!stateBank.MedicalFormOptions ? (\r\n        <LinearProgress\r\n          sx={{ width: '100%', position: 'sticky' }}\r\n        />\r\n      ) : (\r\n        <></>\r\n      )}\r\n      <Stack\r\n        className={\r\n          screenWidth < 1024\r\n            ? styles.MedicalFormOptionsContainer\r\n            : styles.MedicalFormOptionsContainerDesktop\r\n        }\r\n        sx={{\r\n          alignItems: 'center',\r\n\r\n          width: '100%',\r\n\r\n          marginRight: screenWidth < 1024 ? '-2em' : '-5em',\r\n        }}\r\n      >\r\n        {stateBank?.MedicalFormOptions?.map((element) => (\r\n          <EachMedicalFormOption\r\n            element={element}\r\n            key={GlobalConstants.uuidV4()}\r\n            stateBank={stateBank}\r\n          />\r\n        ))}\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default MedicalFormsOptions;\r\n","import React from 'react';\r\nimport FormOptionTitle from './FormOptionTitle';\r\nimport { Stack } from '@mui/material';\r\nimport MedicalFormsOptions from './MedicalFormsOptions';\r\n\r\nconst OptionTtileBox = ({ StateBank }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <Stack\r\n        alignItems=\"center\"\r\n        marginTop={'1em'}\r\n        className=\"add-new-els-form-title-box-color-layout\"\r\n      >\r\n        {StateBank?.title?.length > 0 ? (\r\n          <FormOptionTitle StateBank={StateBank} />\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {!StateBank?.title?.length > 0 ? (\r\n          <MedicalFormsOptions stateBank={StateBank} />\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default OptionTtileBox;\r\n","import { Button, Stack } from '@mui/material';\r\nimport React from 'react';\r\nimport { HandleSubmitGroupView } from '../Functions/HandleSubmitGroupView';\r\nimport { SaveElectronicForm } from 'Routes/Protected/AddNewMedicalForm/Adapters/SaveElectronicForm';\r\nimport SwalAlert from '../../SwalAlert/SwalAlert';\r\nimport i18next from 'i18next';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport { useContext } from 'react';\r\nimport { GlobalContext } from 'Global/Context/GlobalContextProvider';\r\n\r\nconst AddOrCancelForm = ({\r\n  StateBank,\r\n  getValues,\r\n  reset,\r\n  fieldArrayName,\r\n  isSurvey,\r\n  liftState,\r\n}) => {\r\n  const languageArray =\r\n    useContext(GlobalContext)?.LanguageArray;\r\n  const msg = FindLangKey(\r\n    'general-public-add-form-sure',\r\n    languageArray\r\n  );\r\n  return (\r\n    <React.Fragment>\r\n      <Stack\r\n        direction=\"row-reverse\"\r\n        spacing={1}\r\n        className=\"add-new-els-control-buttons-color-layout\"\r\n      >\r\n        {isSurvey ? (\r\n          <Button\r\n            color=\"colorPrimer\"\r\n            variant=\"contained\"\r\n            fullWidth\r\n            onClick={() => {\r\n              const values = getValues();\r\n              SwalAlert('warning', msg, true, () => {\r\n                if (liftState) {\r\n                  liftState(\r\n                    HandleSubmitGroupView(\r\n                      values?.MedicalDefaultValues\r\n                    ),\r\n                    {\r\n                      idElsFormPatient: 0,\r\n                      formID: StateBank.formId,\r\n                      idCartablPatient:\r\n                        StateBank.IdCartablePatient,\r\n                    },\r\n                    reset,\r\n                    fieldArrayName,\r\n                    StateBank\r\n                  );\r\n                  return;\r\n                }\r\n                SaveElectronicForm(\r\n                  HandleSubmitGroupView(\r\n                    values?.MedicalDefaultValues\r\n                  ),\r\n                  {\r\n                    idElsFormPatient: 0,\r\n                    formID: StateBank.formId,\r\n                    idCartablPatient:\r\n                      StateBank.IdCartablePatient,\r\n                  },\r\n                  reset,\r\n                  fieldArrayName,\r\n                  StateBank\r\n                );\r\n              });\r\n            }}\r\n          >\r\n            {FindLangKey(\r\n              'general-public-save-the-form-alert',\r\n              languageArray\r\n            )}\r\n          </Button>\r\n        ) : (\r\n          <>\r\n            <Button\r\n              color=\"colorPrimer\"\r\n              variant=\"contained\"\r\n              fullWidth\r\n              onClick={() => {\r\n                const values = getValues();\r\n                SwalAlert('warning', msg, true, () => {\r\n                  if (liftState) {\r\n                    liftState(\r\n                      HandleSubmitGroupView(\r\n                        values?.MedicalDefaultValues\r\n                      ),\r\n                      {\r\n                        idElsFormPatient: 0,\r\n                        formID: StateBank.formId,\r\n                        idCartablPatient:\r\n                          StateBank.IdCartablePatient,\r\n                      },\r\n                      reset,\r\n                      fieldArrayName,\r\n                      StateBank\r\n                    );\r\n                    return;\r\n                  }\r\n                  SaveElectronicForm(\r\n                    HandleSubmitGroupView(\r\n                      values?.MedicalDefaultValues\r\n                    ),\r\n                    {\r\n                      idElsFormPatient: 0,\r\n                      formID: StateBank.formId,\r\n                      idCartablPatient:\r\n                        StateBank.IdCartablePatient,\r\n                    },\r\n                    reset,\r\n                    fieldArrayName,\r\n                    StateBank\r\n                  );\r\n                });\r\n              }}\r\n            >\r\n              {FindLangKey(\r\n                'general-public-save-the-form-alert',\r\n                languageArray\r\n              )}\r\n            </Button>\r\n\r\n            <Button\r\n              fullWidth\r\n              color=\"colorPrimer\"\r\n              variant=\"outlined\"\r\n              onClick={() => {\r\n                StateBank?.setTitle('');\r\n              }}\r\n            >\r\n              {FindLangKey(\r\n                'general-public-btn-cancel',\r\n                languageArray\r\n              )}\r\n            </Button>\r\n          </>\r\n        )}\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddOrCancelForm;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"rootAccordion\":\"Accodion_rootAccordion__B0j2J\"};","import React, { createContext } from \"react\";\r\n\r\nexport const GroupViewContext = createContext();\r\n\r\nexport const GroupViewContextProvider = ({ children, watch }) => {\r\n  const GroupViewContextConstants = watch();\r\n  return (\r\n    <GroupViewContext.Provider value={GroupViewContextConstants}>\r\n      {children}\r\n    </GroupViewContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\n\r\nimport { GroupViewContext } from \"../../GroupedView/context/GroupViewContextProvider\";\r\n\r\nconst useHandleAccordionContentLogic = (titleId) => {\r\n  const GroupViewContextConstants = useContext(GroupViewContext);\r\n  const isFormFilled = GroupViewContextConstants?.MedicalDefaultValues?.filter((element) => element?.value?.toString()?.length > 0 && element?.element?.IdGroupDetail === titleId);\r\n  return isFormFilled?.length > 0;\r\n};\r\n\r\nexport default useHandleAccordionContentLogic;\r\n","import React, { memo } from 'react';\r\nimport { Check, ExpandMore } from '@mui/icons-material';\r\nimport {\r\n  Accordion,\r\n  AccordionDetails,\r\n  AccordionSummary,\r\n  Stack,\r\n  Typography,\r\n} from '@mui/material';\r\nimport styles from './Accodion.module.scss';\r\nimport useHandleAccordionContentLogic from './Hooks/useHandleAccordionContentLogic';\r\nimport ComponentMemoizer from 'Global/Components/ComponentMemoizer/ComponentMemoizer';\r\nconst AccordionContents = ({\r\n  FormElement,\r\n  title,\r\n  titleId,\r\n}) => {\r\n  const isFormFilled =\r\n    useHandleAccordionContentLogic(titleId);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Accordion\r\n        classes={{ root: styles.rootAccordion }}\r\n        square={true}\r\n      >\r\n        <AccordionSummary\r\n          expandIcon={<ExpandMore />}\r\n          aria-controls=\"panel1a-content\"\r\n          id=\"panel1a-header\"\r\n        >\r\n          <Stack\r\n            alignItems=\"center\"\r\n            direction=\"row\"\r\n            spacing={1}\r\n          >\r\n            <ComponentMemoizer\r\n              element={\r\n                isFormFilled ? (\r\n                  <span\r\n                    style={{\r\n                      color: '#2196f3',\r\n                      marginLeft: '1em',\r\n                    }}\r\n                  >\r\n                    <Check color=\"colorPrimer\" />\r\n                  </span>\r\n                ) : (\r\n                  <></>\r\n                )\r\n              }\r\n              dependecies={[isFormFilled]}\r\n            />\r\n            <Typography>\r\n              {title?.replace(/ي/g, 'ی')}\r\n            </Typography>\r\n          </Stack>\r\n        </AccordionSummary>\r\n\r\n        <ComponentMemoizer\r\n          element={\r\n            <AccordionDetails\r\n              className={styles.accordionDetails}\r\n            >\r\n              {React.cloneElement(FormElement)}\r\n            </AccordionDetails>\r\n          }\r\n          dependecies={[]}\r\n        />\r\n      </Accordion>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default memo(AccordionContents);\r\n","import { Stack } from '@mui/material';\r\nimport ElementTypeMatcher from 'Global/Components/Generators/FormElementCreatorByType/components/ElementTypeMatcher';\r\nimport React, { useState } from 'react';\r\nimport { GroupByRadioType } from '../Functions/GroupByRadioType';\r\nimport useGlobalMatchingField from '../Hooks/useGlobalMatchingField';\r\nimport ComponentMemoizer from 'Global/Components/ComponentMemoizer/ComponentMemoizer';\r\nimport useFindDependedItems from 'Global/Hooks/useFindDependedItems/useFindDependedItems';\r\nimport EditElementTypeMatcher from 'Global/Components/EditableComponents/EditableGroupedView/EditElementTypeMatcher';\r\nimport { treeElementRestructure } from '../Functions/treeElementRestructure';\r\nconst InnerContenetAccordionContent = ({\r\n  GroupId,\r\n  fields,\r\n  control,\r\n  errors,\r\n  setValue,\r\n  isSurvey = false,\r\n}) => {\r\n  const [RadioButton, setRadioButton] = useState(false);\r\n  const MatchingFields = fields?.filter(\r\n    (element) => element?.element?.IdGroupDetail === GroupId\r\n  );\r\n  useGlobalMatchingField(fields);\r\n  const [filteredRootNodes] =\r\n    useFindDependedItems(MatchingFields);\r\n  const groupedData =treeElementRestructure(GroupByRadioType(filteredRootNodes));\r\n\r\n  // console.log('->', groupedData);\r\n\r\n  console.log('groupedData--->--->',groupedData)\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Stack spacing={1}>\r\n        <ComponentMemoizer\r\n          element={groupedData?.map((data, index) =>\r\n            groupedData?.length > 0 ? (\r\n              <EditElementTypeMatcher\r\n                element={data}\r\n                field={data}\r\n                control={control}\r\n                errors={errors}\r\n                key={index}\r\n                setValue={setValue}\r\n                RadioButton={RadioButton}\r\n                setRadioButton={setRadioButton}\r\n                isSurvey={isSurvey}\r\n              />\r\n            ) : (\r\n              <></>\r\n            )\r\n          )}\r\n          dependecies={[JSON.stringify(groupedData)]}\r\n        />\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default InnerContenetAccordionContent;\r\n","import React, { useEffect, useState } from 'react';\r\nimport ComponentMemoizer from 'Global/Components/ComponentMemoizer/ComponentMemoizer';\r\nimport AddOrCancelForm from './AddOrCancelForm';\r\nimport AccordionContents from 'Global/Components/CommonComponents/AccordionContents/AccordionContents';\r\nimport InnerContenetAccordionContent from './InnerContenetAccordionContent';\r\nimport {\r\n  Alert,\r\n  LinearProgress,\r\n  Stack,\r\n} from '@mui/material';\r\nimport { ArabicToPersian } from 'utils/ConvertToPersianTextFromArabic';\r\nimport { GlobalContext } from 'Global/Context/GlobalContextProvider';\r\nimport { useContext } from 'react';\r\nimport i18next from 'i18next';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\n\r\nconst GroupViewInnerContent = ({\r\n  StateBank,\r\n  control,\r\n  errors,\r\n  fields,\r\n  getValues,\r\n  reset,\r\n  fieldArrayName,\r\n  setValue,\r\n  isSurvey = false,\r\n  liftState,\r\n}) => {\r\n  const GlobalConstants = useContext(GlobalContext);\r\n  const [out, setOut] = useState(false);\r\n  const pleaseWaitMsg = FindLangKey(\r\n    'general-public-warning-please-wait'\r\n  );\r\n  const notFoundMsg = FindLangKey(\r\n    'general-public-flat-alert-no-data'\r\n  );\r\n  useEffect(() => {\r\n    const timeOutFn = () => {\r\n      setTimeout(() => {\r\n        if (StateBank?.FormView?.length === 0) setOut(true);\r\n      }, 3000);\r\n    };\r\n    timeOutFn();\r\n    return clearTimeout(timeOutFn);\r\n  }, [StateBank?.FormView?.length]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ComponentMemoizer\r\n        element={\r\n          StateBank?.formId === StateBank?.GroupFormId ? (\r\n            StateBank?.title?.length > 0 ? (\r\n              <Stack spacing={'.5em'} width=\"100%\">\r\n                {StateBank?.FormView?.length === 0 ? (\r\n                  <React.Fragment>\r\n                    {out ? (\r\n                      <Alert\r\n                        dir={\r\n                          i18next.language === 'en'\r\n                            ? 'ltr'\r\n                            : 'rtl'\r\n                        }\r\n                        severity=\"info\"\r\n                      >\r\n                        {notFoundMsg}\r\n                      </Alert>\r\n                    ) : (\r\n                      <Alert\r\n                        dir={\r\n                          i18next.language === 'en'\r\n                            ? 'ltr'\r\n                            : 'rtl'\r\n                        }\r\n                        severity=\"warning\"\r\n                      >\r\n                        {pleaseWaitMsg}\r\n                      </Alert>\r\n                    )}\r\n                  </React.Fragment>\r\n                ) : (\r\n                  StateBank?.FormView?.map((element) => (\r\n                    <AccordionContents\r\n                      key={GlobalConstants.uuidV4()}\r\n                      titleId={element.Id}\r\n                      FormElement={\r\n                        <ComponentMemoizer\r\n                          element={\r\n                            <InnerContenetAccordionContent\r\n                              GroupId={element.Id}\r\n                              fields={fields}\r\n                              control={control}\r\n                              errors={errors}\r\n                              reset={reset}\r\n                              fieldArrayName={\r\n                                fieldArrayName\r\n                              }\r\n                              setValue={setValue}\r\n                              isSurvey={isSurvey}\r\n                            />\r\n                          }\r\n                          dependecies={[\r\n                            JSON.stringify(element),\r\n                            JSON.stringify(fieldArrayName),\r\n                          ]}\r\n                        />\r\n                      }\r\n                      title={ArabicToPersian(\r\n                        element?.NameGroup\r\n                      )}\r\n                    />\r\n                  ))\r\n                )}\r\n\r\n                <AddOrCancelForm\r\n                  StateBank={StateBank}\r\n                  getValues={getValues}\r\n                  reset={reset}\r\n                  fieldArrayName={fieldArrayName}\r\n                  isSurvey={isSurvey}\r\n                  liftState={liftState}\r\n                />\r\n              </Stack>\r\n            ) : (\r\n              <></>\r\n            )\r\n          ) : (\r\n            <LinearProgress />\r\n          )\r\n        }\r\n        dependecies={[\r\n          JSON.stringify(StateBank),\r\n          JSON.stringify(fields),\r\n          JSON.stringify(out),\r\n        ]}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default GroupViewInnerContent;\r\n","import React, { useEffect } from 'react';\r\nimport GroupViewInnerContent from './Components/GroupViewInnerContent';\r\nimport useCreateComplexField from 'Global/Hooks/useCreateComplexField';\r\n\r\nimport { GroupViewContextProvider } from './context/GroupViewContextProvider';\r\nconst GroupedView = ({\r\n  StateBank,\r\n  fieldArrayName,\r\n  DefaultValues,\r\n  isSurvey = false,\r\n  liftState,\r\n}) => {\r\n  const {\r\n    fields,\r\n    control,\r\n    formState,\r\n    getValues,\r\n    reset,\r\n    watch,\r\n    setValue,\r\n  } = useCreateComplexField(\r\n    `${fieldArrayName}`,\r\n    DefaultValues\r\n  );\r\n\r\n  const data = watch();\r\n\r\n  // const [, setFormValue] = useAtom(watcherAtom);\r\n  // React.useEffect(() => {\r\n  //   const subscription = watch(() => setFormValue(watch()));\r\n  //   return () => subscription.unsubscribe();\r\n  // }, []);\r\n\r\n  // console.log('grouped view state =>', {\r\n  //   DefaultValues,\r\n  //   data,\r\n  //   fields,\r\n  // });\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <GroupViewContextProvider watch={watch}>\r\n        <React.Fragment>\r\n          {StateBank?.title?.length > 0 ? (\r\n            <GroupViewInnerContent\r\n              StateBank={StateBank}\r\n              control={control}\r\n              errors={formState?.errors}\r\n              fields={fields}\r\n              getValues={getValues}\r\n              reset={reset}\r\n              fieldArrayName={fieldArrayName}\r\n              setValue={setValue}\r\n              isSurvey={isSurvey}\r\n              liftState={liftState}\r\n            />\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </React.Fragment>\r\n      </GroupViewContextProvider>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default GroupedView;\r\n","import React from \"react\";\r\nimport { DefaultValueNormalizer } from \"Global/Components/Generators/FormElementCreatorByType/Functions/DefaultValueNormalizer\";\r\n\r\nconst MedicalFormDefaultValues = (StateBank) => {\r\n  const MedicalFormattedValues = DefaultValueNormalizer(StateBank);\r\n  const [MedicalFormDefaultValues, setMedicalFormDefaultValues] =\r\n    React.useState([]);\r\n  React.useEffect(() => {\r\n    if (StateBank) {\r\n      setMedicalFormDefaultValues(MedicalFormattedValues);\r\n    }\r\n  }, [StateBank]);\r\n  return MedicalFormDefaultValues;\r\n};\r\n\r\nexport default MedicalFormDefaultValues;\r\n","export const DefaultValueNormalizer = (StateBank) => {\r\n  const MedicalFormattedValues =\r\n    StateBank?.GroupElements &&\r\n    StateBank?.GroupElements?.map((GroupElement) => {\r\n      if (\r\n        GroupElement?.ElsRecord?.Type === 'ComboBox' ||\r\n        GroupElement?.ElsRecord?.Type ===\r\n          'RadCheckedDropDownList'\r\n      ) {\r\n        return {\r\n          base64: '',\r\n          idcommand: '',\r\n          iddetail: GroupElement?.Id,\r\n          element: GroupElement,\r\n          value: '',\r\n          name: GroupElement?.ElsRecord.Name,\r\n        };\r\n      } else {\r\n        return {\r\n          base64: '',\r\n          iddetail: GroupElement?.Id,\r\n          element: GroupElement,\r\n          value: '',\r\n          name: GroupElement?.ElsRecord.Name,\r\n          ...(GroupElement?.ElsRecord?.Type ===\r\n            'RadioButton' && {\r\n            PannelNo: GroupElement.RadionPanelNo,\r\n          }),\r\n        };\r\n      }\r\n    });\r\n  return (\r\n    MedicalFormattedValues?.sort((a, b) => {\r\n      return a.element.CodeForWeb - b.element.CodeForWeb;\r\n    }) ?? []\r\n  );\r\n};\r\n","import React from 'react';\r\nimport GroupedView from 'Global/Components/CommonComponents/GroupedView/GroupedView';\r\nimport MedicalFormDefaultValues from 'Routes/Protected/AddNewMedicalForm/Variables/MedicalFormDefaultValues';\r\n\r\nconst MedicalOptionsGroupView = ({ StateBank }) => {\r\n  // console.log(\r\n  //   'group elements are =>',\r\n  //   StateBank?.GroupElements\r\n  // );\r\n\r\n  const MedicalDefaultValues =\r\n    MedicalFormDefaultValues(StateBank);\r\n  return (\r\n    <React.Fragment>\r\n      <GroupedView\r\n        StateBank={StateBank}\r\n        fieldArrayName={'MedicalDefaultValues'}\r\n        DefaultValues={MedicalDefaultValues}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default MedicalOptionsGroupView;\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const DeleteSavedForm = async (\r\n  idElsFormPatient,\r\n  setForceRender\r\n) => {\r\n  return Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_ELS_FORM_PATIENT_DELETE}`,\r\n    true,\r\n    {\r\n      idElsFormPatient,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      setForceRender((prev) => !prev);\r\n    } else {\r\n      SwalAlert(\r\n        'error',\r\n        response.data.resMessage ?? 'خطا در شبکه',\r\n        false\r\n      );\r\n    }\r\n  });\r\n};\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const UnConfirmListView = async (\r\n  idElsFormPatient,\r\n  StateBank,\r\n  setLoading\r\n) => {\r\n  const user = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  );\r\n  setLoading(true);\r\n  return Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_ELS_FORM_UNCONFIRM_ELSFORM}`,\r\n    true,\r\n    {\r\n      idPerson: user.IdPerson || user.FldIdDoctor,\r\n      idElsFormPatient,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode) {\r\n      StateBank?.setForceRender((prev) => !prev);\r\n    } else {\r\n      SwalAlert('error', response.data.resMessage, false);\r\n    }\r\n    setLoading(false);\r\n  });\r\n};\r\n","import { Cancel, CheckCircle } from '@mui/icons-material';\r\nimport { IconButton } from '@mui/material';\r\nimport React from 'react';\r\nimport { UnConfirmListView } from '../../Adapters/UnConfirmListView';\r\nimport { ConfirmListView } from '../../Adapters/ConfirmListView';\r\nimport AccessControl from 'Global/security/AccessControl';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\n\r\nconst ConfirmUnconfirmButton = ({\r\n  element,\r\n  StateBank,\r\n  setLoading,\r\n}) => {\r\n  const confrim_label = FindLangKey(\r\n    'electronic-forms-alert-ask-confirm'\r\n  );\r\n  const unconfirm_label = FindLangKey(\r\n    'electronic-forms-alert-ask-unconfirm'\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <IconButton\r\n        disabled={\r\n          AccessControl(\r\n            'medical-form-actions-unsave-forms'\r\n          ) ||\r\n          AccessControl('medical-form-actions-save-forms')\r\n        }\r\n        sx={{ p: 0 }}\r\n        color={element?.Conferm ? 'error' : 'success'}\r\n        onClick={() => {\r\n          if (element?.Conferm) {\r\n            SwalAlert(\r\n              'warning',\r\n              unconfirm_label,\r\n              true,\r\n              () => {\r\n                UnConfirmListView(\r\n                  element?.IdReport,\r\n                  StateBank,\r\n                  setLoading\r\n                );\r\n              }\r\n            );\r\n          } else {\r\n            SwalAlert(\r\n              'warning',\r\n              confrim_label,\r\n              true,\r\n              () => {\r\n                ConfirmListView(\r\n                  element?.IdReport,\r\n                  StateBank,\r\n                  setLoading\r\n                );\r\n              }\r\n            );\r\n          }\r\n        }}\r\n      >\r\n        {element?.Conferm ? (\r\n          <Cancel sx={{ color: 'black' }} />\r\n        ) : (\r\n          <CheckCircle sx={{ color: 'black' }} />\r\n        )}\r\n      </IconButton>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ConfirmUnconfirmButton;\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const ConfirmListView = async (\r\n  idElsFormPatient,\r\n  StateBank,\r\n  setLoading\r\n) => {\r\n  const user = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  );\r\n  setLoading(true);\r\n\r\n  return Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_ELS_FORM_CONFIRM_ELSFORM}`,\r\n    true,\r\n    {\r\n      idPerson: user.IdPerson || user.FldIdDoctor,\r\n      idElsFormPatient,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode) {\r\n      StateBank?.setForceRender((prev) => !prev);\r\n    } else {\r\n      SwalAlert('error', response.data.resMessage, false);\r\n    }\r\n    setLoading(false);\r\n  });\r\n};\r\n","import { Delete, Edit, Print } from '@mui/icons-material';\r\nimport {\r\n  IconButton,\r\n  LinearProgress,\r\n  Stack,\r\n} from '@mui/material';\r\nimport React, { useState } from 'react';\r\nimport { DeleteSavedForm } from '../../Adapters/DeleteSavedForm';\r\nimport { HandleDeleteForm } from '../../Functions/HandleDeleteForm';\r\nimport { GetListViewReport } from '../../Adapters/GetListViewReport';\r\nimport ConfirmUnconfirmButton from './ConfirmUnconfirmButton';\r\nimport { GlobalContext } from 'Global/Context/GlobalContextProvider';\r\nimport { useContext } from 'react';\r\nimport AccessControl from 'Global/security/AccessControl';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport useCheckScreenWidth from 'Global/Hooks/useCheckScreenWidth';\r\nimport { themeColors } from 'Global/JsxThemeColor/JsxThemeColor';\r\n\r\nconst ListActions = ({ element, StateBank }) => {\r\n  const GlobalConstants = useContext(GlobalContext);\r\n  const msg = FindLangKey(\r\n    'add-medical-font-alert-downloading'\r\n  );\r\n  const networkErrorMsg = FindLangKey(\r\n    'general-public-alert-network-error'\r\n  );\r\n  const screenWidth = useCheckScreenWidth(); // 1024 for Desktop\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const label_edit = FindLangKey(\r\n    'general-public-label-edit'\r\n  );\r\n\r\n  const confirm_label = FindLangKey(\r\n    'general-public-label-approve'\r\n  );\r\n\r\n  const unconfirm_label = FindLangKey(\r\n    'general-public-label-unapprove'\r\n  );\r\n\r\n  const print_label = FindLangKey(\r\n    'general-public-label-print'\r\n  );\r\n\r\n  const label_delete = FindLangKey(\r\n    'general-public-label-delete'\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Stack\r\n        spacing={'.5em'}\r\n        sx={{\r\n          alignItems: 'flex-end',\r\n        }}\r\n      >\r\n        <Stack direction=\"row-reverse\" gap=\".5em\">\r\n          <IconButton\r\n            sx={{ p: 0 }}\r\n            color=\"primary\"\r\n            disabled={\r\n              element?.Conferm ||\r\n              AccessControl(\r\n                'medical-form-actions-edit-forms'\r\n              )\r\n            }\r\n            onClick={() => {\r\n              GlobalConstants.navigate(\r\n                screenWidth < 1024\r\n                  ? '/EditPatientForm'\r\n                  : '/main/EditPatientForm'\r\n              );\r\n              window.sessionStorage.setItem(\r\n                'EditableForm',\r\n                JSON.stringify(element)\r\n              );\r\n            }}\r\n          >\r\n            <Edit\r\n              sx={{\r\n                color: element?.Conferm ? 'gray' : 'black',\r\n              }}\r\n            />\r\n          </IconButton>\r\n          <p>{label_edit}</p>\r\n        </Stack>\r\n\r\n        <Stack direction=\"row-reverse\" gap=\".5em\">\r\n          <ConfirmUnconfirmButton\r\n            element={element}\r\n            StateBank={StateBank}\r\n            setLoading={setLoading}\r\n          />\r\n          <p>\r\n            {element?.Conferm\r\n              ? unconfirm_label\r\n              : confirm_label}\r\n          </p>\r\n        </Stack>\r\n\r\n        <Stack direction=\"row-reverse\" gap=\".5em\">\r\n          <IconButton\r\n            disabled={\r\n              !element?.Conferm ||\r\n              AccessControl(\r\n                'medical-form-actions-print-form-report'\r\n              )\r\n            }\r\n            sx={{ p: 0 }}\r\n            color=\"secondary\"\r\n            onClick={() =>\r\n              GetListViewReport(\r\n                element?.IdReport,\r\n                setLoading\r\n              )\r\n            }\r\n          >\r\n            <Print\r\n              sx={{\r\n                color: !element?.Conferm ? 'gray' : 'black',\r\n              }}\r\n            />\r\n          </IconButton>\r\n\r\n          <p\r\n            style={{\r\n              color: !element?.Conferm ? 'gray' : 'black',\r\n            }}\r\n          >\r\n            {print_label}\r\n          </p>\r\n        </Stack>\r\n\r\n        <Stack direction=\"row-reverse\" gap=\".5em\">\r\n          <IconButton\r\n            disabled={\r\n              element?.Conferm ||\r\n              AccessControl(\r\n                'medical-form-actions-delete-form'\r\n              )\r\n            }\r\n            sx={{ p: 0 }}\r\n            color=\"error\"\r\n            onClick={() =>\r\n              HandleDeleteForm(\r\n                DeleteSavedForm,\r\n                element,\r\n                StateBank\r\n              )\r\n            }\r\n          >\r\n            <Delete\r\n              sx={{\r\n                color: element?.Conferm ? 'gray' : 'black',\r\n              }}\r\n            />\r\n          </IconButton>\r\n          <p>{label_delete}</p>\r\n        </Stack>\r\n\r\n        {loading ? (\r\n          <LinearProgress\r\n            color=\"colorPrimer\"\r\n            sx={{ width: '100%' }}\r\n          />\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ListActions;\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport i18next from 'i18next';\r\nimport { env } from 'env';\r\n\r\nimport { Base64Downloader } from 'utils/Base64Downloader';\r\nexport const GetListViewReport = async (\r\n  idElsFormPatient,\r\n  setLoading\r\n) => {\r\n  setLoading(true);\r\n  return Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_ELS_FORM_PATIENT_PRINT}`,\r\n    true,\r\n    {\r\n      idElsFormPatient,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      Base64Downloader(response.data.Data, false, false);\r\n      // console.log('response>data>Data', response.data.Data);\r\n    } else {\r\n      SwalAlert('error', response.data.resMessage, false);\r\n    }\r\n    setLoading(false);\r\n  });\r\n};\r\n","import SwalAlert from \"Global/Components/CommonComponents/SwalAlert/SwalAlert\";\r\nexport const HandleDeleteForm = (DeleteSavedForm, element, StateBank) => {\r\n  SwalAlert(\"warning\", \"آیا از حذف اطمینان دارید؟\", true, () => {\r\n    DeleteSavedForm(element.IdReport, StateBank.setForceRender);\r\n  });\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Card, IconButton, Stack } from '@mui/material';\r\nimport { ArabicToPersian } from 'utils/ConvertToPersianTextFromArabic';\r\nimport TextIconStack from 'Global/Components/CommonComponents/TextIconStack/TextIconStack';\r\n// import DateAttendance from \"Assets/icons/app/svg/DateAttendance.svg\";\r\nimport styles from '../../Styles/List.View.Container.module.scss';\r\nimport ListActions from './ListActions';\r\nimport FrameCard from 'Global/Components/CommonComponents/FrameCard/FrameCard';\r\nimport {\r\n  KeyboardDoubleArrowDown,\r\n  KeyboardDoubleArrowUp,\r\n} from '@mui/icons-material';\r\n\r\nconst EachList = ({ element, StateBank }) => {\r\n  // console.log('element--->', element);\r\n\r\n  const [showActionButtons, setShowActionButtons] =\r\n    useState(false);\r\n\r\n  const cachedIcons = JSON.parse(\r\n    localStorage.getItem('icons')\r\n  );\r\n\r\n  const imgHeader = 'data:image/svg+xml;base64,';\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* <Card\r\n        elevation={2}\r\n        sx={{ p: \".3em\" }}\r\n        className={`${styles.Card} each-list-color-layout`}\r\n      >\r\n \r\n      </Card> */}\r\n\r\n      <FrameCard\r\n        jsx={\r\n          <Stack\r\n            sx={{\r\n              backgroundColor: 'white',\r\n              p: '1em',\r\n              borderRadius: '20px',\r\n            }}\r\n            spacing={'1em'}\r\n          >\r\n            <TextIconStack\r\n              Text={`${element.Date}     ${element.Time}`}\r\n              Icon={\r\n                imgHeader +\r\n                cachedIcons?.GeneralIcon[\r\n                  'DateAttendance.svg'\r\n                ]\r\n              }\r\n              Gap={'1em'}\r\n            />\r\n            <TextIconStack\r\n              Text={`${ArabicToPersian(\r\n                element.InsertUser\r\n              )}`}\r\n              Icon={\r\n                imgHeader +\r\n                cachedIcons?.GeneralIcon['FullName.svg']\r\n              }\r\n              Gap={'1em'}\r\n            />\r\n            <TextIconStack\r\n              Text={`${ArabicToPersian(\r\n                element.FormDescription\r\n              )}`}\r\n              Icon={\r\n                imgHeader +\r\n                cachedIcons?.GeneralIcon['Detection.svg']\r\n              }\r\n              Gap={'1em'}\r\n            />\r\n            <TextIconStack\r\n              Text={\r\n                element.LastUserUpdate.trim().length === 0\r\n                  ? 'بدون تغییر'\r\n                  : `${ArabicToPersian(\r\n                      element.LastUserUpdate\r\n                    )}`\r\n              }\r\n              Icon={\r\n                imgHeader +\r\n                cachedIcons?.GeneralIcon[\r\n                  'DateAttendance.svg'\r\n                ]\r\n              }\r\n              Gap={'1em'}\r\n            />\r\n\r\n            <IconButton\r\n              sx={{\r\n                alignSelf: 'center',\r\n              }}\r\n              onClick={() => {\r\n                setShowActionButtons((prev) => !prev);\r\n              }}\r\n            >\r\n              {showActionButtons ? (\r\n                <KeyboardDoubleArrowUp color=\"colorPrimer\" />\r\n              ) : (\r\n                <KeyboardDoubleArrowDown color=\"colorPrimer\" />\r\n              )}\r\n            </IconButton>\r\n\r\n            {showActionButtons ? (\r\n              <ListActions\r\n                element={element}\r\n                StateBank={StateBank}\r\n              />\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </Stack>\r\n        }\r\n        cardProps={{\r\n          padding: '.4em',\r\n          borderRadius: '20px',\r\n        }}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default EachList;\r\n","import moment from \"moment-jalaali\";\r\nexport const TopOrderLatestDateTime = (array) => {\r\n  const sortedArray = array.sort((a, b) => {\r\n    const aDate = moment(a.Date, \"jYYYY/jM/jD\").valueOf();\r\n    const bDate = moment(b.Date, \"jYYYY/jM/jD\").valueOf();\r\n    if (aDate === bDate) {\r\n      const aTime = moment(a.Time, \"HH:mm\").valueOf();\r\n      const bTime = moment(b.Time, \"HH:mm\").valueOf();\r\n      return bTime - aTime;\r\n    }\r\n    return bDate - aDate;\r\n  });\r\n  return sortedArray;\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"listContainerDesktop\":\"List_Container_listContainerDesktop__QhE48\"};","import React from 'react';\r\nimport EachList from './EachList';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport { Alert, Stack } from '@mui/material';\r\nimport { GlobalContext } from 'Global/Context/GlobalContextProvider';\r\nimport { useContext } from 'react';\r\nimport { TopOrderLatestDateTime } from 'utils/TopOrderLatestDateTime';\r\nimport styles from '../../Styles/List.Container.module.scss';\r\nimport useCheckScreenWidth from 'Global/Hooks/useCheckScreenWidth';\r\nconst ListViewContainer = ({ listArray, StateBank }) => {\r\n  const GlobalConstants = useContext(GlobalContext);\r\n  const screenWidth = useCheckScreenWidth(); // 1024 for Desktop\r\n\r\n  const noData_msg = FindLangKey(\r\n    'general-public-flat-alert-no-data'\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Stack\r\n        sx={{\r\n          mt: '1em',\r\n          '& > *':\r\n            screenWidth > 1024\r\n              ? {\r\n                  // Add this block\r\n                  height: 'fit-content',\r\n                  alignSelf: 'start',\r\n                }\r\n              : {},\r\n        }}\r\n        spacing={screenWidth < 1024 ? '.5em' : ''}\r\n        className={\r\n          screenWidth < 1024 || listArray?.length === 0\r\n            ? ''\r\n            : styles.listContainerDesktop\r\n        }\r\n      >\r\n        {listArray ? (\r\n          <>\r\n            {TopOrderLatestDateTime(listArray)?.length >\r\n            0 ? (\r\n              TopOrderLatestDateTime(listArray)?.map(\r\n                (element) => (\r\n                  <EachList\r\n                    element={element}\r\n                    key={GlobalConstants.uuidV4()}\r\n                    StateBank={StateBank}\r\n                  />\r\n                )\r\n              )\r\n            ) : (\r\n              <Alert\r\n                severity=\"warning\"\r\n                variant=\"outlined\"\r\n                sx={{\r\n                  display: 'flex',\r\n                  justifyContent: 'center',\r\n                  width: '100%',\r\n                  marginTop: '1em',\r\n                }}\r\n              >\r\n                {noData_msg}\r\n              </Alert>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ListViewContainer;\r\n","import React from 'react';\r\nimport { Container } from '@mui/material';\r\nimport useStateBank from './StateBank/useStateBank';\r\nimport OptionTtileBox from 'Global/Components/CommonComponents/GroupedView/Options/OptionTtileBox';\r\nimport MedicalOptionsGroupView from 'Global/Components/CommonComponents/GroupedView/Options/MedicalOptionsGroupView';\r\nimport FormListView from './Components/FormListView/FormListView';\r\nimport ListViewContainer from './Components/FormListView/ListViewContainer';\r\n\r\nconst AddNewMedicalForm = () => {\r\n  const StateBank = useStateBank();\r\n  // const [toggleView, setToggleView] = React.useState(false);\r\n\r\n  // console.log('StateBank=++=>', StateBank);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Container maxWidth=\"md\">\r\n        {/* <FormListView setToggleView={setToggleView} /> */}\r\n        {/* {!toggleView ? (\r\n          <>\r\n            <OptionTtileBox StateBank={StateBank} />\r\n            <MedicalOptionsGroupView StateBank={StateBank} />\r\n          </>\r\n        ) : (\r\n          <ListViewContainer\r\n            listArray={StateBank?.FormListView}\r\n            StateBank={StateBank}\r\n          />\r\n        )} */}\r\n        <div>\r\n          <OptionTtileBox StateBank={StateBank} />\r\n          <MedicalOptionsGroupView StateBank={StateBank} />\r\n        </div>\r\n\r\n        {!!!StateBank?.title ? (\r\n          <ListViewContainer\r\n            listArray={StateBank?.FormListView}\r\n            StateBank={StateBank}\r\n          />\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddNewMedicalForm;\r\n//\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 8H5c-1.66 0-3 1.34-3 3v6h4v4h12v-4h4v-6c0-1.66-1.34-3-3-3zm-3 11H8v-5h8v5zm3-7c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm-1-9H6v4h12V3z\"\n}), 'Print');"],"names":["_ref","Icon","Gap","Text","isIconElement","t","i18n","useTranslation","_jsxs","Stack","spacing","direction","language","children","_jsx","width","height","src","alt","style","color","concat","themeColors","label","onChange","errors","name","getter","isDateTime","isEnglish","OutputInMinutes","value","setValue","React","dayjs","Date","done_msg","FindLangKey","cancel_msg","LocalizationProvider","dateAdapter","AdapterJalali","localeText","okButtonLabel","cancelButtonLabel","dir","MobileTimePicker","ampm","newValue","TimeToMinutes","ConvertDateObjectToTimeFormat","prev","Time","renderInput","params","TextField","fullWidth","InputProps","maxHeight","RightAlignedTextField","GetMedicalFormOptions","async","setGatheredData","objName","user","JSON","parse","sessionStorage","getItem","Post","process","allowConferm","idInput","Id","FldId","idPatient","IdPatient","idPerson","IdPerson","FldIdDoctor","idType","then","response","data","resCode","ObjName1","Data","NewFormList","ObjName2","InsertedFormList","GetFormTitlesByOption","parameters","idElsFormPatient","formID","formId","patientFormID","idConfer","AlloEdit","idCartablPatient","_response$data","_response$data$Data","_response$data$Data$F","_response$data2","_response$data2$Data","_response$data2$Data$","_response$data3","_response$data3$Data","_response$data3$Data$","_response$data4","_response$data4$Data","Form","GroupList","ListDetail","ObjName3","ObjName4","IdCartbalePatient","SwalAlert","resMessage","useRecoilAllSates","setFunctionArray","StateRecoil","initialRender","current","functions","useFormIdBasedRecoil","useSetTitle","title","gatheredData","setTitle","setformId","setStateBank","setForceRender","setStateRecoil","length","useStateBank","forceRender","StateBank","FunctionArray","useGatherDataFromApi","stringify","_StateBank$title","Button","variant","sx","mb","opacity","ArabicToPersian","_element$Description","image","element","alignItems","Description","textAlign","Name","stateBank","cachedIcons","localStorage","Box","onClick","ID","EachOptionImage","PatientFormIcon","idTypeForm","_stateBank$MedicalFor","GlobalConstants","useContext","GlobalContext","screenWidth","useCheckScreenWidth","MedicalFormOptions","_Fragment","LinearProgress","position","className","styles","marginRight","map","EachMedicalFormOption","uuidV4","_StateBank$title2","marginTop","FormOptionTitle","MedicalFormsOptions","_useContext","getValues","reset","fieldArrayName","isSurvey","liftState","languageArray","LanguageArray","msg","values","HandleSubmitGroupView","MedicalDefaultValues","IdCartablePatient","SaveElectronicForm","GroupViewContext","createContext","GroupViewContextProvider","watch","GroupViewContextConstants","Provider","titleId","_GroupViewContextCons","isFormFilled","filter","_element$value","_element$value$toStri","_element$element","toString","IdGroupDetail","AccordionContents","FormElement","useHandleAccordionContentLogic","Accordion","classes","root","square","AccordionSummary","expandIcon","ExpandMore","id","ComponentMemoizer","marginLeft","Check","dependecies","Typography","replace","AccordionDetails","memo","GroupId","fields","control","RadioButton","setRadioButton","useState","MatchingFields","useGlobalMatchingField","filteredRootNodes","useFindDependedItems","groupedData","treeElementRestructure","GroupByRadioType","console","log","index","EditElementTypeMatcher","field","_StateBank$FormView2","_StateBank$FormView3","_StateBank$FormView4","out","setOut","pleaseWaitMsg","notFoundMsg","useEffect","timeOutFn","setTimeout","_StateBank$FormView","FormView","clearTimeout","GroupFormId","Alert","i18next","severity","InnerContenetAccordionContent","NameGroup","AddOrCancelForm","DefaultValues","formState","useCreateComplexField","GroupViewInnerContent","MedicalFormattedValues","_StateBank$GroupEleme","_MedicalFormattedValu","GroupElements","GroupElement","_GroupElement$ElsReco","_GroupElement$ElsReco2","_GroupElement$ElsReco3","ElsRecord","Type","base64","idcommand","iddetail","PannelNo","RadionPanelNo","sort","a","b","CodeForWeb","DefaultValueNormalizer","MedicalFormDefaultValues","setMedicalFormDefaultValues","GroupedView","DeleteSavedForm","_response$data$resMes","setLoading","confrim_label","unconfirm_label","IconButton","disabled","AccessControl","p","Conferm","UnConfirmListView","IdReport","ConfirmListView","Cancel","CheckCircle","loading","label_edit","confirm_label","print_label","label_delete","gap","navigate","window","setItem","Edit","ConfirmUnconfirmButton","Base64Downloader","GetListViewReport","Print","HandleDeleteForm","Delete","showActionButtons","setShowActionButtons","imgHeader","FrameCard","jsx","backgroundColor","borderRadius","TextIconStack","GeneralIcon","InsertUser","FormDescription","LastUserUpdate","trim","alignSelf","KeyboardDoubleArrowUp","KeyboardDoubleArrowDown","ListActions","cardProps","padding","TopOrderLatestDateTime","array","aDate","moment","valueOf","bDate","aTime","_TopOrderLatestDateTi","_TopOrderLatestDateTi2","listArray","noData_msg","mt","EachList","display","justifyContent","AddNewMedicalForm","Container","maxWidth","OptionTtileBox","MedicalOptionsGroupView","ListViewContainer","FormListView","createSvgIcon","d"],"sourceRoot":""}