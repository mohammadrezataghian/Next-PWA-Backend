{"version":3,"file":"static/js/7.586c7873.chunk.js","mappings":"oJAIO,MAAMA,EAAuBC,MAClCC,EACAC,KAEAD,EAAQE,KAAO,EACf,MAAMC,EACJC,aAAaC,QAAQ,iBACrBC,KAAKC,MAAMH,aAAaC,QAAQ,iBAE5BG,EACJJ,aAAaC,QAAQ,oBACrBC,KAAKC,MAAMH,aAAaC,QAAQ,qBAElCI,EAAAA,EAAAA,MACE,OAAO,GAADC,OACHC,8BACH,EACA,IACKX,IAELY,MAAMC,IACwB,IAA1BA,EAASC,KAAKC,QACXP,GAMHQ,EAAAA,EAAAA,GACE,UACAH,EAASC,KAAKG,YACd,GACAL,MAAK,KACLM,SAASC,KAAO,OAAO,KAVzBC,EAAAA,EAAAA,GAAgB,CACdC,UAA2B,OAAhBlB,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBkB,UAC7BC,QAAyB,OAAhBnB,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBmB,WAY/BN,EAAAA,EAAAA,GACE,QACAH,EAASC,KAAKG,YACd,GACAL,MAAK,IAAOM,SAASC,KAAO,UAEzBN,IACP,C,sJCxCJ,MAiCA,EAjCwBU,KACtB,MAAMC,GAA2BC,EAAAA,EAAAA,GAC/B,oCAGIP,GAAWQ,EAAAA,EAAAA,MACX1B,GAAU2B,EAAAA,EAAAA,GAAeT,EAASU,OAAQ,KAC1C3B,GAAW4B,EAAAA,EAAAA,MAEXC,GAAwBL,EAAAA,EAAAA,GAC5B,mDAaF,OAVAM,QAAQC,IAAI,YAAahC,IAEzBiC,EAAAA,EAAAA,YAAU,KACJjC,GACFF,EAAAA,EAAAA,GAAqBE,EAASC,IAE9Be,EAAAA,EAAAA,GAAU,QAASc,GAAuB,EAC5C,GACC,KAGDI,EAAAA,EAAAA,KAACC,EAAAA,SAAc,CAAAC,UACbC,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACC,WAAY,SAAUC,IAAI,MAAKJ,SAAA,EACpCF,EAAAA,EAAAA,KAAA,MAAAE,SAAKZ,KACLU,EAAAA,EAAAA,KAACO,EAAAA,EAAgB,CAACC,MAAM,cAAcC,KAAK,YAE9B,C,iBCrCd,SAAShB,EAAeiB,EAAKhB,GAElC,IAAIiB,EAAiB,OAAHD,QAAG,IAAHA,OAAG,EAAHA,EAAKE,MAAM,KAAK,GAG9BC,EAAmB,OAAXF,QAAW,IAAXA,OAAW,EAAXA,EAAaC,MAAM,GAADpC,OAAIkB,IAG9BoB,EAAc,CAAC,EAGnB,IAAK,IAAIC,EAAI,EAAGA,GAAS,OAALF,QAAK,IAALA,OAAK,EAALA,EAAOG,QAAQD,IAAK,CAAC,IAADE,EACtC,IAAIC,EAAe,QAAXD,EAAGJ,EAAME,UAAE,IAAAE,OAAA,EAARA,EAAUL,MAAM,KAC3BE,EAAYK,mBAAmBD,EAAK,KAClCC,mBAAmBD,EAAK,IAAM,GAClC,CAGA,OAAOJ,CACT,C","sources":["Routes/Public/Test/Adapters/VerifySamanKishToken.js","Routes/Public/VerifySamanKish/VerifySamanKish.js","utils/getQueryParams.js"],"sourcesContent":["import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { SaveAppointment } from 'Routes/Public/GetNewTurn/adapaters/SaveAppointment';\r\nimport { Post } from 'Xhr/Xhr';\r\n\r\nexport const VerifySamanKishToken = async (\r\n  receipt,\r\n  navigate\r\n) => {\r\n  receipt.Wage = 0;\r\n  const payredirect_info =\r\n    localStorage.getItem('pay_redirect') &&\r\n    JSON.parse(localStorage.getItem('pay_redirect'));\r\n\r\n  const generalPayment =\r\n    localStorage.getItem('general_payment') &&\r\n    JSON.parse(localStorage.getItem('general_payment'));\r\n\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_VERIFY_SAMAN_KISH_TOKEN}`,\r\n    true,\r\n    {\r\n      ...receipt,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      if (!generalPayment) {\r\n        SaveAppointment({\r\n          idPatient: payredirect_info?.idPatient,\r\n          idNobat: payredirect_info?.idNobat,\r\n        });\r\n      } else {\r\n        SwalAlert(\r\n          'success',\r\n          response.data.resMessage,\r\n          false\r\n        ).then(() => {\r\n          location.href = '/main';\r\n        });\r\n      }\r\n    } else {\r\n      SwalAlert(\r\n        'error',\r\n        response.data.resMessage,\r\n        false\r\n      ).then(() => (location.href = '/main'));\r\n    }\r\n    return response;\r\n  });\r\n};\r\n","import { CircularProgress, Stack } from '@mui/material';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport React, { useEffect } from 'react';\r\nimport { VerifySamanKishToken } from '../Test/Adapters/VerifySamanKishToken';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { getQueryParams } from 'utils/getQueryParams';\r\nimport SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\n\r\nconst VerifySamanKish = () => {\r\n  const label_verfiy_transaction = FindLangKey(\r\n    'genral-public-verify-transaction'\r\n  );\r\n\r\n  const location = useLocation();\r\n  const receipt = getQueryParams(location.search, '&');\r\n  const navigate = useNavigate();\r\n\r\n  const error_receipt_receive = FindLangKey(\r\n    'genral-public-transaction-receipt-receive-error'\r\n  );\r\n\r\n  console.log('receipt=>', receipt);\r\n\r\n  useEffect(() => {\r\n    if (receipt) {\r\n      VerifySamanKishToken(receipt, navigate);\r\n    } else {\r\n      SwalAlert('error', error_receipt_receive, false);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Stack alignItems={'center'} gap=\"3em\">\r\n        <h3>{label_verfiy_transaction}</h3>\r\n        <CircularProgress color=\"colorPrimer\" size=\"3em\" />\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default VerifySamanKish;\r\n","export function getQueryParams(url, search) {\r\n  // Extract the query string from the URL\r\n  let queryString = url?.split('?')[1];\r\n\r\n  // Split the query string into key-value pairs\r\n  let pairs = queryString?.split(`${search}`);\r\n\r\n  // Initialize an empty object to hold the query parameters\r\n  let queryParams = {};\r\n\r\n  // Iterate over the pairs and populate the queryParams object\r\n  for (let i = 0; i < pairs?.length; i++) {\r\n    let pair = pairs[i]?.split('=');\r\n    queryParams[decodeURIComponent(pair[0])] =\r\n      decodeURIComponent(pair[1] || '');\r\n  }\r\n\r\n  // Return the populated queryParams object\r\n  return queryParams;\r\n}\r\n"],"names":["VerifySamanKishToken","async","receipt","navigate","Wage","payredirect_info","localStorage","getItem","JSON","parse","generalPayment","Post","concat","process","then","response","data","resCode","SwalAlert","resMessage","location","href","SaveAppointment","idPatient","idNobat","VerifySamanKish","label_verfiy_transaction","FindLangKey","useLocation","getQueryParams","search","useNavigate","error_receipt_receive","console","log","useEffect","_jsx","React","children","_jsxs","Stack","alignItems","gap","CircularProgress","color","size","url","queryString","split","pairs","queryParams","i","length","_pairs$i","pair","decodeURIComponent"],"sourceRoot":""}