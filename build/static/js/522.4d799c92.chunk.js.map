{"version":3,"file":"static/js/522.4d799c92.chunk.js","mappings":"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","sources":["Routes/Protected/CompleteProfileUser/Adapters/SubmitUserInformation.js","Routes/Protected/CompleteProfileUser/Functions/HandleFormSubmit.js","Routes/Protected/CompleteProfileUser/Adapters/GetUserInformation.js","Routes/Protected/CompleteProfileUser/Hooks/useGatherUserInformation.js","Routes/Protected/CompleteProfileUser/Variables/CompleteUserProfileDataArray.js","Routes/Protected/CompleteProfileUser/Variables/CompleteUserProfileDefaultValues.js","Routes/Protected/CompleteProfileUser/Hooks/useCompleteUserProfileDataArray.js","Global/Adapters/useGetGenderList.js","Global/Adapters/useGetTaholList.js","Global/Adapters/useGetCityList.js","Global/Adapters/useGetDefaultParamApp.js","Routes/Protected/CompleteProfileUser/CompleteProfileUser.js","Routes/Protected/CompleteProfileUser/Functions/formatData.js"],"sourcesContent":["import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const SubmitUserInformation = async (data) => {\r\n \r\n  return Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_UPDATE_USER_PROFILE}`,\r\n    true,\r\n    {\r\n      ...data,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      SwalAlert('success', response.data.resMessage, false);\r\n    } else {\r\n      SwalAlert('error', response.data.resMessage, false);\r\n    }\r\n  });\r\n};\r\n","import { SubmitUserInformation } from \"../Adapters/SubmitUserInformation\";\r\n\r\nexport const HandleFormSubmit = (data, profileInfo) => {\r\n  for (let key in data) {\r\n    if (data[key] === \"\" || data[key] === null || data[key] === undefined) {\r\n      data[key] = profileInfo[key];\r\n    }\r\n  }\r\n  SubmitUserInformation(data);\r\n};\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport Cookies from 'js-cookie';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const GetUserInformation = async (\r\n  setUserInformation\r\n) => {\r\n  const Id =\r\n    Cookies.get('user') &&\r\n    JSON.parse(Cookies.get('user'))?.Id;\r\n  return Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_GET_USER_PROFILE_INFO}`,\r\n    true,\r\n    {\r\n      Id,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      setUserInformation(response.data.Data);\r\n    } else {\r\n      SwalAlert('error', response.data.resMessage, false);\r\n    }\r\n  });\r\n};\r\n","import React from \"react\";\r\nimport { GetUserInformation } from \"../Adapters/GetUserInformation\";\r\n\r\nconst useGatherUserInformation = () => {\r\n  const [userInformation, setUserInformation] = React.useState({});\r\n  React.useEffect(() => {\r\n    GetUserInformation(setUserInformation);\r\n  }, []);\r\n  return { userInformation };\r\n};\r\n\r\nexport default useGatherUserInformation;\r\n","import ComponentMemoizer from 'Global/Components/ComponentMemoizer/ComponentMemoizer';\r\nimport EditableCustomizableAutoComplete from 'Global/Components/EditableComponents/EditableCustomizableAutoComplete/EditableCustomizableAutoComplete';\r\nimport EditableCustomizableSelect from 'Global/Components/EditableComponents/EditableCustomizableSelect/EditableCustomizableSelect';\r\nimport EditablePersianSupportTextField from 'Global/Components/EditableComponents/EditablePersianSupportTextField/EditablePersianSupportTextField';\r\nimport ReadOnlyTextField from 'Global/Components/ReadOnlyComponents/ReadOnlyTextField';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport Cookies from 'js-cookie';\r\nimport { ArabicToPersian } from 'utils/ConvertToPersianTextFromArabic';\r\n\r\nexport const CompleteUserProfileDataArray = (\r\n  userInformation,\r\n  languageArray,\r\n  i18n,\r\n  enableEdit,\r\n  cityList\r\n) => {\r\n  // const user = JSON.parse(Cookies.get(\"user\") || \"\");\r\n\r\n  const completeUserProfileDataArray = [\r\n    {\r\n      element: (\r\n        <EditablePersianSupportTextField\r\n          disabled={enableEdit}\r\n          label={FindLangKey(\r\n            'complete-user-input-first-name',\r\n            languageArray\r\n          )}\r\n          Initialvalue={ArabicToPersian(\r\n            userInformation.FirstName\r\n          )}\r\n          isEnglish={i18n?.language === 'en'}\r\n        />\r\n      ),\r\n      name: 'FirstName',\r\n    },\r\n    {\r\n      element: (\r\n        <EditablePersianSupportTextField\r\n          disabled={enableEdit}\r\n          label={FindLangKey(\r\n            'complete-user-input-last-name',\r\n            languageArray\r\n          )}\r\n          Initialvalue={ArabicToPersian(\r\n            userInformation.LastName\r\n          )}\r\n          isEnglish={i18n?.language === 'en'}\r\n        />\r\n      ),\r\n      name: 'LastName',\r\n    },\r\n    {\r\n      element: (\r\n        <EditablePersianSupportTextField\r\n          disabled={enableEdit}\r\n          label={FindLangKey(\r\n            'complete-user-information-input-father-name',\r\n            languageArray\r\n          )}\r\n          Initialvalue={ArabicToPersian(\r\n            userInformation.FatherName\r\n          )}\r\n          isEnglish={i18n?.language === 'en'}\r\n        />\r\n      ),\r\n      name: 'FatherName',\r\n    },\r\n    {\r\n      element: (\r\n        <EditablePersianSupportTextField\r\n          disabled={enableEdit}\r\n          label={FindLangKey(\r\n            'general-public-mobile-number',\r\n            languageArray\r\n          )}\r\n          Initialvalue={userInformation.Mobile}\r\n          isEnglish={i18n?.language === 'en'}\r\n        />\r\n      ),\r\n      name: 'Mobile',\r\n    },\r\n    {\r\n      element: (\r\n        <EditablePersianSupportTextField\r\n          disabled={enableEdit}\r\n          label={FindLangKey(\r\n            'signup-input-email',\r\n            languageArray\r\n          )}\r\n          Initialvalue={userInformation.Email}\r\n          isEnglish={i18n?.language === 'en'}\r\n        />\r\n      ),\r\n      name: 'Email',\r\n    },\r\n    {\r\n      element: (\r\n        <EditablePersianSupportTextField\r\n          disabled={enableEdit}\r\n          label={FindLangKey(\r\n            'complete-user-information-input-birth-day',\r\n            languageArray\r\n          )}\r\n          Initialvalue={userInformation.BirthDate}\r\n          isEnglish={i18n?.language === 'en'}\r\n        />\r\n      ),\r\n      name: 'BirthDate',\r\n    },\r\n    {\r\n      element: (\r\n        // <EditablePersianSupportTextField\r\n        //   label={FindLangKey(\r\n        //     \"complete-user-information-input-city-born\",\r\n        //     languageArray\r\n        //   )}\r\n        //   Initialvalue={userInformation.nameCityTavalod}\r\n        //   isEnglish={i18n?.language === \"en\"}\r\n        // />\r\n        <ComponentMemoizer\r\n          element={\r\n            <EditableCustomizableAutoComplete\r\n              disabled={enableEdit}\r\n              isSingle={true}\r\n              label={FindLangKey(\r\n                'complete-user-information-input-city-born'\r\n              )}\r\n              defaultValue={[\r\n                userInformation.nameCityTavalod,\r\n              ]}\r\n              SelectableDataArray={cityList}\r\n            />\r\n          }\r\n          dependecies={[userInformation.nameCityTavalod]}\r\n        />\r\n      ),\r\n      name: 'nameCityTavalod',\r\n    },\r\n    {\r\n      element: (\r\n        // <EditablePersianSupportTextField\r\n        //   label={FindLangKey(\r\n        //     \"complete-user-information-input-city-live\",\r\n        //     languageArray\r\n        //   )}\r\n        //   Initialvalue={userInformation.nameCitySokonat}\r\n        //   isEnglish={i18n?.language === \"en\"}\r\n        // />\r\n\r\n        // <EditableCustomizableSelect\r\n        //   disabled={true}\r\n        //   isSingle={true}\r\n        //   label={FindLangKey(\r\n        //     \"complete-user-information-input-city-live\",\r\n        //     languageArray\r\n        //   )}\r\n        //   initialData={[\r\n        //     {\r\n        //       ItemValue: userInformation.nameCitySokonat,\r\n        //       ItemContent: userInformation.nameCitySokonat,\r\n        //     },\r\n        //   ]}\r\n        //   SelectableDataArray={[\r\n        //     {\r\n        //       ItemValue: userInformation.idCitySokonat,\r\n        //       ItemContent: userInformation.nameCitySokonat,\r\n        //     },\r\n        //   ]}\r\n        // />\r\n        <></>\r\n      ),\r\n      name: 'nameCitySokonat',\r\n    },\r\n\r\n    {\r\n      element: (\r\n        <EditablePersianSupportTextField\r\n          label={FindLangKey(\r\n            'general-public-address',\r\n            languageArray\r\n          )}\r\n          Initialvalue={ArabicToPersian(\r\n            userInformation.Address\r\n          )}\r\n          isEnglish={i18n?.language === 'en'}\r\n        />\r\n      ),\r\n      name: 'Address',\r\n      required: true,\r\n    },\r\n    {\r\n      element: (\r\n        <EditablePersianSupportTextField\r\n          label={FindLangKey(\r\n            'complete-user-information-input-telephone',\r\n            languageArray\r\n          )}\r\n          Initialvalue={userInformation.Telephon}\r\n          isEnglish={i18n?.language === 'en'}\r\n        />\r\n      ),\r\n      name: 'Telephon',\r\n      required: true,\r\n    },\r\n  ];\r\n  return completeUserProfileDataArray;\r\n};\r\n","export const CompleteUserProfileDefaultValues = (userInformation) => {\r\n  const completeProfileDefaultValues = {\r\n    FirstName: userInformation?.FirstName,\r\n    LastName: userInformation?.LastName,\r\n    FatherName: userInformation?.FatherName,\r\n    BirthDate: userInformation?.BirthDate,\r\n    NationalCode: userInformation?.NationalCode,\r\n    Address: userInformation?.Address,\r\n    Telephon: userInformation?.Telephon,\r\n    Mobile: userInformation?.Mobile,\r\n    FullName: userInformation?.FullName,\r\n    Email: userInformation?.Email,\r\n    Id: userInformation?.Id,\r\n    IdGender: userInformation?.IdGender,\r\n    NameGender: userInformation?.NameGender,\r\n    idCitySokonat: userInformation?.idCitySokonat,\r\n    idCityTavalod: userInformation?.idCityTavalod,\r\n  };\r\n  return completeProfileDefaultValues;\r\n};\r\n","import EditableCustomizableAutoComplete from 'Global/Components/EditableComponents/EditableCustomizableAutoComplete/EditableCustomizableAutoComplete';\r\nimport EditableCustomizableSelect from 'Global/Components/EditableComponents/EditableCustomizableSelect/EditableCustomizableSelect';\r\nimport EditableMuiDatePicker from 'Global/Components/EditableComponents/EditableMuiDatePicker/EditableMuiDatePicker';\r\nimport EditablePersianSupportTextField from 'Global/Components/EditableComponents/EditablePersianSupportTextField';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { ArabicToPersian } from 'utils/ConvertToPersianTextFromArabic';\r\n\r\nconst useCompleteUserProfileDataArray = (\r\n  userInformation,\r\n  languageArray,\r\n  i18n,\r\n  enableEdit,\r\n  cityList,\r\n  genderList,\r\n  taholList,\r\n  defaultParams\r\n) => {\r\n  const [dataArray, setDataArray] = useState();\r\n\r\n  const fName_label = FindLangKey(\r\n    'complete-user-input-first-name'\r\n  );\r\n  const lName_label = FindLangKey(\r\n    'complete-user-input-last-name'\r\n  );\r\n  const fatherName_label = FindLangKey(\r\n    'complete-user-information-input-father-name'\r\n  );\r\n\r\n  const mobileNumber = FindLangKey(\r\n    'general-public-mobile-number'\r\n  );\r\n  const email_label = FindLangKey('signup-input-email');\r\n\r\n  const bDay_label = FindLangKey(\r\n    'complete-user-information-input-birth-day'\r\n  );\r\n\r\n  const city_born = FindLangKey(\r\n    'complete-user-information-input-city-born'\r\n  );\r\n\r\n  const address_label = FindLangKey(\r\n    'general-public-address'\r\n  );\r\n\r\n  const telNumber = FindLangKey(\r\n    'complete-user-information-input-telephone'\r\n  );\r\n\r\n  const label_gender = FindLangKey(\r\n    'general-public-word-gender'\r\n  );\r\n  const label_tahol = FindLangKey(\r\n    'save-patients-for-visit-form-input-marriage-state'\r\n  );\r\n\r\n  // console.log('userInformation--->',userInformation)\r\n\r\n  // console.log('--->', userInformation);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      cityList &&\r\n      userInformation.nameCityTavalod &&\r\n      genderList&&\r\n      taholList\r\n    ) {\r\n      setDataArray([\r\n        {\r\n          element: (\r\n            <EditablePersianSupportTextField\r\n              disabled={enableEdit}\r\n              label={fName_label}\r\n              Initialvalue={ArabicToPersian(\r\n                userInformation.FirstName\r\n              )}\r\n              isEnglish={i18n?.language === 'en'}\r\n            />\r\n          ),\r\n          name: 'FirstName',\r\n        },\r\n        {\r\n          element: (\r\n            <EditablePersianSupportTextField\r\n              disabled={enableEdit}\r\n              label={lName_label}\r\n              Initialvalue={ArabicToPersian(\r\n                userInformation.LastName\r\n              )}\r\n              isEnglish={i18n?.language === 'en'}\r\n            />\r\n          ),\r\n          name: 'LastName',\r\n        },\r\n    \r\n        {\r\n          element: (\r\n            <EditablePersianSupportTextField\r\n              disabled={enableEdit}\r\n              label={fatherName_label}\r\n              Initialvalue={ArabicToPersian(\r\n                userInformation.FatherName\r\n              )}\r\n              isEnglish={i18n?.language === 'en'}\r\n            />\r\n          ),\r\n          name: 'FatherName',\r\n        },    {\r\n          element: (\r\n            <EditableCustomizableSelect\r\n              disabled={enableEdit}\r\n              isSingle={true}\r\n              label={label_gender}\r\n              initialData={[\r\n                {\r\n                  ItemValue: genderList?.filter(\r\n                    (fl) =>\r\n                      fl.ItemValue ===\r\n                      userInformation.IdGender\r\n                  )[0]?.ItemContent || \"\",\r\n                  ItemContent: genderList?.filter(\r\n                    (fl) =>\r\n                      fl.ItemValue ===\r\n                      userInformation.IdGender\r\n                  )[0]?.ItemContent || \"\",\r\n                },\r\n              ]}\r\n              SelectableDataArray={genderList}\r\n              enableInitialOnchange={true}\r\n            />\r\n          ),\r\n          name: 'IdGender',\r\n          required: true,\r\n        },\r\n        {\r\n          element: (\r\n            <EditableCustomizableSelect\r\n              isSingle={true}\r\n              disabled={enableEdit}\r\n              label={label_tahol}\r\n              SelectableDataArray={taholList}\r\n              isEnglish={i18n?.language === 'en'}\r\n              initialData={[\r\n                {\r\n                  ItemContent:ArabicToPersian(userInformation.nameTaahol)||\"\",\r\n                  ItemValue:ArabicToPersian(userInformation.nameTaahol)||\"\"\r\n                }\r\n              ]}\r\n              enableInitialOnchange={true}\r\n            />\r\n          ),\r\n          name: 'idTaahol',\r\n          required:true\r\n        },\r\n        {\r\n          element: (\r\n            <EditablePersianSupportTextField\r\n              disabled={enableEdit}\r\n              label={mobileNumber}\r\n              Initialvalue={userInformation.Mobile}\r\n              isEnglish={i18n?.language === 'en'}\r\n            />\r\n          ),\r\n          name: 'Mobile',\r\n        },\r\n        {\r\n          element: (\r\n            <EditablePersianSupportTextField\r\n              disabled={enableEdit}\r\n              label={email_label}\r\n              Initialvalue={userInformation.Email}\r\n              isEnglish={i18n?.language === 'en'}\r\n            />\r\n          ),\r\n          name: 'Email',\r\n        },\r\n        {\r\n          element: (\r\n            <EditableMuiDatePicker\r\n            Disabled={enableEdit}\r\n              Placeholder={bDay_label}\r\n              initialValue={userInformation.BirthDate}\r\n              isEnglish={i18n?.language === 'en'}\r\n            />\r\n          ),\r\n          name: 'BirthDate',\r\n        },\r\n        {\r\n          element: (\r\n            // <EditablePersianSupportTextField\r\n            //   label={FindLangKey(\r\n            //     \"complete-user-information-input-city-born\",\r\n            //     languageArray\r\n            //   )}\r\n            //   Initialvalue={userInformation.nameCityTavalod}\r\n            //   isEnglish={i18n?.language === \"en\"}\r\n            // />\r\n\r\n            <EditableCustomizableAutoComplete\r\n              disabled={enableEdit}\r\n              isSingle={true}\r\n              label={city_born}\r\n              defaultValue={ArabicToPersian(\r\n                userInformation.nameCityTavalod\r\n               )||\r\n             ArabicToPersian(cityList?.filter((fl)=>fl?.id === defaultParams?.idCityDifault)[0]?.label)\r\n              \r\n              }\r\n              SelectableDataArray={cityList}\r\n              initialOnChange={true}\r\n            />\r\n          ),\r\n          name: 'nameCityTavalod',\r\n        },\r\n    \r\n       \r\n\r\n        {\r\n          element: (\r\n            <EditablePersianSupportTextField\r\n              label={address_label}\r\n              Initialvalue={ArabicToPersian(\r\n                userInformation.Address\r\n              )}\r\n              isEnglish={i18n?.language === 'en'}\r\n            />\r\n          ),\r\n          name: 'Address',\r\n          required: true,\r\n        },\r\n        {\r\n          element: (\r\n            <EditablePersianSupportTextField\r\n              label={telNumber}\r\n              Initialvalue={userInformation.Telephon}\r\n              isEnglish={i18n?.language === 'en'}\r\n            />\r\n          ),\r\n          name: 'Telephon',\r\n          required: true,\r\n        },\r\n      ]);\r\n    }\r\n  }, [\r\n    userInformation,\r\n    languageArray,\r\n    i18n,\r\n    enableEdit,\r\n    cityList,\r\n    genderList,\r\n    taholList\r\n  ]);\r\n\r\n  return dataArray;\r\n};\r\n\r\nexport default useCompleteUserProfileDataArray;\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { ArabicToPersian } from 'utils/ConvertToPersianTextFromArabic';\r\nimport { Post } from 'Xhr/Xhr';\r\n\r\nconst useGetGenderList = () => {\r\n  const [genderList, setGenderList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    Post(\r\n      'POST',\r\n      `${process.env.REACT_APP_API_URL_API_GET_USER_GENDER_LIST}`,\r\n      true,\r\n      { Id: 0 }\r\n    ).then((r) => {\r\n      // console.log('rrr-->', r);\r\n\r\n      if (r.data.resCode === 1) {\r\n        setGenderList(\r\n          r.data.Data.list.map((el) => ({\r\n            ItemContent: ArabicToPersian(el.Name),\r\n            ItemValue: el.Id,\r\n          }))\r\n        );\r\n      } else {\r\n        SwalAlert('error', r.data.resMessage, false);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return genderList;\r\n};\r\n\r\nexport default useGetGenderList;\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { ArabicToPersian } from 'utils/ConvertToPersianTextFromArabic';\r\nimport { Post } from 'Xhr/Xhr';\r\n\r\nconst useGetTaholList = () => {\r\n   const[taholList,setTaholList] = useState([]);\r\n\r\n   useEffect(()=>{\r\n    Post('Post',`${process.env.REACT_APP_API_URL_API_GET_MARTIAL_STATUS_LIST}`,{})\r\n    .then((response)=>{\r\n        if(response.data.resCode === 1){\r\n            setTaholList(response.data.Data.list.map((el)=>({\r\n                ItemContent:ArabicToPersian(el.Name),\r\n                ItemValue:el.Id\r\n            })))\r\n        }else{\r\n           SwalAlert('error',response.data.resMessage,false);\r\n        }\r\n    })\r\n   },[]);\r\n\r\n   return taholList;\r\n}\r\n\r\nexport default useGetTaholList","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { ArabicToPersian } from 'utils/ConvertToPersianTextFromArabic';\r\nimport { Post } from 'Xhr/Xhr';\r\n\r\nconst useGetCityList = () => {\r\n  const [cityList, setCityList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    Post(\r\n      'Post',\r\n      `${process.env.REACT_APP_API_URL_API_GET_CITY_LIST}`,\r\n      true,\r\n      {}\r\n    ).then((r) => {\r\n      if (r.data.resCode === 1) {\r\n        setCityList(\r\n          r.data.Data.list.map((el) => ({\r\n            label: ArabicToPersian(el.Name),\r\n            id: el.Id,\r\n          }))\r\n        );\r\n      } else {\r\n        SwalAlert('error', r.data.resMessage, false);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return cityList;\r\n};\r\n\r\nexport default useGetCityList;\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Get } from 'Xhr/Xhr'\r\n\r\nconst useGetDefaultParamApp = () => {\r\n\r\n    const[defaultParams,setDefaultParams] = useState();\r\n \r\n    useEffect(()=>{\r\n        Get(`${process.env.REACT_APP_API_URL_API_DOCTOR_GET_DEFAULT_PARAM_APP}`,{}).then((res)=>{\r\n        \r\n            // console.log('the res=>',res)\r\n\r\n            if(res.data.resCode === 1){\r\n                setDefaultParams(res.data.Data)\r\n            }else{\r\n                SwalAlert('error',res.data.resMessage,false);\r\n            }\r\n        \r\n            \r\n        })\r\n      },[]);\r\n\r\n\r\n      return defaultParams;\r\n}\r\n\r\nexport default useGetDefaultParamApp","import {\r\n  Container,\r\n  LinearProgress,\r\n  Stack,\r\n} from '@mui/material';\r\nimport SubmitButton from 'Global/Components/UnEditableComponents/SubmitButton/SubmitButton';\r\nimport ReactHookFormGenerator from 'Global/ReactHookFormGenerator/ReactHookFormGenerator';\r\nimport React, { useEffect } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { HandleFormSubmit } from './Functions/HandleFormSubmit';\r\nimport useGatherUserInformation from './Hooks/useGatherUserInformation';\r\nimport { CompleteUserProfileDataArray } from './Variables/CompleteUserProfileDataArray';\r\nimport { CompleteUserProfileDefaultValues } from './Variables/CompleteUserProfileDefaultValues';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useContext } from 'react';\r\nimport { GlobalContext } from 'Global/Context/GlobalContextProvider';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport Cookies from 'js-cookie';\r\nimport useCompleteUserProfileDataArray from './Hooks/useCompleteUserProfileDataArray';\r\nimport useGetGenderList from '../../../Global/Adapters/useGetGenderList';\r\nimport useGetTaholList from '../../../Global/Adapters/useGetTaholList';\r\nimport useGetCityList from 'Global/Adapters/useGetCityList';\r\nimport useGetDefaultParamApp from 'Global/Adapters/useGetDefaultParamApp';\r\nimport { formatData } from './Functions/formatData';\r\n\r\nconst CompleteProfileUser = () => {\r\n\r\n  const defaultParams = useGetDefaultParamApp();\r\n  const cityList = useGetCityList();\r\n  const genderList = useGetGenderList();\r\n  const taholList = useGetTaholList();\r\n\r\n\r\n\r\n  const { userInformation } = useGatherUserInformation();\r\n  const { control, formState, handleSubmit } = useForm({\r\n    defaultValues:\r\n      CompleteUserProfileDefaultValues(userInformation),\r\n  });\r\n  const { t, i18n } = useTranslation();\r\n  const languageArray =\r\n    useContext(GlobalContext)?.LanguageArray;\r\n  const roles = useContext(GlobalContext).roles;\r\n\r\n  const user_cookie = JSON.parse(Cookies.get('user'));\r\n  const enableEdit = user_cookie?.CommitedHisInfo;\r\n\r\n\r\n\r\n\r\n  \r\n  const dataArray = useCompleteUserProfileDataArray(\r\n    userInformation,\r\n    languageArray,\r\n    i18n,\r\n    enableEdit,\r\n    cityList,\r\n    genderList,taholList,defaultParams\r\n  );\r\n\r\n  const save_label = FindLangKey('general-public-btn-save');\r\n\r\n   const userId = user_cookie?.Id\r\n\r\n \r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Container maxWidth=\"md\">\r\n        <form\r\n          onSubmit={handleSubmit((data) => {\r\n             \r\n\r\n            formatData(cityList,genderList,data,user_cookie,userId,HandleFormSubmit,userInformation);\r\n            \r\n           \r\n            HandleFormSubmit(data, userInformation);\r\n\r\n         \r\n\r\n          })}\r\n        >\r\n          <Stack\r\n            marginTop=\"1em\"\r\n            sx={{\r\n              gap: '.5em',\r\n            }}\r\n          >\r\n            {dataArray ? (\r\n              <ReactHookFormGenerator\r\n                control={control}\r\n                formState={formState}\r\n                DataArray={dataArray}\r\n              />\r\n            ) : (\r\n              <LinearProgress />\r\n            )}\r\n            {dataArray ? (\r\n              <SubmitButton label={save_label} />\r\n            ) : (\r\n              <></>\r\n            )}\r\n\r\n            <br />\r\n          </Stack>\r\n        </form>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default CompleteProfileUser;\r\n","export const formatData = (cityList,genderList,data,user_cookie,userId,HandleFormSubmit,userInformation)=>{\r\n    const cityId = cityList?.filter(\r\n        (fl) => fl.label === data.nameCityTavalod\r\n      )[0]?.id;\r\n      const genderId = genderList?.filter(\r\n        (fl) => fl.ItemValue === data.IdGender\r\n      )[0]?.ItemValue;\r\n\r\n      data.idCityTavalod = cityId;\r\n      data.idCitySokonat = data.idCityTavalod;\r\n\r\n      data.FullName =`${data.FirstName} ${data.LastName}`;\r\n      data.Id = userId\r\n\r\n      data.IdGender = genderId; \r\n      data.NationalCode = user_cookie.NationalCode;\r\n      data.NameGender = genderList?.filter(\r\n        (fl) => fl.ItemValue === data.IdGender\r\n      )[0]?.ItemContent\r\n      // HandleFormSubmit(data, userInformation);\r\n}"],"names":["HandleFormSubmit","data","profileInfo","key","undefined","async","Post","concat","process","then","response","resCode","SwalAlert","resMessage","SubmitUserInformation","useGatherUserInformation","userInformation","setUserInformation","React","_JSON$parse","Id","Cookies","JSON","parse","Data","GetUserInformation","CompleteUserProfileDefaultValues","FirstName","LastName","FatherName","BirthDate","NationalCode","Address","Telephon","Mobile","FullName","Email","IdGender","NameGender","idCitySokonat","idCityTavalod","useCompleteUserProfileDataArray","languageArray","i18n","enableEdit","cityList","genderList","taholList","defaultParams","dataArray","setDataArray","useState","fName_label","FindLangKey","lName_label","fatherName_label","mobileNumber","email_label","bDay_label","city_born","address_label","telNumber","label_gender","label_tahol","useEffect","_genderList$filter$","_genderList$filter$2","_cityList$filter$","nameCityTavalod","element","_jsx","EditablePersianSupportTextField","disabled","label","Initialvalue","ArabicToPersian","isEnglish","language","name","EditableCustomizableSelect","isSingle","initialData","ItemValue","filter","fl","ItemContent","SelectableDataArray","enableInitialOnchange","required","nameTaahol","EditableMuiDatePicker","Disabled","Placeholder","initialValue","EditableCustomizableAutoComplete","defaultValue","id","idCityDifault","initialOnChange","useGetGenderList","setGenderList","r","list","map","el","Name","useGetTaholList","setTaholList","useGetCityList","setCityList","useGetDefaultParamApp","setDefaultParams","Get","res","CompleteProfileUser","_useContext","control","formState","handleSubmit","useForm","defaultValues","t","useTranslation","useContext","GlobalContext","LanguageArray","user_cookie","roles","CommitedHisInfo","save_label","userId","children","Container","maxWidth","onSubmit","formatData","cityId","genderId","_jsxs","Stack","marginTop","sx","gap","ReactHookFormGenerator","DataArray","LinearProgress","SubmitButton","_Fragment"],"sourceRoot":""}