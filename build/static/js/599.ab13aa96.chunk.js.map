{"version":3,"file":"static/js/599.ab13aa96.chunk.js","mappings":"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","sources":["Global/Hooks/useSortSelectedPatientsToTop.js","Global/shared/page.refresh.atom.js","Routes/Protected/CurrentPatients/Adapters/EndPatientTreatment.js","Routes/Protected/CurrentPatients/Adapters/CancelReferral.js","Routes/Protected/CurrentPatients/Components/FileReportSummaryWithoutAPI/FileReportSummaryWithoutAPI.js","Routes/Protected/CurrentPatients/Components/Operations/Operations.js","Routes/Protected/CurrentPatients/Components/Operations/variables/variables.js","Routes/Protected/CurrentPatients/Components/Operations/OperationsVariablesRest.js","Routes/Protected/CurrentPatients/Components/EachPatient/Functions/HandleControlContextMenu.js","Routes/Protected/CurrentPatients/Components/EachPatient/logic/useEachPatientLogic.js","Routes/Protected/CurrentPatients/Components/EachPatient/variables/variables.js","Routes/Protected/CurrentPatients/Adapters/ChangeHozoorDateTime.js","Routes/Protected/CurrentPatients/Components/EachPatient/component/DateTimeHoozor/DateTimeHoozor.js","Routes/Protected/CurrentPatients/Adapters/ChangePatientDetection.js","Routes/Protected/CurrentPatients/Components/EachPatient/component/DetectionBox/DetectionBox.js","Routes/Protected/CurrentPatients/Components/EachPatient/Functions/HandleSetQuickActions.js","Routes/Protected/CurrentPatients/Components/EachPatient/EachPatient.js","webpack://new-ui/./src/Routes/Protected/CurrentPatients/Styles/Current.Patient.module.scss?345f"],"sourcesContent":["import React from \"react\";\r\n\r\nconst useSortSelectedPatientsToTop = (PatientList) => {\r\n  const [userFile, setUserFile] = React.useState(null);\r\n  React.useEffect(() => {\r\n    const userFileValue = sessionStorage.getItem(\"userFile\");\r\n    if (userFileValue && userFileValue.length > 0) {\r\n      setUserFile(JSON.parse(userFileValue));\r\n    }\r\n    const storageEventHandler = (event) => {\r\n      if (event.key === \"userFile\") {\r\n        const value = event.newValue;\r\n        setUserFile(value && value.length > 0 ? value : null);\r\n      }\r\n    };\r\n    window.addEventListener(\"storage\", storageEventHandler);\r\n    return () => {\r\n      window.removeEventListener(\"storage\", storageEventHandler);\r\n    };\r\n  }, []);\r\n  const sortedObjects = PatientList?.sort((a, b) => {\r\n    if (userFile) {\r\n      const aIndex = userFile.indexOf(a.Id);\r\n      const bIndex = userFile.indexOf(b.Id);\r\n      if (aIndex === -1) {\r\n        return 1; // a is not found in numbers, move it dow\r\n      } else if (bIndex === -1) {\r\n        return -1;\r\n      } else {\r\n        return aIndex - bIndex;\r\n      }\r\n    }\r\n  });\r\n\r\n  const userFilePatients = userFile ? sortedObjects : PatientList;\r\n  return userFilePatients;\r\n};\r\n\r\nexport default useSortSelectedPatientsToTop;\r\n","import { atom } from \"jotai\";\r\n\r\nexport const pageRefreshAtom = atom(false);\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const EndPatientTreatment = (\r\n  setPageRefresh,\r\n  setForceRender\r\n) => {\r\n  const confirmEndTreatmentMsg = FindLangKey(\r\n    'current-patients-alert-end-treamtment-sure'\r\n  );\r\n  const endTreatment = (patient) => {\r\n    const dialogFn = () =>\r\n      Post(\r\n        'POST',\r\n        `${process.env.REACT_APP_API_URL_API_END_USER_TREATMENT}`,\r\n        true,\r\n        {\r\n          idAppWorkList: patient?.Id,\r\n        }\r\n      ).then((response) => {\r\n        if (response.data.resCode === 1) {\r\n          SwalAlert(\r\n            'success',\r\n            response.data.resMessage,\r\n            false\r\n          );\r\n        } else {\r\n          SwalAlert(\r\n            'warning',\r\n            response.data.resMessage,\r\n            false\r\n          );\r\n        }\r\n        setForceRender((prev) => !prev);\r\n      });\r\n    SwalAlert(\r\n      'warning',\r\n      confirmEndTreatmentMsg,\r\n      true,\r\n      dialogFn\r\n    );\r\n  };\r\n  return endTreatment;\r\n};\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nconst CancelReferral = () => {\r\n  const confirmCancelMsg = FindLangKey(\r\n    'current-patients-alert-confirm-cancel-redirect'\r\n  );\r\n  const cancelSuccessMsg = FindLangKey(\r\n    'current-patients-alert-cancel-successful'\r\n  );\r\n  const runAPI = (Patient, setForceRender) => {\r\n    const DialogFn = () => {\r\n      Post(\r\n        'POST',\r\n        `${process.env.REACT_APP_API_URL_API_CANCEL_REDIRECT}`,\r\n        true,\r\n        {\r\n          idAppWorkList: Patient?.Id,\r\n          idPerson: Patient?.IdPerson,\r\n          cancleCouse: '',\r\n        }\r\n      ).then((response) => {\r\n        if (response.data.resCode === 1) {\r\n          SwalAlert('success', cancelSuccessMsg, false);\r\n          setForceRender((prev) => !prev);\r\n        } else {\r\n          SwalAlert(\r\n            'warning',\r\n            response.data.resMessage,\r\n            false\r\n          );\r\n        }\r\n      });\r\n    };\r\n    SwalAlert('warning', confirmCancelMsg, true, DialogFn);\r\n  };\r\n  return runAPI;\r\n};\r\nexport default CancelReferral;\r\n","import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Button,\r\n  LinearProgress,\r\n  Stack,\r\n} from '@mui/material';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\n// import useGetSummaryList from './hooks/useGetSummaryList';\r\nimport EditableCustomizableSelect from 'Global/Components/EditableComponents/EditableCustomizableSelect/EditableCustomizableSelect';\r\nimport { themeColors } from 'Global/JsxThemeColor/JsxThemeColor';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport i18next from 'i18next';\r\nimport useCheckScreenWidth from 'Global/Hooks/useCheckScreenWidth';\r\nimport { GetDocumentSummury } from 'Routes/Protected/PatientsForVisit/adapters/GetDocumentSummury';\r\n\r\nconst FileReportSummaryWithoutAPI = ({\r\n  Patient,\r\n  documentSummaryList,\r\n}) => {\r\n  const screenWidth = useCheckScreenWidth(); // 1024 for Desktop\r\n\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState(false);\r\n  const [summaryInput, setSummaryInput] = useState();\r\n\r\n  //   const documentSummaryList = useGetSummaryList();\r\n  const inputLable = FindLangKey(\r\n    'patients-for-visit-summary-input-label'\r\n  );\r\n\r\n  const data = {\r\n    IdPatient: Patient.IdPatient,\r\n    Id: summaryInput,\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   if (summaryInput) {\r\n  //     GetDocumentSummury(data);\r\n  //   }\r\n  // }, [summaryInput]);\r\n\r\n  const print_label = FindLangKey(\r\n    'general-public-label-print'\r\n  );\r\n  const preview_label = FindLangKey(\r\n    'genral-public-label-show-by'\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Stack>\r\n        {Array.isArray(documentSummaryList) ? (\r\n          <>\r\n            <EditableCustomizableSelect\r\n              SelectableDataArray={documentSummaryList}\r\n              isSingle={true}\r\n              label={inputLable}\r\n              onChange={setSummaryInput}\r\n              isEnglish={i18next.language === 'en'}\r\n              initialData={\r\n                documentSummaryList?.length === 1\r\n                  ? [\r\n                      {\r\n                        ItemContent:\r\n                          documentSummaryList[0]\r\n                            .ItemContent,\r\n                        ItemValue:\r\n                          documentSummaryList[0]\r\n                            .ItemContent,\r\n                      },\r\n                    ]\r\n                  : null\r\n              }\r\n            />\r\n            <Stack gap=\".3em\" mt=\".5em\">\r\n              <Button\r\n                variant=\"contained\"\r\n                sx={{\r\n                  color: `${themeColors.ColorPrimary} !important`,\r\n                }}\r\n                onClick={() => {\r\n                  GetDocumentSummury(\r\n                    data,\r\n                    'print',\r\n                    setLoading,\r\n                    navigate,\r\n                    screenWidth\r\n                  );\r\n                }}\r\n                disabled={!summaryInput}\r\n              >\r\n                {print_label}\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                sx={{\r\n                  color: `${themeColors.ColorPrimary} !important`,\r\n                }}\r\n                onClick={() => {\r\n                  GetDocumentSummury(\r\n                    data,\r\n                    'preview',\r\n                    setLoading,\r\n                    navigate,\r\n                    screenWidth\r\n                  );\r\n                }}\r\n                disabled={!summaryInput}\r\n              >\r\n                {preview_label}\r\n              </Button>\r\n            </Stack>\r\n            {loading ? (\r\n              <LinearProgress sx={{ mt: '1em' }} />\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default FileReportSummaryWithoutAPI;\r\n","import { Container, Stack } from '@mui/material';\r\nimport React, { useContext, useState } from 'react';\r\nimport PatientInfoStack from '../EachPatient/component/PatientInfoStack';\r\nimport { OperationsVariables } from './variables/variables';\r\nimport { GlobalContext } from 'Global/Context/GlobalContextProvider';\r\nimport { useTranslation } from 'react-i18next';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport { ArabicToPersian } from 'utils/ConvertToPersianTextFromArabic';\r\nimport { OperationsVariablesRest } from './OperationsVariablesRest';\r\nimport ComponentMemoizer from 'Global/Components/ComponentMemoizer/ComponentMemoizer';\r\nimport FileReportSummaryWithoutAPI from '../FileReportSummaryWithoutAPI/FileReportSummaryWithoutAPI';\r\nconst Operations = ({\r\n  Patient,\r\n  setForceRender,\r\n  disableActions,\r\n  setQuickOperations,\r\n  memoQuickOperationsFileSummary,\r\n  HandleSetQuickActions,\r\n  documentSummaryList,\r\n}) => {\r\n  const [openSummaryInput, setOpenSummaryInput] =\r\n    useState(false);\r\n  const { t, i18n } = useTranslation();\r\n  const OperationsData = OperationsVariables(\r\n    t,\r\n    setForceRender,\r\n    disableActions,\r\n    setOpenSummaryInput,\r\n    setQuickOperations,\r\n    HandleSetQuickActions,\r\n    Patient\r\n  );\r\n  const OperationsDataRest = OperationsVariablesRest(\r\n    t,\r\n    setForceRender,\r\n    disableActions\r\n  );\r\n  const GlobalConstants = useContext(GlobalContext);\r\n\r\n  const imgHeader = 'data:image/svg+xml;base64,';\r\n\r\n  const cachedIcons = JSON.parse(\r\n    localStorage.getItem('icons')\r\n  );\r\n\r\n  const patientAddress = `${FindLangKey(\r\n    'general-public-address'\r\n  )}: ${ArabicToPersian(Patient.PatientAddress)}`;\r\n\r\n  const patientForm = `${FindLangKey(\r\n    'general-public-mobile-number'\r\n  )}: ${Patient.PatientMobile}`;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <PatientInfoStack\r\n        setForceRender={setForceRender}\r\n        ImageSource={\r\n          imgHeader +\r\n          cachedIcons?.GeneralIcon['Address.svg']\r\n        }\r\n        paragraph={patientAddress}\r\n        i18n={i18n}\r\n      />\r\n      <PatientInfoStack\r\n        setForceRender={setForceRender}\r\n        ImageSource={\r\n          imgHeader + cachedIcons?.GeneralIcon['Mobile.svg']\r\n        }\r\n        paragraph={patientForm}\r\n        i18n={i18n}\r\n      />\r\n\r\n      <Container>\r\n        <hr />\r\n      </Container>\r\n\r\n      {OperationsData?.map(\r\n        (element) =>\r\n          !element?.disabled && (\r\n            <PatientInfoStack\r\n              ImageSource={element?.image}\r\n              paragraph={element?.title}\r\n              key={GlobalConstants.uuidV4()}\r\n              clickable={true}\r\n              navigate={GlobalConstants.navigate}\r\n              path={element.path}\r\n              Patient={Patient}\r\n              func={element?.func}\r\n              setForceRender={setForceRender}\r\n              i18n={i18n}\r\n            />\r\n          )\r\n      )}\r\n      {memoQuickOperationsFileSummary ? (\r\n        <ComponentMemoizer\r\n          element={\r\n            <Container\r\n              sx={{\r\n                bgcolor: 'white',\r\n                paddingY: '.3em',\r\n                borderRadius: '13px',\r\n              }}\r\n            >\r\n              <FileReportSummaryWithoutAPI\r\n                Patient={Patient}\r\n                documentSummaryList={documentSummaryList}\r\n              />\r\n            </Container>\r\n          }\r\n          dependecies={[memoQuickOperationsFileSummary]}\r\n        />\r\n      ) : (\r\n        <></>\r\n      )}\r\n      {OperationsDataRest?.map(\r\n        (element) =>\r\n          !element?.disabled && (\r\n            <PatientInfoStack\r\n              ImageSource={element?.image}\r\n              paragraph={element?.title}\r\n              key={GlobalConstants.uuidV4()}\r\n              clickable={true}\r\n              navigate={GlobalConstants.navigate}\r\n              path={element.path}\r\n              Patient={Patient}\r\n              func={element?.func}\r\n              setForceRender={setForceRender}\r\n              i18n={i18n}\r\n            />\r\n          )\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Operations;\r\n","import { EndPatientTreatment } from 'Routes/Protected/CurrentPatients/Adapters/EndPatientTreatment';\r\nimport { useContext } from 'react';\r\nimport { GlobalContext } from 'Global/Context/GlobalContextProvider';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport AccessControl from 'Global/security/AccessControl';\r\nimport { useLocation } from 'react-router-dom';\r\nimport CancelReferral from 'Routes/Protected/CurrentPatients/Adapters/CancelReferral';\r\nimport useCheckScreenWidth from 'Global/Hooks/useCheckScreenWidth';\r\nimport { useAtom } from 'jotai';\r\nimport { pageRefreshAtom } from 'Global/shared/page.refresh.atom';\r\nexport const OperationsVariables = (\r\n  t,\r\n  setForceRender,\r\n  disableActions,\r\n  setOpenSummaryInput,\r\n  setQuickOperations,\r\n  HandleSetQuickActions,\r\n  Patient\r\n) => {\r\n  const screenWidth = useCheckScreenWidth(); // 1024 for Desktop\r\n  const languageArray =\r\n    useContext(GlobalContext)?.LanguageArray;\r\n  const { pathname } = useLocation();\r\n  const runAPI = CancelReferral();\r\n  const [, setPageRefresh] = useAtom(pageRefreshAtom);\r\n  const endTreatment = EndPatientTreatment(\r\n    setPageRefresh,\r\n    setForceRender\r\n  );\r\n\r\n  const cachedIcons = JSON.parse(\r\n    localStorage.getItem('icons')\r\n  );\r\n  const imgHeader = 'data:image/svg+xml;base64,';\r\n\r\n  const DataArray = [\r\n    {\r\n      ...(disableActions\r\n        ? {}\r\n        : {\r\n            title: FindLangKey(\r\n              'general-public-add-new-confer',\r\n              languageArray\r\n            ),\r\n            image:\r\n              imgHeader +\r\n              cachedIcons?.MenueIcon[\r\n                'Serviceregistration.svg'\r\n              ],\r\n            path:\r\n              screenWidth > 1024\r\n                ? '/main/AddNewConfer'\r\n                : '/AddNewConfer',\r\n            func: sessionStorage.removeItem(\r\n              'savedServices'\r\n            ),\r\n            disabled: AccessControl(\r\n              pathname.toLowerCase() ===\r\n                '/CurrentPatients'.toLowerCase()\r\n                ? 'current-patient-action-set-confer'\r\n                : 'patient-list-action-set-confer'\r\n            ),\r\n          }),\r\n    },\r\n    {\r\n      title: FindLangKey(\r\n        'current-patients-patient-actions-list-service-confer',\r\n        languageArray\r\n      ),\r\n      image:\r\n        imgHeader +\r\n        cachedIcons?.MenueIcon['Viewservices.svg'],\r\n      path:\r\n        screenWidth > 1024\r\n          ? '/main/ListServiceConfer'\r\n          : '/ListServiceConfer',\r\n      disabled: AccessControl(\r\n        pathname.toLowerCase() ===\r\n          '/CurrentPatients'.toLowerCase()\r\n          ? 'current-patient-action-list-service-confer'\r\n          : 'patient-list-action-list-service-confer'\r\n      ),\r\n    },\r\n    {\r\n      ...(disableActions\r\n        ? {}\r\n        : {\r\n            title: FindLangKey(\r\n              'current-patients-patient-actions-medical-form',\r\n              languageArray\r\n            ),\r\n            image:\r\n              imgHeader +\r\n              cachedIcons?.MenueIcon[\r\n                'Medicalrecord.svg'\r\n              ],\r\n            path:\r\n              screenWidth > 1024\r\n                ? '/main/AddNewElectronicForm'\r\n                : '/AddNewElectronicForm',\r\n            disabled: AccessControl(\r\n              pathname.toLowerCase() ===\r\n                '/CurrentPatients'.toLowerCase()\r\n                ? 'current-patient-action-medical-form'\r\n                : 'patient-list-action-medical-form'\r\n            ),\r\n          }),\r\n    },\r\n    {\r\n      title: FindLangKey(\r\n        'current-patients-patient-actions-service-summary',\r\n        languageArray\r\n      ),\r\n      image:\r\n        imgHeader +\r\n        cachedIcons?.MenueIcon['Summary Case.svg'],\r\n      func: () => {\r\n        HandleSetQuickActions(\r\n          Patient.Id,\r\n          2,\r\n          setQuickOperations\r\n        );\r\n      },\r\n      disabled: AccessControl(\r\n        pathname.toLowerCase() ===\r\n          '/CurrentPatients'.toLowerCase()\r\n          ? 'current-patient-action-confer-summurary'\r\n          : 'patient-list-action-confer-summurary'\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return DataArray;\r\n};\r\n","import { EndPatientTreatment } from 'Routes/Protected/CurrentPatients/Adapters/EndPatientTreatment';\r\nimport { useContext } from 'react';\r\nimport { GlobalContext } from 'Global/Context/GlobalContextProvider';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport AccessControl from 'Global/security/AccessControl';\r\nimport { useLocation } from 'react-router-dom';\r\nimport CancelReferral from 'Routes/Protected/CurrentPatients/Adapters/CancelReferral';\r\nimport useCheckScreenWidth from 'Global/Hooks/useCheckScreenWidth';\r\nimport { useAtom } from 'jotai';\r\nimport { pageRefreshAtom } from 'Global/shared/page.refresh.atom';\r\nexport const OperationsVariablesRest = (\r\n  t,\r\n  setForceRender,\r\n  disableActions,\r\n  setOpenSummaryInput\r\n) => {\r\n  const screenWidth = useCheckScreenWidth(); // 1024 for Desktop\r\n  const languageArray =\r\n    useContext(GlobalContext)?.LanguageArray;\r\n  const { pathname } = useLocation();\r\n  const runAPI = CancelReferral();\r\n  const [, setPageRefresh] = useAtom(pageRefreshAtom);\r\n  const endTreatment = EndPatientTreatment(\r\n    setPageRefresh,\r\n    setForceRender\r\n  );\r\n\r\n  const cachedIcons = JSON.parse(\r\n    localStorage.getItem('icons')\r\n  );\r\n  const imgHeader = 'data:image/svg+xml;base64,';\r\n\r\n  const DataArray = [\r\n    {\r\n      ...(disableActions\r\n        ? {}\r\n        : {\r\n            title: FindLangKey(\r\n              'current-patients-patient-actions-end-treatment',\r\n              languageArray\r\n            ),\r\n            image:\r\n              imgHeader +\r\n              cachedIcons?.GeneralIcon['EndOfActivity.svg'],\r\n            func: endTreatment,\r\n            disabled: AccessControl(\r\n              pathname.toLowerCase() ===\r\n                '/CurrentPatients'.toLowerCase()\r\n                ? 'current-patient-action-end-treatment'\r\n                : 'patient-list-action-end-treatment'\r\n            ),\r\n          }),\r\n    },\r\n\r\n    {\r\n      ...(disableActions\r\n        ? {}\r\n        : {\r\n            title: FindLangKey(\r\n              'current-patients-patient-actions-cancel-referral',\r\n              languageArray\r\n            ),\r\n            image:\r\n              imgHeader +\r\n              cachedIcons?.GeneralIcon[\r\n                'CanceledReferral.svg'\r\n              ],\r\n            func: runAPI,\r\n            disabled: AccessControl(\r\n              pathname.toLowerCase() ===\r\n                '/CurrentPatients'.toLowerCase()\r\n                ? 'current-patient-action-cancel-referral'\r\n                : 'patient-list-action-cancel-redirect'\r\n            ),\r\n          }),\r\n    },\r\n    {\r\n      title: FindLangKey(\r\n        'general-public-refer-to',\r\n        languageArray\r\n      ),\r\n      image:\r\n        imgHeader + cachedIcons?.GeneralIcon['ReferTo.svg'],\r\n      path:\r\n        screenWidth > 1024 ? '/main/ReferTo' : '/ReferTo',\r\n      disabled: AccessControl(\r\n        pathname.toLowerCase() ===\r\n          '/CurrentPatients'.toLowerCase()\r\n          ? 'current-patient-action-refer-to'\r\n          : 'patient-list-action-refer-to'\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return DataArray;\r\n};\r\n","export const HandleControlContextMenu = (setUserFileArray, Patient) => {\r\n  let userFileArray = JSON.parse(sessionStorage.getItem(\"userFile\")) || [];\r\n  if (userFileArray.indexOf(Patient.Id) === -1) {\r\n    userFileArray.push(Patient.Id);\r\n    sessionStorage.setItem(\"userFile\", JSON.stringify(userFileArray));\r\n    setUserFileArray(JSON.parse(sessionStorage.getItem(\"userFile\")));\r\n  } else {\r\n    let index = userFileArray.indexOf(Patient.Id);\r\n    userFileArray.splice(index, 1);\r\n    sessionStorage.setItem(\"userFile\", JSON.stringify(userFileArray));\r\n    setUserFileArray(JSON.parse(sessionStorage.getItem(\"userFile\")));\r\n  }\r\n};\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { InformationDataArray } from \"../variables/variables\";\r\nimport { GlobalContext } from \"Global/Context/GlobalContextProvider\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\n\r\nconst useEachPatientLogic = (Patient) => {\r\n  const [userFileArray, setUserFileArray] = useState(\r\n    JSON.parse(sessionStorage.getItem(\"userFile\")) || []\r\n  );\r\n\r\n  const [quickOperations, setQuickOperations] = useState(\r\n    JSON.parse(sessionStorage.getItem(\"quickActions\")) || []\r\n  );\r\n\r\n  const informationData = InformationDataArray(Patient);\r\n  const GlobalConstants = useContext(GlobalContext);\r\n  const { i18n } = useTranslation();\r\n  const languageArray = useContext(GlobalContext)?.LanguageArray;\r\n\r\n  const cachedIcons = JSON.parse(localStorage.getItem(\"icons\"));\r\n  const imgHeader = \"data:image/svg+xml;base64,\";\r\n\r\n  const timeHozoorLabel = `${FindLangKey(\r\n    \"general-public-label-presence-time\"\r\n  )}: ${Patient.DateHozoor}  ${Patient.TimeHozoor}`;\r\n\r\n  return [\r\n    userFileArray,\r\n    setUserFileArray,\r\n    informationData,\r\n    GlobalConstants,\r\n    languageArray,\r\n    cachedIcons,\r\n    imgHeader,\r\n    timeHozoorLabel,\r\n    i18n,\r\n    quickOperations,\r\n    setQuickOperations,\r\n  ];\r\n};\r\n\r\nexport default useEachPatientLogic;\r\n","import { ArabicToPersian } from \"utils/ConvertToPersianTextFromArabic\";\r\nimport { useContext } from \"react\";\r\nimport { GlobalContext } from \"Global/Context/GlobalContextProvider\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\nexport const InformationDataArray = (Patient) => {\r\n  const languageArray = useContext(GlobalContext)?.LanguageArray;\r\n  const cachedIcons = JSON.parse(localStorage.getItem(\"icons\"));\r\n  const imgHeader = \"data:image/svg+xml;base64,\";\r\n  const DataArray = [\r\n    {\r\n      title: `${FindLangKey(\r\n        \"general-public-insurance-type\",\r\n        languageArray\r\n      )}: ${ArabicToPersian(Patient.InsuranceName)}`,\r\n      image: imgHeader + cachedIcons?.GeneralIcon[\"Insurance.svg\"],\r\n    },\r\n    {\r\n      title: `${FindLangKey(\r\n        \"general-public-label-patient\",\r\n        languageArray\r\n      )}: ${ArabicToPersian(Patient.NamePatient)} ${ArabicToPersian(\r\n        Patient.FamilyPatient\r\n      )} ${Patient.AgePatient} سال`,\r\n      image: imgHeader + cachedIcons?.GeneralIcon[\"PatientName.svg\"],\r\n    },\r\n    // {\r\n    //   title: `${FindLangKey(\r\n    //     \"general-public-address\",\r\n    //     languageArray\r\n    //   )}: ${ArabicToPersian(Patient.PatientAddress)}`,\r\n    //   image: imgHeader + cachedIcons?.GeneralIcon[\"Address.svg\"],\r\n    // },\r\n\r\n    // {\r\n    //   title: `${FindLangKey(\r\n    //     \"general-public-label-presence-time\",\r\n    //     languageArray\r\n    //   )}: ${Patient.DateHozoor}  ${Patient.TimeHozoor}`,\r\n    //   image: imgHeader + cachedIcons?.GeneralIcon[\"AttendenceTime.svg\"],\r\n    // },\r\n\r\n    // {\r\n    //   title: `${FindLangKey(\"general-public-mobile-number\", languageArray)}: ${\r\n    //     Patient.PatientMobile\r\n    //   }`,\r\n    //   image: imgHeader + cachedIcons?.GeneralIcon[\"Mobile.svg\"],\r\n    // },\r\n\r\n    // {\r\n    //   title: `${FindLangKey(\r\n    //     \"general-public-label-diagnose\",\r\n    //     languageArray\r\n    //   )} : ${Patient.NameDiagnosis}`,\r\n    //   image: imgHeader + cachedIcons?.GeneralIcon[\"Detection.svg\"],\r\n    // },\r\n  ];\r\n  return DataArray;\r\n};\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const ChangeHozoorDateTime = (\r\n  date,\r\n  time,\r\n  patient,\r\n  setForceRender\r\n) => {\r\n  const confirmEditTimeHozoor = FindLangKey(\r\n    'current-patients-label-change-presence'\r\n  );\r\n\r\n  const changePresence = (patient) => {\r\n    const dialogFn = () =>\r\n      Post(\r\n        'POST',\r\n        `${process.env.REACT_APP_API_URL_API_CHANGE_PRESENCEDATE}`,\r\n        true,\r\n        {\r\n          dateHozoor: date,\r\n          timeHozoor: time,\r\n          idAppWorkList: patient?.Id,\r\n        }\r\n      )\r\n        .then((response) => {\r\n          if (response.data.resCode === 1) {\r\n            SwalAlert(\r\n              'success',\r\n              response.data.resMessage,\r\n              false\r\n            );\r\n          } else {\r\n            SwalAlert(\r\n              'warning',\r\n              response.data.resMessage,\r\n              false\r\n            );\r\n          }\r\n        })\r\n        .then(() => {\r\n          setForceRender((prev) => !prev);\r\n        });\r\n    SwalAlert(\r\n      'warning',\r\n      confirmEditTimeHozoor,\r\n      true,\r\n      dialogFn\r\n    );\r\n  };\r\n  return changePresence;\r\n};\r\n","import React, { useMemo, useState } from 'react';\r\nimport { Stack, Button } from '@mui/material';\r\nimport EditableSingularTimePicker from 'Global/Components/EditableComponents/EditableSingularTimePicker/EditableSingularTimePicker';\r\nimport EditableMuiDatePicker from 'Global/Components/EditableComponents/EditableMuiDatePicker/EditableMuiDatePicker';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport { TimeToMinutes } from 'utils/TimeToMinutes';\r\nimport { ChangeHozoorDateTime } from 'Routes/Protected/CurrentPatients/Adapters/ChangeHozoorDateTime';\r\nimport { themeColors } from 'Global/JsxThemeColor/JsxThemeColor';\r\n\r\nconst DateTimeHoozor = ({ Patient, setForceRender }) => {\r\n  const changeTimeLabel = FindLangKey(\r\n    'general-public-btn-save'\r\n  );\r\n  const timeHozooerLabel = FindLangKey(\r\n    'general-public-label-presence-time'\r\n  );\r\n  const dateHozooerLabel = FindLangKey(\r\n    'general-public-label-presence-date'\r\n  );\r\n\r\n  const [dateTime, setDateTime] = useState({\r\n    timeHoozoor: TimeToMinutes(Patient?.TimeHozoor),\r\n    dateHoozoor: '',\r\n  });\r\n\r\n  const changePresence = ChangeHozoorDateTime(\r\n    dateTime.dateHoozoor,\r\n    dateTime.timeHoozoor,\r\n    Patient,\r\n    setForceRender\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Stack gap=\".5em\">\r\n        <Stack\r\n          direction=\"row\"\r\n          gap=\".5em\"\r\n          justifyContent=\"space-between\"\r\n        >\r\n          <EditableSingularTimePicker\r\n            initalValue={Patient?.TimeHozoor}\r\n            OutputInMinutes={true}\r\n            label={timeHozooerLabel}\r\n            onChange={(val) => {\r\n              setDateTime((prev) => ({\r\n                ...prev,\r\n                timeHoozoor: val,\r\n              }));\r\n            }}\r\n            fullWidth\r\n          />\r\n          <EditableMuiDatePicker\r\n            disableInit={true}\r\n            initialValue={Patient?.DateHozoor}\r\n            Placeholder={dateHozooerLabel}\r\n            onChange={(val) => {\r\n              setDateTime((prev) => ({\r\n                ...prev,\r\n                dateHoozoor: val,\r\n              }));\r\n            }}\r\n            disableToday={false}\r\n            fullWidth\r\n          />\r\n        </Stack>\r\n        <br />\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            changePresence(Patient);\r\n          }}\r\n          sx={{\r\n            mb: '1em',\r\n            mt: '-.6em',\r\n            color: `${themeColors.ColorPrimary} !important`,\r\n          }}\r\n        >\r\n          {changeTimeLabel}\r\n        </Button>\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DateTimeHoozor;\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const ChangePatientDetection = (setForceRender) => {\r\n  const confirmEditTimeHozoor = FindLangKey(\r\n    'current-patients-label-change-detection'\r\n  );\r\n\r\n  const changeDetection = (data) => {\r\n    const dialogFn = () =>\r\n      Post(\r\n        'POST',\r\n        `${process.env.REACT_APP_API_URL_API_EDIT_TASHKHIST_ERJA}`,\r\n        true,\r\n        {\r\n          ...data,\r\n        }\r\n      )\r\n        .then((response) => {\r\n          console.log('response->', { response, data });\r\n          if (response.data.resCode === 1) {\r\n            SwalAlert(\r\n              'success',\r\n              response.data.resMessage,\r\n              false\r\n            );\r\n          } else {\r\n            SwalAlert(\r\n              'warning',\r\n              response.data.resMessage,\r\n              false\r\n            );\r\n          }\r\n        })\r\n        .then(() => {\r\n          setForceRender((prev) => !prev);\r\n        });\r\n    SwalAlert(\r\n      'warning',\r\n      confirmEditTimeHozoor,\r\n      true,\r\n      dialogFn\r\n    );\r\n  };\r\n  return changeDetection;\r\n};\r\n","import React, { useMemo } from 'react';\r\nimport {\r\n  Stack,\r\n  LinearProgress,\r\n  Button,\r\n} from '@mui/material';\r\nimport EditableCustomizableSelect from 'Global/Components/EditableComponents/EditableCustomizableSelect/EditableCustomizableSelect';\r\nimport { ArabicToPersian } from 'utils/ConvertToPersianTextFromArabic';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport SingleReactHookFormWrapper from 'Global/Components/Generators/SingleReactHookFormWrapper/SingleReactHookFormWrapper';\r\nimport { useForm } from 'react-hook-form';\r\nimport SubmitButton from 'Global/Components/UnEditableComponents/SubmitButton/SubmitButton';\r\nimport { ChangePatientDetection } from 'Routes/Protected/CurrentPatients/Adapters/ChangePatientDetection';\r\nimport useCheckScreenWidth from 'Global/Hooks/useCheckScreenWidth';\r\n\r\nconst DetectionBox = ({\r\n  Patient,\r\n  setForceRender,\r\n  detections,\r\n}) => {\r\n  const screenWidth = useCheckScreenWidth(); // 1024 for Desktop\r\n\r\n  const detection_msg = FindLangKey(\r\n    'general-public-label-diagnose'\r\n  );\r\n  const save_msg = FindLangKey('general-public-btn-save');\r\n\r\n  const memoDetections = useMemo(\r\n    () => detections,\r\n    [JSON.stringify(detections)]\r\n  );\r\n\r\n  const detectionDataArray = memoDetections?.map(\r\n    (detection) => ({\r\n      ItemContent: ArabicToPersian(detection?.Name),\r\n      ItemValue: detection?.Id,\r\n    })\r\n  );\r\n\r\n  // console.log('detectionDataArray->', detectionDataArray);\r\n\r\n  const { control, formState, handleSubmit } = useForm({\r\n    defaultValues: {\r\n      idAppWorkList: Patient?.Id,\r\n      idTashkhis: '',\r\n    },\r\n  });\r\n\r\n  const changeDetection =\r\n    ChangePatientDetection(setForceRender);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <form\r\n        onSubmit={handleSubmit((data) => {\r\n          changeDetection(data);\r\n        })}\r\n        onWheel={(event) => {\r\n          event.stopPropagation();\r\n        }}\r\n        onTouchMove={(event) => {\r\n          event.stopPropagation();\r\n        }}\r\n      >\r\n        <Stack gap=\".5em\">\r\n          {detectionDataArray ? (\r\n            <SingleReactHookFormWrapper\r\n              element={\r\n                <EditableCustomizableSelect\r\n                  initialData={[\r\n                    {\r\n                      ItemContent: ArabicToPersian(\r\n                        Patient?.NameDiagnosis\r\n                      ),\r\n                      ItemValue: ArabicToPersian(\r\n                        Patient?.NameDiagnosis\r\n                      ),\r\n                    },\r\n                  ]}\r\n                  isSingle={true}\r\n                  SelectableDataArray={detectionDataArray}\r\n                  label={detection_msg}\r\n                  enableInitialOnchange={true}\r\n                />\r\n              }\r\n              control={control}\r\n              errors={formState.errors}\r\n              name=\"idTashkhis\"\r\n              required={true}\r\n            />\r\n          ) : (\r\n            <LinearProgress />\r\n          )}\r\n          <SubmitButton label={save_msg} />\r\n        </Stack>\r\n      </form>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DetectionBox;\r\n","export const HandleSetQuickActions = (\r\n  patientId,\r\n  actionType,\r\n  setQuickActions\r\n) => {\r\n  let quickAction = JSON.parse(sessionStorage.getItem(\"quickActions\")) || [];\r\n\r\n  if (quickAction.some((el) => el.patientId === patientId)) {\r\n    let index = quickAction.findIndex(\r\n      (element) => element.patientId === patientId\r\n    );\r\n    quickAction.splice(index, 1);\r\n    sessionStorage.setItem(\"quickActions\", JSON.stringify(quickAction));\r\n    setQuickActions(JSON.parse(sessionStorage.getItem(\"quickActions\")));\r\n  } else {\r\n    quickAction.push({\r\n      patientId,\r\n      actionType,\r\n    });\r\n    sessionStorage.setItem(\"quickActions\", JSON.stringify(quickAction));\r\n    setQuickActions(JSON.parse(sessionStorage.getItem(\"quickActions\")));\r\n  }\r\n};\r\n","import React, {\r\n  useContext,\r\n  useMemo,\r\n  useState,\r\n} from 'react';\r\nimport styles from '../../Styles/Current.Patient.module.scss';\r\nimport Operations from '../Operations/Operations';\r\nimport PatientInfoStack from './component/PatientInfoStack';\r\nimport { ArabicToPersian } from 'utils/ConvertToPersianTextFromArabic';\r\nimport { Box, IconButton } from '@mui/material';\r\nimport { HandleControlContextMenu } from './Functions/HandleControlContextMenu';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport useEachPatientLogic from './logic/useEachPatientLogic';\r\nimport DateTimeHoozor from './component/DateTimeHoozor/DateTimeHoozor';\r\nimport { themeColors } from 'Global/JsxThemeColor/JsxThemeColor';\r\nimport DetectionBox from './component/DetectionBox/DetectionBox';\r\nimport { HandleSetQuickActions } from './Functions/HandleSetQuickActions';\r\nimport GetPostResponse from 'Global/Functions/GetPostResponse/GetPostResponse';\r\nimport { env } from 'env';\r\nimport {\r\n  KeyboardDoubleArrowDown,\r\n  KeyboardDoubleArrowUp,\r\n} from '@mui/icons-material';\r\nconst EachPatient = ({\r\n  Patient,\r\n  setForceRender,\r\n  bgColor,\r\n  detections,\r\n  disableActions,\r\n  documentSummaryList,\r\n}) => {\r\n  // console.log(\r\n  //   'disableActionsdisableActions--->',\r\n  //   disableActions\r\n  // );\r\n\r\n  const detectionMsg = FindLangKey(\r\n    'general-public-label-diagnose'\r\n  );\r\n\r\n  // const [actiavtePicker, setActivatePicker] = useState(false);\r\n\r\n  const [\r\n    userFileArray,\r\n    setUserFileArray,\r\n    informationData,\r\n    GlobalConstants,\r\n    languageArray,\r\n    cachedIcons,\r\n    imgHeader,\r\n    timeHozoorLabel,\r\n    i18n,\r\n    quickOperations,\r\n    setQuickOperations,\r\n  ] = useEachPatientLogic(Patient);\r\n\r\n  const patientCheckData = [\r\n    Patient?.TedadMorajee,\r\n    Patient?.TedadForm,\r\n  ];\r\n  const patientStatus = patientCheckData?.every(\r\n    (el) => el > 0\r\n  )\r\n    ? 'lightgreen'\r\n    : Patient?.TedadMorajee > 0\r\n    ? 'skyblue'\r\n    : Patient?.TedadForm > 0\r\n    ? 'lightpink'\r\n    : patientCheckData?.every((el) => el === 0) && null;\r\n\r\n  const memoQuickOperationsDetection = useMemo(\r\n    () =>\r\n      quickOperations.some(\r\n        (element) =>\r\n          element.patientId === Patient.Id &&\r\n          element.actionType === 1\r\n      ),\r\n    [JSON.stringify(quickOperations)]\r\n  );\r\n  const memoQuickOperationsTimePresence = useMemo(\r\n    () =>\r\n      quickOperations.some(\r\n        (element) =>\r\n          element.patientId === Patient.Id &&\r\n          element.actionType === 0\r\n      ),\r\n    [JSON.stringify(quickOperations)]\r\n  );\r\n  const memoQuickOperationsFileSummary = useMemo(\r\n    () =>\r\n      quickOperations.some(\r\n        (element) =>\r\n          element.patientId === Patient.Id &&\r\n          element.actionType === 2\r\n      ),\r\n    [JSON.stringify(quickOperations)]\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className={styles.CardContent}\r\n      style={{\r\n        backgroundColor: patientStatus || bgColor || '',\r\n        color: `${themeColors.ColorPrimary}`,\r\n      }}\r\n    >\r\n      <Box\r\n        sx={{ all: 'inherit', p: 0 }}\r\n        // onClick={() => {\r\n        //   // HandleControlContextMenu(\r\n        //   //   setUserFileArray,\r\n        //   //   Patient\r\n        //   // );\r\n        //   // setActivatePicker(false);\r\n        //   // openDetectionList(false);\r\n        // }}\r\n      >\r\n        {informationData?.map((element) => (\r\n          <PatientInfoStack\r\n            ImageSource={element?.image}\r\n            paragraph={element?.title}\r\n            key={GlobalConstants.uuidV4()}\r\n            setForceRender={setForceRender}\r\n            i18n={i18n}\r\n          />\r\n        ))}\r\n      </Box>\r\n\r\n      <PatientInfoStack\r\n        ImageSource={\r\n          imgHeader +\r\n          cachedIcons?.GeneralIcon['Detection.svg']\r\n        }\r\n        paragraph={`${detectionMsg}: ${ArabicToPersian(\r\n          Patient.NameDiagnosis\r\n        )}`}\r\n        setForceRender={setForceRender}\r\n        i18n={i18n}\r\n        clickable={\r\n          !Patient?.CancelByDoctor &&\r\n          !Patient?.EndOfTreatment\r\n            ? true\r\n            : false\r\n        }\r\n        Patient={Patient}\r\n        func={() => {\r\n          if (\r\n            !Patient?.CancelByDoctor &&\r\n            !Patient?.EndOfTreatment\r\n          ) {\r\n            // openDetectionList((prev) => !prev);\r\n            HandleSetQuickActions(\r\n              Patient.Id,\r\n              1,\r\n              setQuickOperations\r\n            );\r\n          }\r\n        }}\r\n      />\r\n      {memoQuickOperationsDetection &&\r\n      !userFileArray.includes(Patient.Id) ? (\r\n        <DetectionBox\r\n          Patient={Patient}\r\n          setForceRender={setForceRender}\r\n          detections={detections}\r\n        />\r\n      ) : (\r\n        <></>\r\n      )}\r\n      <PatientInfoStack\r\n        ImageSource={\r\n          imgHeader +\r\n          cachedIcons?.GeneralIcon['AttendenceTime.svg']\r\n        }\r\n        paragraph={timeHozoorLabel}\r\n        setForceRender={setForceRender}\r\n        i18n={i18n}\r\n        clickable={\r\n          !Patient?.CancelByDoctor &&\r\n          !Patient?.EndOfTreatment\r\n            ? true\r\n            : false\r\n        }\r\n        Patient={Patient}\r\n        func={() => {\r\n          if (\r\n            !Patient?.CancelByDoctor &&\r\n            !Patient?.EndOfTreatment\r\n          ) {\r\n            // setActivatePicker((prev) => !prev);\r\n            HandleSetQuickActions(\r\n              Patient.Id,\r\n              0,\r\n              setQuickOperations\r\n            );\r\n          }\r\n        }}\r\n      />\r\n\r\n      {Patient?.DescErja !== '' ? (\r\n        <h4\r\n          style={{\r\n            color: 'red',\r\n            paddingInline: '.3em',\r\n            borderRadius: '3px',\r\n          }}\r\n        >\r\n          {FindLangKey(\r\n            'general-public-description',\r\n            languageArray\r\n          )}{' '}\r\n          : \r\n          {ArabicToPersian(Patient?.DescErja)}\r\n        </h4>\r\n      ) : (\r\n        <></>\r\n      )}\r\n\r\n      {!userFileArray.includes(Patient.Id) &&\r\n      !memoQuickOperationsTimePresence &&\r\n      !memoQuickOperationsDetection ? (\r\n        <IconButton\r\n          onClick={() => {\r\n            HandleControlContextMenu(\r\n              setUserFileArray,\r\n              Patient\r\n            );\r\n          }}\r\n          sx={{\r\n            alignSelf: 'center',\r\n          }}\r\n        >\r\n          <KeyboardDoubleArrowDown color=\"colorPrimer\" />\r\n        </IconButton>\r\n      ) : (\r\n        <></>\r\n      )}\r\n\r\n      {userFileArray.includes(Patient.Id) ? (\r\n        <Operations\r\n          Patient={Patient}\r\n          setForceRender={setForceRender}\r\n          disableActions={disableActions}\r\n          setQuickOperations={setQuickOperations}\r\n          memoQuickOperationsFileSummary={\r\n            memoQuickOperationsFileSummary\r\n          }\r\n          HandleSetQuickActions={HandleSetQuickActions}\r\n          documentSummaryList={documentSummaryList}\r\n        />\r\n      ) : (\r\n        <></>\r\n      )}\r\n\r\n      {userFileArray.includes(Patient.Id) ? (\r\n        <IconButton\r\n          onClick={() => {\r\n            HandleControlContextMenu(\r\n              setUserFileArray,\r\n              Patient\r\n            );\r\n          }}\r\n          sx={{\r\n            alignSelf: 'center',\r\n          }}\r\n        >\r\n          <KeyboardDoubleArrowUp color=\"colorPrimer\" />\r\n        </IconButton>\r\n      ) : (\r\n        <></>\r\n      )}\r\n      {memoQuickOperationsTimePresence &&\r\n      !userFileArray.includes(Patient.Id) ? (\r\n        <DateTimeHoozor\r\n          Patient={Patient}\r\n          setForceRender={setForceRender}\r\n        />\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EachPatient;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"frameGradient\":\"Current_Patient_frameGradient__fPhh6\",\"PatientCard\":\"Current_Patient_PatientCard__izZ8+\",\"CardContent\":\"Current_Patient_CardContent__S+RLf\",\"patientContainer\":\"Current_Patient_patientContainer__O08Fh\"};"],"names":["PatientList","userFile","setUserFile","React","userFileValue","sessionStorage","getItem","length","JSON","parse","storageEventHandler","event","key","value","newValue","window","addEventListener","removeEventListener","sortedObjects","sort","a","b","aIndex","indexOf","Id","bIndex","pageRefreshAtom","atom","EndPatientTreatment","setPageRefresh","setForceRender","confirmEndTreatmentMsg","FindLangKey","patient","SwalAlert","dialogFn","Post","concat","process","idAppWorkList","then","response","data","resCode","resMessage","prev","CancelReferral","confirmCancelMsg","cancelSuccessMsg","runAPI","Patient","DialogFn","idPerson","IdPerson","cancleCouse","_ref","documentSummaryList","screenWidth","useCheckScreenWidth","navigate","useNavigate","loading","setLoading","useState","summaryInput","setSummaryInput","inputLable","IdPatient","print_label","preview_label","_jsx","children","Stack","Array","isArray","_jsxs","_Fragment","EditableCustomizableSelect","SelectableDataArray","isSingle","label","onChange","isEnglish","i18next","initialData","ItemContent","ItemValue","gap","mt","Button","variant","sx","color","themeColors","onClick","GetDocumentSummury","disabled","LinearProgress","disableActions","setQuickOperations","memoQuickOperationsFileSummary","HandleSetQuickActions","openSummaryInput","setOpenSummaryInput","t","i18n","useTranslation","OperationsData","OperationsVariables","_useContext","languageArray","useContext","GlobalContext","LanguageArray","pathname","useLocation","useAtom","cachedIcons","localStorage","imgHeader","title","image","MenueIcon","path","func","removeItem","AccessControl","toLowerCase","OperationsDataRest","OperationsVariablesRest","endTreatment","GeneralIcon","GlobalConstants","patientAddress","ArabicToPersian","PatientAddress","patientForm","PatientMobile","PatientInfoStack","ImageSource","paragraph","Container","map","element","clickable","uuidV4","ComponentMemoizer","bgcolor","paddingY","borderRadius","FileReportSummaryWithoutAPI","dependecies","HandleControlContextMenu","setUserFileArray","userFileArray","push","setItem","stringify","index","splice","quickOperations","informationData","InsuranceName","NamePatient","FamilyPatient","AgePatient","InformationDataArray","DateHozoor","TimeHozoor","changeTimeLabel","timeHozooerLabel","dateHozooerLabel","dateTime","setDateTime","timeHoozoor","TimeToMinutes","dateHoozoor","changePresence","ChangeHozoorDateTime","date","time","confirmEditTimeHozoor","dateHozoor","timeHozoor","direction","justifyContent","EditableSingularTimePicker","initalValue","OutputInMinutes","val","fullWidth","EditableMuiDatePicker","disableInit","initialValue","Placeholder","disableToday","mb","detections","detection_msg","save_msg","memoDetections","useMemo","detectionDataArray","detection","Name","control","formState","handleSubmit","useForm","defaultValues","idTashkhis","changeDetection","console","log","ChangePatientDetection","onSubmit","onWheel","stopPropagation","onTouchMove","SingleReactHookFormWrapper","NameDiagnosis","enableInitialOnchange","errors","name","required","SubmitButton","patientId","actionType","setQuickActions","quickAction","some","el","findIndex","bgColor","detectionMsg","timeHozoorLabel","useEachPatientLogic","patientCheckData","TedadMorajee","TedadForm","patientStatus","every","memoQuickOperationsDetection","memoQuickOperationsTimePresence","className","styles","style","backgroundColor","Box","all","p","CancelByDoctor","EndOfTreatment","includes","DetectionBox","DescErja","paddingInline","IconButton","alignSelf","KeyboardDoubleArrowDown","Operations","KeyboardDoubleArrowUp","DateTimeHoozor"],"sourceRoot":""}