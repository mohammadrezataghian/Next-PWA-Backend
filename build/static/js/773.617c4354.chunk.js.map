{"version":3,"file":"static/js/773.617c4354.chunk.js","mappings":"yPAMO,MAAMA,EAAkBC,MAC7BC,EACAC,EACAC,EACAC,KAIAF,GAAW,IAEXG,EAAAA,EAAAA,MACE,OAAO,GAADC,OACHC,wBACH,EACA,IACKN,IAELO,MAAMC,IACHL,EACDA,EAAcK,EAASR,KAAKS,OAIA,IAA1BD,EAASR,KAAKU,SACdC,EAAAA,EAAAA,GAAiBH,EAASR,KAAKS,MAAK,IAEtCG,EAAAA,EAAAA,GAAU,QAASJ,EAASR,KAAKa,YAAY,GAE/CZ,GAAW,GAAM,GACjB,E,oGC5BW,SAASa,EAAkBC,GAAoC,IAAnC,OAACC,EAAM,kBAACC,EAAiB,MAACC,GAAMH,EACvE,MAAOI,EAASlB,IAAcmB,EAAAA,EAAAA,WAAS,GAGjCC,GAAyBC,EAAAA,EAAAA,GAC3B,6CAGJ,OACAC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACCC,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CACOC,WAAW,SACXC,GAAG,OACHC,IAAI,OAAML,SAAA,EAEVF,EAAAA,EAAAA,KAAA,KAAAE,UACGM,EAAAA,EAAAA,GAAgBf,EAAOgB,kBAE1BT,EAAAA,EAAAA,KAAA,KAAAE,UACGM,EAAAA,EAAAA,GAAgBf,EAAOiB,mBAE1BV,EAAAA,EAAAA,KAAA,KAAAE,UAAIM,EAAAA,EAAAA,GAAgBf,EAAOkB,SAC3BX,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAACY,EAAAA,EAAM,CACLC,QAAQ,YACRC,GAAI,CACFC,MAAM,GAADjC,OAAKkC,EAAAA,EAAAA,aAAwB,eAClCC,SAAU,OAEZC,WAAS,EACTC,QAASA,ICnCYC,EAAC3B,EAAOf,KAW7C,MAAM2C,EAAY,CAChBC,GAAG7B,EAAO6B,GACVC,gBAAgB9B,EAAO8B,gBACvBC,UAAU/B,EAAO+B,UACjBC,WAAWhC,EAAOgC,YAGpBlD,EAAgB8C,EAAU3C,EAAW,EAAM,KAAK,EDkB9B0C,CACE1B,EAAkBC,GAClBjB,GAEHwB,SAEAJ,IAGFF,GACCI,EAAAA,EAAAA,KAAC0B,EAAAA,EAAc,CAACZ,GAAI,CAAEa,MAAO,UAE7B3B,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,QAKpB,CE5CA,MAyGA,EAzGyB2B,KACvB,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAcC,EAAAA,EAAAA,KACdC,GAAWC,EAAAA,EAAAA,MACXC,EAAe,IAAIC,gBAAgBH,EAASI,QAC5CC,EAAiBH,EAAaI,IAAI,KAClCC,EAAYL,EAAaI,IAAI,aAC7BE,EAA0C,QAA5BD,EAAUE,MAAM,KAAK,GACnCC,ECfO,SACbH,EACAC,GAEA,MAAOG,EAAYC,IAAiBhD,EAAAA,EAAAA,aAC7BD,EAASlB,IAAcmB,EAAAA,EAAAA,WAAS,IAChCiD,EAAYlE,IAAiBiB,EAAAA,EAAAA,YA+BpC,OA7BAkD,EAAAA,EAAAA,YAAU,KACJN,GACED,IACFQ,EAAAA,EAAAA,GAAUR,EAAWK,EAEzB,GACC,CAACL,EAAWC,KAEfM,EAAAA,EAAAA,YAAU,KACR,GAAIP,GAAaI,EAAY,CAC3B,MAAMnD,EAASmD,EAAW,GAEpBvB,EAAY,CAChBC,GAAU,OAAN7B,QAAM,IAANA,OAAM,EAANA,EAAQ6B,GACZC,gBAAuB,OAAN9B,QAAM,IAANA,OAAM,EAANA,EAAQ8B,gBACzBC,UAAiB,OAAN/B,QAAM,IAANA,OAAM,EAANA,EAAQ+B,UACnBC,WAAkB,OAANhC,QAAM,IAANA,OAAM,EAANA,EAAQgC,YAElBgB,GACFlE,EACE8C,EACA3C,EACA,EACAE,EAGN,IACC,CAACgE,EAAYH,IAETK,CACT,CDvBwBG,CACpBT,EACAC,GAEI/C,EEpBO,SACb8C,EACAC,EACAH,GAEA,MAAOY,EAASC,IAActD,EAAAA,EAAAA,YAQ9B,OANAkD,EAAAA,EAAAA,YAAU,MACJP,GAAcC,GAAgBH,IAChCU,EAAAA,EAAAA,GAAUR,EAAWW,EACvB,GACC,CAACX,EAAWC,EAAYH,IAEpBY,CACT,CFM4BE,CACxBZ,EACAC,EACAH,GAqBF,OACEtC,EAAAA,EAAAA,KAACqD,EAAAA,SAAc,CAAAnD,SACZoC,GAAkBK,GACjBxC,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAAA,OACEsD,GAAG,SACHC,MAAO,CACLC,SAAU,SACVC,SAAU,QACVC,OAAQ,OACR/B,MAAO,QAET,wBAAA7C,OAAuBkC,EAAAA,EAAAA,gBACvB,0BAAAlC,OAAyBkC,EAAAA,EAAAA,cACzB,gBAAesB,GAAkBK,KAEnC3C,EAAAA,EAAAA,KAAA,OACEuD,MAAO,CACLE,SAAU,QACVE,IAAK,MACD5B,EAAc,KACd,CAAE6B,KAAM,IACR,CAAEC,MAAO,IACb9C,MAAM,GAADjC,OAAKkC,EAAAA,EAAAA,gBACV8C,OAAQ,WAEV3C,QAASA,KACPU,GAAU,EAAE,EACZ3B,UAEFF,EAAAA,EAAAA,KAAC+D,EAAAA,EAAY,SAGfrE,GACFM,EAAAA,EAAAA,KAACgE,EAAAA,EAAS,CACRlD,GAAI,CACFmD,GAAI,MACJC,QAAS,OACTC,cAAe,SACf5D,IAAK,OACLL,SAEgB,OAAjBR,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmB0E,KAAI,CAAC3E,EAAQE,KAC/BK,EAAAA,EAAAA,KAACqE,EAAAA,EAAS,CAERC,KACEtE,EAAAA,EAAAA,KAACT,EAAkB,CACjBE,OAAQA,EACRC,kBAAmBA,EACnBC,MAAOA,IAGX4E,UAAW,CACTxD,MAAOC,EAAAA,EAAAA,aACP8C,OAAQ,UACRU,YAAY,GAAD1F,OAAKkC,EAAAA,EAAAA,eAA0B,eAC1CyD,QAAS,OACTC,aAAc,SAbXjF,EAAO6B,SAmBlBtB,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,KAEa,C","sources":["Routes/Public/GetReportWithSMS/Adapters/DownloadReports.js","Routes/Public/GetReportWithSMS/Components/ReportCardInternal/ReportCardInternal.js","Routes/Public/GetReportWithSMS/functions/HandleDownloadNonDicomSms.js","Routes/Public/GetReportWithSMS/GetReportWithSMS.js","Routes/Public/GetReportWithSMS/Hooks/useGetDicomSmsReport.js","Routes/Public/GetReportWithSMS/Hooks/useGetNonDicomSmsReport.js"],"sourcesContent":["import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\nimport { Base64Downloader } from 'utils/Base64Downloader';\r\nimport { Base64toNewTab } from 'utils/Base64toNewTab';\r\n\r\nexport const DownloadReports = async (\r\n  data,\r\n  setLoading,\r\n  isShowReport,\r\n  setInstanceId\r\n) => {\r\n\r\n  \r\n  setLoading(true);\r\n\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_DOWNLOAD_SMS_REPORTS}`,\r\n    false,\r\n    {\r\n      ...data,\r\n    }\r\n  ).then((response) => {        \r\n    if(setInstanceId){\r\n      setInstanceId(response.data.Data)\r\n      return;\r\n    }\r\n\r\n    if (response.data.resCode === 1) {\r\n        Base64Downloader(response.data.Data,true);\r\n    } else {\r\n      SwalAlert('error', response.data.resMessage, false);\r\n    }\r\n    setLoading(false);\r\n  });\r\n};\r\n","import { Button, LinearProgress, Stack } from \"@mui/material\";\r\nimport { themeColors } from \"Global/JsxThemeColor/JsxThemeColor\";\r\nimport { ArabicToPersian } from \"utils/ConvertToPersianTextFromArabic\";\r\nimport { HandleDownloadNonDicomSms } from \"../../functions/HandleDownloadNonDicomSms\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function ReportCardInternal({report,smsNonDicomReport,index}) {\r\n    const [loading, setLoading] = useState(false);\r\n\r\n \r\n    const downloadNonDicomReport = FindLangKey(\r\n        'general-public-route-title-get-report-sms'\r\n      );\r\n \r\n    return (\r\n    <>\r\n     <Stack\r\n                  alignItems=\"center\"\r\n                  py=\".5em\"\r\n                  gap=\".5em\"\r\n                >\r\n                  <p>\r\n                    {ArabicToPersian(report.MahaleMorajee)}\r\n                  </p>\r\n                  <p>\r\n                    {ArabicToPersian(report.NameNoeMorajee)}\r\n                  </p>\r\n                  <p>{ArabicToPersian(report.Date)}</p>\r\n                  <br />\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    sx={{\r\n                      color: `${themeColors.ColorPrimary} !important`,\r\n                      maxWidth: '98%',\r\n                    }}\r\n                    fullWidth\r\n                    onClick={() =>\r\n                      HandleDownloadNonDicomSms(\r\n                        smsNonDicomReport[index],\r\n                        setLoading\r\n                      )\r\n                    }\r\n                  >\r\n                    {downloadNonDicomReport}\r\n                  </Button>\r\n\r\n                  {loading ? (\r\n                    <LinearProgress sx={{ width: '98%' }} />\r\n                  ) : (\r\n                    <></>\r\n                  )}\r\n                </Stack>\r\n    </>\r\n  )\r\n}\r\n","import { DownloadReports } from \"../Adapters/DownloadReports\";\r\n\r\nexport const HandleDownloadNonDicomSms = (report,setLoading)=>{\r\n\r\n\r\n    // const spilttedParams = report.split('-');\r\n    // const apiSchema = {\r\n    //     ID: spilttedParams[1], //2\r\n    //     NoeIdShakhesDev: spilttedParams[2], //3\r\n    //     IdPatient: spilttedParams[0], //1\r\n    //     TurnNumber: spilttedParams[3], //4\r\n    //   };\r\n\r\n    const apiSchema = {\r\n      ID:report.ID,\r\n      NoeIdShakhesDev:report.NoeIdShakhesDev,\r\n      IdPatient:report.IdPatient,\r\n      TurnNumber:report.TurnNumber\r\n    }\r\n   \r\n    DownloadReports(apiSchema,setLoading,false,null)\r\n\r\n}","import { ArrowBackIos } from '@mui/icons-material';\r\nimport { Container } from '@mui/material';\r\nimport useCheckScreenWidth from 'Global/Hooks/useCheckScreenWidth';\r\nimport { themeColors } from 'Global/JsxThemeColor/JsxThemeColor';\r\nimport React from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport useGetDicomSmsReport from './Hooks/useGetDicomSmsReport';\r\nimport useGetNonDicomSmsReport from './Hooks/useGetNonDicomSmsReport';\r\nimport FrameCard from 'Global/Components/CommonComponents/FrameCard/FrameCard';\r\nimport ReportCardInternal from './Components/ReportCardInternal/ReportCardInternal';\r\n\r\nconst GetReportWithSMS = () => {\r\n  const navigate = useNavigate();\r\n  const screenWidth = useCheckScreenWidth(); // 1024 for Desktop\r\n  const location = useLocation();\r\n  const searchParams = new URLSearchParams(location.search);\r\n  const dicom_instance = searchParams.get('i');\r\n  const smsReport = searchParams.get('keyConfer');\r\n  const isdicomLink = smsReport.split('-')[2] === '450';\r\n  const smsInstanceId = useGetDicomSmsReport(\r\n    smsReport,\r\n    isdicomLink\r\n  );\r\n  const smsNonDicomReport = useGetNonDicomSmsReport(\r\n    smsReport,\r\n    isdicomLink,\r\n    dicom_instance\r\n  );\r\n\r\n  // useEffect(()=>{\r\n\r\n  //   if(smsReport && !dicom_instance){\r\n  //     HandleDownloadNonDicomSms(\r\n  //       smsReport,\r\n  //       setLoading\r\n  //     )\r\n  //   }\r\n\r\n  // },[smsReport,dicom_instance])\r\n\r\n  // useEffect(()=>{\r\n  //   Get(`${process.env.REACT_APP_API_URL_API_DOCTOR_PACS_SERVER_INFO}`,true,{})\r\n  //   .then((res)=>{\r\n  //     console.log('res=>',res)\r\n  //   })\r\n  // },[])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {dicom_instance || smsInstanceId ? (\r\n        <>\r\n          <div\r\n            id=\"v-host\"\r\n            style={{\r\n              overflow: 'hidden',\r\n              position: 'fixed',\r\n              height: '100%',\r\n              width: '100%',\r\n            }}\r\n            data-primary-color={`${themeColors.ColorSecondary}`}\r\n            data-secondary-color={`${themeColors.ColorPrimary}`}\r\n            data-instance={dicom_instance || smsInstanceId}\r\n          ></div>\r\n          <div\r\n            style={{\r\n              position: 'fixed',\r\n              top: 10,\r\n              ...(screenWidth > 1024\r\n                ? { left: 10 }\r\n                : { right: 10 }),\r\n              color: `${themeColors.ColorSecondary}`,\r\n              cursor: 'pointer',\r\n            }}\r\n            onClick={() => {\r\n              navigate(-1);\r\n            }}\r\n          >\r\n            <ArrowBackIos />\r\n          </div>\r\n        </>\r\n      ) : smsNonDicomReport ? (\r\n        <Container\r\n          sx={{\r\n            mt: '1em',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            gap: '1em',\r\n          }}\r\n        >\r\n          {smsNonDicomReport?.map((report, index) => (\r\n            <FrameCard\r\n              key={report.ID}\r\n              jsx={\r\n                <ReportCardInternal\r\n                  report={report}\r\n                  smsNonDicomReport={smsNonDicomReport}\r\n                  index={index}\r\n                />\r\n              }\r\n              cardProps={{\r\n                color: themeColors.ColorPrimary,\r\n                cursor: 'pointer',\r\n                borderColor: `${themeColors.ColorSecondary} !important`,\r\n                padding: '.3em',\r\n                borderRadius: '20px',\r\n              }}\r\n            />\r\n          ))}\r\n        </Container>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default GetReportWithSMS;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { DownloadReports } from '../Adapters/DownloadReports';\r\nimport { GetReport } from '../Adapters/GetReport';\r\n\r\nexport default function useGetDicomSmsReport(\r\n  smsReport,\r\n  isdicomLink\r\n) {\r\n  const [reportList, setReportList] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n  const [instanceId, setInstanceId] = useState();\r\n\r\n  useEffect(() => {\r\n    if (isdicomLink) {\r\n      if (smsReport) {\r\n        GetReport(smsReport, setReportList);\r\n      }\r\n    }\r\n  }, [smsReport, isdicomLink]);\r\n\r\n  useEffect(() => {\r\n    if (smsReport && reportList) {\r\n      const report = reportList[0];\r\n\r\n      const apiSchema = {\r\n        ID: report?.ID,\r\n        NoeIdShakhesDev: report?.NoeIdShakhesDev,\r\n        IdPatient: report?.IdPatient,\r\n        TurnNumber: report?.TurnNumber,\r\n      };\r\n      if (isdicomLink) {\r\n        DownloadReports(\r\n          apiSchema,\r\n          setLoading,\r\n          true,\r\n          setInstanceId\r\n        );\r\n      }\r\n    }\r\n  }, [reportList, isdicomLink]);\r\n\r\n  return instanceId;\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { GetReport } from '../Adapters/GetReport';\r\n\r\nexport default function useGetNonDicomSmsReport(\r\n  smsReport,\r\n  isdicomLink,\r\n  dicom_instance\r\n) {\r\n  const [reports, setReports] = useState();\r\n\r\n  useEffect(() => {\r\n    if (smsReport && !isdicomLink && !dicom_instance) {\r\n      GetReport(smsReport, setReports);\r\n    }\r\n  }, [smsReport, isdicomLink,dicom_instance]);\r\n\r\n  return reports;\r\n}\r\n"],"names":["DownloadReports","async","data","setLoading","isShowReport","setInstanceId","Post","concat","process","then","response","Data","resCode","Base64Downloader","SwalAlert","resMessage","ReportCardInternal","_ref","report","smsNonDicomReport","index","loading","useState","downloadNonDicomReport","FindLangKey","_jsx","_Fragment","children","_jsxs","Stack","alignItems","py","gap","ArabicToPersian","MahaleMorajee","NameNoeMorajee","Date","Button","variant","sx","color","themeColors","maxWidth","fullWidth","onClick","HandleDownloadNonDicomSms","apiSchema","ID","NoeIdShakhesDev","IdPatient","TurnNumber","LinearProgress","width","GetReportWithSMS","navigate","useNavigate","screenWidth","useCheckScreenWidth","location","useLocation","searchParams","URLSearchParams","search","dicom_instance","get","smsReport","isdicomLink","split","smsInstanceId","reportList","setReportList","instanceId","useEffect","GetReport","useGetDicomSmsReport","reports","setReports","useGetNonDicomSmsReport","React","id","style","overflow","position","height","top","left","right","cursor","ArrowBackIos","Container","mt","display","flexDirection","map","FrameCard","jsx","cardProps","borderColor","padding","borderRadius"],"sourceRoot":""}