{"version":3,"file":"static/js/105.43d1dabe.chunk.js","mappings":"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","sources":["Global/Hooks/useObserverElement/useOberseveElement.js","Routes/Protected/AddNewConfer/Components/DesktopScrollUp/DesktopScrollUp.js","Routes/Protected/AddNewConfer/Adapters/ConferPriceCalculator.js","Routes/Protected/AddNewConfer/Hooks/useHandleConferPrice.js","Routes/Protected/AddNewConfer/Hooks/useHandleSessionStoreConfer.js","Routes/Protected/AddNewConfer/functions/HandleDecreaseCount.js","Routes/Protected/AddNewConfer/functions/HandleIncreaseCount.js","Routes/Protected/EditConfer/context/hooks/useCustomizedListRenderer.js","Routes/Protected/EditConfer/context/hooks/useTopSelectedObject.js","Routes/Protected/EditConfer/functions/HandleSearchItem.js","Routes/Protected/EditConfer/context/hooks/useSortListByConditions.js","Routes/Protected/EditConfer/Adapters/GetConferServices.js","Routes/Protected/EditConfer/Adapters/GetConferInfo.js","Routes/Protected/EditConfer/context/context.js","Routes/Protected/EditConfer/context/functions/FunctionArray.js","Routes/Protected/EditConfer/functions/ReplaceMatchingObjs.js","Routes/Protected/EditConfer/functions/HandleReplaceStoredItems.js","Routes/Protected/EditConfer/functions/removeDuplicates.js","Routes/Protected/EditConfer/Adapters/CalcByDetection.js","Routes/Protected/EditConfer/Components/Form/components/Insurance.js","Routes/Protected/EditConfer/Components/Form/components/CenterOff.js","Routes/Protected/EditConfer/Components/Form/components/DoctorOff.js","Routes/Protected/EditConfer/Components/Form/components/DetectionList.js","Routes/Protected/EditConfer/Components/Form/Form.js","webpack://new-ui/./src/Routes/Protected/EditConfer/style/Confer.general.style.module.scss?a19d","Routes/Protected/EditConfer/Components/Confers/components/ConferName.js","Routes/Protected/EditConfer/Components/Confers/components/ConferControls.js","Routes/Protected/EditConfer/Components/Confers/components/ConferPrice.js","Routes/Protected/EditConfer/Components/Confers/components/Confer.js","Routes/Protected/EditConfer/Components/Confers/components/ConferMap.js","Routes/Protected/EditConfer/Components/Confers/components/SearchBar.js","Routes/Protected/EditConfer/Components/Confers/Confers.js","Routes/Protected/EditConfer/Adapters/AddConfer.js","Routes/Protected/EditConfer/EditConfer.js","Routes/Protected/PatientList/Adapters/GetDetectionList.js","../node_modules/@mui/icons-material/esm/Add.js","../node_modules/@mui/icons-material/esm/AddTask.js","../node_modules/@mui/icons-material/esm/List.js","../node_modules/@mui/icons-material/esm/Remove.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst useOberseveElement = (ref) => {\r\n  const [inView, setInView] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver(([entry]) =>\r\n      setInView(entry.isIntersecting)\r\n    );\r\n    observer.observe(ref.current);\r\n    return () => {\r\n      observer.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  return inView;\r\n};\r\n\r\nexport default useOberseveElement;\r\n","import { KeyboardDoubleArrowUp } from '@mui/icons-material';\r\nimport { IconButton } from '@mui/material';\r\nimport useCheckScreenWidth from 'Global/Hooks/useCheckScreenWidth';\r\nimport { themeColors } from 'Global/JsxThemeColor/JsxThemeColor';\r\n\r\nimport React from 'react';\r\n\r\nconst DesktopScrollUp = ({ inView, scrollRef }) => {\r\n  const screenWidth = useCheckScreenWidth(); // 1024 for Desktop\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!inView && screenWidth > 1024 ? (\r\n        <IconButton\r\n          sx={{\r\n            alignSelf: 'center',\r\n            position: 'fixed',\r\n            backgroundColor: `${themeColors.ColorPrimary}`,\r\n          }}\r\n          onClick={() => {\r\n            scrollRef.current.scrollIntoView({\r\n              behavior: 'smooth',\r\n            });\r\n          }}\r\n        >\r\n          <KeyboardDoubleArrowUp\r\n            color=\"colorSecondar\"\r\n            sx={{\r\n              fontSize: '.7em',\r\n            }}\r\n          />\r\n        </IconButton>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DesktopScrollUp;\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { TimeToMinutes } from 'utils/TimeToMinutes';\r\nimport { env } from 'env';\r\n\r\nexport const ConferPriceCalculator = async (\r\n  idInsurance,\r\n  serviceID,\r\n  count,\r\n  SetPriceTag,\r\n  confer\r\n) => {\r\n  const patient = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  );\r\n\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_CALC_SERVICE_PRICE}`,\r\n    true,\r\n    {\r\n      dateeHozoor:\r\n        patient?.DateHozoor || patient?.InsertDate,\r\n      idInsurance: idInsurance,\r\n      idPerson: patient?.IdPerson || patient?.FldIdDoctor,\r\n      serviceID: serviceID,\r\n      timeHozoor: TimeToMinutes(\r\n        patient?.TimeHozoor || patient?.InsertTime\r\n      ),\r\n      count,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      const price = response.data.Data.list[0];\r\n      SetPriceTag((prev) =>\r\n        prev.map((element) =>\r\n          element.ID === confer.ID\r\n            ? {\r\n                ...element,\r\n                InsurancePart: price?.InsurancePart,\r\n                PatientPart: price?.PatientPart,\r\n                TotalPrice: price?.TotalPrice,\r\n              }\r\n            : element\r\n        )\r\n      );\r\n    } else\r\n      SwalAlert('error', response.data.resMessage, false);\r\n  });\r\n};\r\n","import React from \"react\";\r\nimport { ConferPriceCalculator } from \"../Adapters/ConferPriceCalculator\";\r\n\r\nconst useHandleConferPrice = (confer, context) => {\r\n  React.useEffect(() => {\r\n    if (confer?.Count > 0) {\r\n      ConferPriceCalculator(\r\n        context?.id_insurance,\r\n        confer.ID,\r\n        confer.Count,\r\n        context?.set_largelist,\r\n        confer\r\n      );\r\n    }\r\n  }, [confer?.Count]);\r\n};\r\n\r\nexport default useHandleConferPrice;\r\n","import React, { useEffect } from \"react\";\r\n\r\nconst useHandleSessionStoreConfer = (confer, context) => {\r\n  useEffect(() => {\r\n    if (confer.Count > 0) {\r\n      if (context?.selected?.findIndex((obj) => obj.ID === confer.ID) === -1) {\r\n        context.set_select((prev) => [...prev, { ...confer, select: true }]);\r\n      } else {\r\n        context.set_select((prev) =>\r\n          prev.map((element) =>\r\n            element.ID === confer.ID ? { ...confer, select: true } : element\r\n          )\r\n        );\r\n      }\r\n    } else {\r\n      if (confer.Count === 0) {\r\n        if (\r\n          context?.selected?.findIndex((obj) => obj.ID === confer.ID) !== -1\r\n        ) {\r\n          context.set_select((prev) =>\r\n            prev.filter((fl) => fl.ID !== confer.ID)\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }, [confer]);\r\n};\r\n\r\nexport default useHandleSessionStoreConfer;\r\n","export const HandleDecreaseCount = (context, confer, setDebounce) => {\r\n  setDebounce(true);\r\n  setTimeout(() => {\r\n    setDebounce(false);\r\n  }, 650);\r\n  if (confer.Count > 0) {\r\n    context?.set_largelist((prev) =>\r\n      prev.map((element) =>\r\n        element.ID === confer.ID\r\n          ? {\r\n              ...element,\r\n              Count: element.Count - 1,\r\n            }\r\n          : element\r\n      )\r\n    );\r\n  }\r\n};\r\n","export const HandleIncreaseCount = (context, confer, setDebounce) => {\r\n  setDebounce(true);\r\n  setTimeout(() => {\r\n    setDebounce(false);\r\n  }, 650);\r\n  context?.set_largelist((prev) =>\r\n    prev.map((element) =>\r\n      element.ID === confer.ID\r\n        ? {\r\n            ...element,\r\n            Count: element.Count + 1,\r\n          }\r\n        : element\r\n    )\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nconst useCustomizedListRenderer = (\r\n  largeListArray,\r\n  additionalFn,\r\n  FnParams,\r\n  ApplyFilter,\r\n  confer,\r\n  resetTrigger\r\n) => {\r\n  const [highestIndex, setHighestIndex] = useState(50);\r\n  const [itemsToShow, setItemsToShow] = useState(highestIndex);\r\n  const [list, setList] = useState([]);\r\n  const [startY, setStartY] = useState(0);\r\n  const [activated, setActivated] = useState(false);\r\n  const [firstCall, setFirstCall] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (confer && largeListArray) {\r\n      let newHighestIndex = 50;\r\n      confer.forEach((item) => {\r\n        const index = largeListArray.findIndex(\r\n          (largeListItem) => largeListItem.ID === item.ID\r\n        );\r\n        if (index > newHighestIndex) {\r\n          newHighestIndex = index + 20;\r\n        }\r\n      });\r\n      setHighestIndex(newHighestIndex);\r\n      setItemsToShow(newHighestIndex);\r\n    }\r\n  }, [confer, largeListArray, resetTrigger]);\r\n\r\n  const handleScroll = (e) => {\r\n    if (e.deltaY > 0) {\r\n      setItemsToShow((prev) => prev + 1);\r\n    } else {\r\n      setItemsToShow((prev) => (prev > highestIndex ? prev - 1 : prev));\r\n    }\r\n  };\r\n\r\n  const handleTouchStart = (e) => {\r\n    setStartY(e.touches[0].clientY);\r\n  };\r\n\r\n  const handleTouchMove = (e) => {\r\n    const currentY = e.touches[0].clientY;\r\n    if (currentY > startY) {\r\n      setItemsToShow((prev) => prev + 1);\r\n    } else {\r\n      setItemsToShow((prev) => (prev > highestIndex ? prev - 1 : prev));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (largeListArray) {\r\n      let updatedList = largeListArray.slice(0, itemsToShow);\r\n      if (additionalFn) {\r\n        updatedList = additionalFn(updatedList, ...FnParams);\r\n      }\r\n      ApplyFilter\r\n        ? setList(ApplyFilter(largeListArray, FnParams))\r\n        : setList(updatedList);\r\n    }\r\n  }, [largeListArray, itemsToShow, FnParams, resetTrigger]);\r\n\r\n  useEffect(() => {\r\n    setActivated(true);\r\n    setFirstCall(false);\r\n  }, []);\r\n\r\n  return {\r\n    list,\r\n    handleTouchMove,\r\n    handleScroll,\r\n    handleTouchStart,\r\n    activated,\r\n    firstCall,\r\n  };\r\n};\r\n\r\nexport default useCustomizedListRenderer;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst useTopSelectedObject = (largeList, resetTrigger, setResetTrigger) => {\r\n  const [sortedList, setSortedList] = useState(largeList);\r\n  const [stack, setStack] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const newStack = [...stack];\r\n    largeList.forEach((item) => {\r\n      if (item.Count > 0 && !newStack.includes(item.ID)) {\r\n        newStack.push(item.ID);\r\n      } else if (item.Count === 0 && newStack.includes(item.ID)) {\r\n        newStack.splice(newStack.indexOf(item.ID), 1);\r\n      }\r\n    });\r\n    setStack(newStack);\r\n  }, [largeList]);\r\n\r\n  useEffect(() => {\r\n    if (resetTrigger > 0) {\r\n      setStack([]);\r\n    }\r\n  }, [resetTrigger, largeList]);\r\n  useEffect(() => {\r\n    if (stack.length === 0) setResetTrigger(0);\r\n  }, [stack]);\r\n\r\n  useEffect(() => {\r\n    const newSortedList = [...largeList];\r\n    stack.forEach((id, index) => {\r\n      const itemIndex = newSortedList.findIndex((item) => item.ID === id);\r\n      if (itemIndex !== -1) {\r\n        const [item] = newSortedList.splice(itemIndex, 1);\r\n        newSortedList.splice(index, 0, item);\r\n      }\r\n    });\r\n    setSortedList(newSortedList);\r\n  }, [stack]);\r\n\r\n  return sortedList;\r\n};\r\n\r\nexport default useTopSelectedObject;\r\n","import { ArabicToPersian } from \"utils/ConvertToPersianTextFromArabic\";\r\n\r\nexport const HandleSearchItem = (arr, search) => {\r\n  const persianArr = arr?.map((confer) => ({\r\n    ...confer,\r\n    Name: ArabicToPersian(confer?.Name),\r\n  }));\r\n\r\n  // Create a copy of the array to avoid modifying the original\r\n  let result = [...persianArr];\r\n\r\n  // Check if search is a number\r\n  let searchIsNumber = !isNaN(search);\r\n\r\n  // Define a function to calculate the score of each item\r\n  let getScore = (item) => {\r\n    let score = 0;\r\n    if (searchIsNumber && Number(item.Code) === Number(search)) {\r\n      score += 2;\r\n    }\r\n    if (item.Name.includes(search)) {\r\n      score += 1;\r\n    }\r\n    return score;\r\n  };\r\n\r\n  // Sort the array based on the score of each item\r\n  result.sort((a, b) => getScore(b) - getScore(a));\r\n\r\n  // Return the top ten results\r\n  return result.slice(0, 10);\r\n};\r\n","import React, { useMemo } from \"react\";\r\nimport useTopSelectedObject from \"./useTopSelectedObject\";\r\nimport { HandleSearchItem } from \"../../functions/HandleSearchItem\";\r\nimport useDebounce from \"Global/Hooks/useDebounce/useDebounce\";\r\n\r\nconst useSortListByConditions = (\r\n  largeList = [],\r\n  seacrh,\r\n  resetTrigger,\r\n  setResetTrigger,\r\n  bringTop\r\n) => {\r\n  const debouncedData = useDebounce(seacrh, 1);\r\n\r\n  const sortedList = useTopSelectedObject(\r\n    largeList,\r\n    resetTrigger,\r\n    setResetTrigger\r\n  );\r\n\r\n  const items = HandleSearchItem(largeList, debouncedData);\r\n\r\n  const memoItems = useMemo(() => items, [JSON.stringify(items)]);\r\n\r\n  const sortedWordList = useTopSelectedObject(\r\n    memoItems,\r\n    resetTrigger,\r\n    setResetTrigger\r\n  );\r\n\r\n  return seacrh.length === 0\r\n    ? bringTop\r\n      ? sortedList\r\n      : largeList\r\n    : bringTop\r\n    ? sortedWordList\r\n    : memoItems;\r\n};\r\n\r\nexport default useSortListByConditions;\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nimport { TimeToMinutes } from 'utils/TimeToMinutes';\r\nexport const GetConferServices = async (\r\n  setGatheredData,\r\n  parameters\r\n) => {\r\n  const patient = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  );\r\n\r\n  parameters?.idInsurance &&\r\n    Post(\r\n      'POST',\r\n      `${process.env.REACT_APP_API_URL_API_GET_ERJASERVICE_LIST}`,\r\n      true,\r\n      {\r\n        dateHozoor: patient?.DateHozoor,\r\n        idInsurance: parameters?.idInsurance,\r\n        Idperson: patient?.IdPerson,\r\n        searchfield: '',\r\n        timeHozoor: TimeToMinutes(patient?.TimeHozoor),\r\n      }\r\n    ).then((response) => {\r\n      if (response.data.resCode === 1) {\r\n        setGatheredData((prev) => ({\r\n          ...prev,\r\n          [parameters?.ObjName]:\r\n            response?.data?.Data?.InsuranceServiceList.map(\r\n              (el) => ({\r\n                ...el,\r\n                select: false,\r\n                InsurancePart: 0,\r\n                PatientPart: 0,\r\n                TotalPrice: 0,\r\n              })\r\n            ),\r\n        }));\r\n      } else\r\n        SwalAlert('error', response.data.resMessage, false);\r\n    });\r\n};\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const GetConferInfo = async (\r\n  setGatheredData,\r\n  parameters\r\n) => {\r\n  const patient = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  );\r\n  const conferData = JSON.parse(\r\n    sessionStorage.getItem('conferData')\r\n  );\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_ADD_EDIT}`,\r\n    true,\r\n    {\r\n      idAppWorkList: patient?.Id,\r\n      idConfer: conferData?.ID,\r\n      idPatient: patient?.IdPatient,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      setGatheredData((prev) => ({\r\n        ...prev,\r\n        [parameters.ObjName]: response.data.Data,\r\n      }));\r\n    } else\r\n      SwalAlert('error', response.data.resMessage, false);\r\n  });\r\n};\r\n","import useGatherDataFromApi from 'Global/Hooks/useGatherDataFromApi';\r\nimport useCustomizedListRenderer from './hooks/useCustomizedListRenderer';\r\nimport useSortListByConditions from './hooks/useSortListByConditions';\r\nimport React, { useLayoutEffect, useState } from 'react';\r\nimport { createContext } from 'react';\r\nimport { FunctionArray } from './functions/FunctionArray';\r\nimport { ArabicToPersian } from 'utils/ConvertToPersianTextFromArabic';\r\nimport { useEffect } from 'react';\r\nimport { useRef } from 'react';\r\nimport { HandleReplaceStoredItems } from '../functions/HandleReplaceStoredItems';\r\nimport { GetCurrentDateInJalai } from 'utils/GetCurrentDateInJalai';\r\nimport { ReplaceMatchingObjs } from '../functions/ReplaceMatchingObjs';\r\nimport { removeDuplicates } from '../functions/removeDuplicates';\r\nimport { CalcByDetection } from '../Adapters/CalcByDetection';\r\n\r\nexport const ConferContext = createContext();\r\n\r\nexport const context = ({ children }) => {\r\n  const [bringTop, setBringTop] = useState(false); // toggle bringing selected items to the top\r\n  const [resetTrigger, setResetTrigger] = useState(0); // reset every sorted item when insurance changes\r\n  const savedInsurance = sessionStorage.getItem(\r\n    'saved_insurance'\r\n  );\r\n  const savedInsuranceRef = useRef(\r\n    savedInsurance !== 'undefined' &&\r\n      savedInsurance !== 'null'\r\n      ? JSON.parse(savedInsurance)\r\n      : null\r\n  );\r\n\r\n  const patient = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  ); // getting patient information from session storage\r\n  const saved_confers =\r\n    sessionStorage.getItem('saved_confers'); //getting saved confers from session storage\r\n  const saveItemsRef = useRef(JSON.parse(saved_confers)); //session saved items goes in ref to not update during lifecycle\r\n  const [dataString, setDataString] = useState(''); // ID count data string store\r\n  const [Insurance, setInsurance] = useState(\r\n    savedInsuranceRef.current\r\n      ? savedInsuranceRef.current[0].ItemValue\r\n      : patient?.IdInsurance\r\n  ); // Id insurance state (select box)\r\n  const [InsuranceOff, setInsuranceOff] = useState(0); //insurance doctor state\r\n  const [search, setSearch] = useState(''); // search bar state\r\n  // note, the hook useEffect has changed to useMemo. in case of error, roll it back\r\n  const { gatheredData } = useGatherDataFromApi(\r\n    FunctionArray(Insurance)\r\n  ); // gathering API datas\r\n  const [largeList, setLargeList] = useState(\r\n    gatheredData?.Confer || []\r\n  ); //confer service list set in state to be changable\r\n  const [selected, setSelected] = useState(\r\n    saveItemsRef.current || []\r\n  ); //selected Items\r\n  const [detection, setDetection] = useState();\r\n  const [detectionBaseList, setDetectionBaseList] =\r\n    useState({\r\n      enabled: false,\r\n      list: [],\r\n    });\r\n\r\n  useEffect(() => {\r\n    if (\r\n      gatheredData?.Confer &&\r\n      gatheredData?.Confer?.length > 0\r\n    ) {\r\n      setLargeList(\r\n        ReplaceMatchingObjs(\r\n          gatheredData?.Confer,\r\n          gatheredData?.Info?.SavedServiceList\r\n        )\r\n      );\r\n    }\r\n  }, [gatheredData?.Confer]); // when confer services fetched, sets the state\r\n  const topSortedList = useSortListByConditions(\r\n    largeList,\r\n    search,\r\n    resetTrigger,\r\n    setResetTrigger,\r\n    bringTop,\r\n    detectionBaseList?.list\r\n  );\r\n  const { list, handleTouchMove, handleScroll } =\r\n    useCustomizedListRenderer(\r\n      topSortedList,\r\n      undefined,\r\n      undefined,\r\n      undefined,\r\n      saveItemsRef.current,\r\n      resetTrigger\r\n    ); // optimize list rendering\r\n\r\n  const sortedList = list;\r\n  useEffect(() => {\r\n    if (selected.length > 0) {\r\n      sessionStorage.setItem(\r\n        'saved_confers',\r\n        JSON.stringify(selected)\r\n      );\r\n    } else {\r\n      sessionStorage.removeItem('saved_confers');\r\n    }\r\n  }, [selected]); //session save items\r\n  useEffect(() => {\r\n    if (saveItemsRef.current && gatheredData?.Confer) {\r\n      setLargeList(\r\n        HandleReplaceStoredItems(\r\n          gatheredData?.Confer,\r\n          saveItemsRef.current\r\n        )\r\n      );\r\n    }\r\n  }, [gatheredData?.Confer]); //set retereived session items\r\n  useEffect(() => {\r\n    const structuredData = selected\r\n      .map((element) => `${element.ID},${element.Count}`)\r\n      .join('#');\r\n    setDataString(structuredData);\r\n  }, [selected]); // create ID Count string for API\r\n  useEffect(() => {\r\n    if (resetTrigger > 0) {\r\n      saveItemsRef.current = [];\r\n      sessionStorage.removeItem('saved_confers');\r\n      setSelected([]);\r\n      setLargeList([]);\r\n    }\r\n  }, [resetTrigger]);\r\n  useEffect(() => {\r\n    if (gatheredData?.Confer?.length > 0) {\r\n      sessionStorage.setItem(\r\n        'saved_insurance',\r\n        JSON.stringify(\r\n          gatheredData?.InsuranceList?.filter(\r\n            (fl) => fl.ItemValue === Insurance\r\n          )\r\n        )\r\n      );\r\n    }\r\n  }, [gatheredData]);\r\n  useEffect(() => {\r\n    if (selected.length > 0) {\r\n      setSelected(removeDuplicates(selected));\r\n    }\r\n  }, [selected]);\r\n  useEffect(() => {\r\n    sessionStorage.setItem(\r\n      'patient',\r\n      JSON.stringify({\r\n        ...patient,\r\n        IdInsurance: Insurance,\r\n        InsuranceName:\r\n          gatheredData?.InsuranceList?.filter(\r\n            (fl) => fl.ItemValue === Insurance\r\n          )[0]?.ItemContent ?? '',\r\n      })\r\n    );\r\n  }, [selected, gatheredData?.InsuranceList]);\r\n\r\n  useEffect(() => {\r\n    if (detectionBaseList?.enabled) {\r\n      CalcByDetection(\r\n        Insurance,\r\n        detection,\r\n        setDetectionBaseList,\r\n        setBringTop,\r\n        setLargeList\r\n      );\r\n    }\r\n  }, [detectionBaseList?.enabled]);\r\n\r\n  // useEffect(() => {\r\n  //   if (detectionBaseList?.list?.length > 0) {\r\n  //     setBringTop(true);\r\n  //   }\r\n  // }, [JSON.stringify(detectionBaseList?.list)]);\r\n\r\n  useEffect(() => {\r\n    if (detectionBaseList.list) {\r\n      setSelected(detectionBaseList?.list);\r\n    }\r\n  }, [JSON.stringify(detectionBaseList.list)]);\r\n\r\n  console.log('=========================.......>>>>>', {\r\n    InsuranceName: gatheredData?.InsuranceList?.filter(\r\n      (fl) => fl.ItemValue === Insurance\r\n    ),\r\n    InsuranceList: gatheredData?.InsuranceList,\r\n    Insurance,\r\n  });\r\n\r\n  const contextObj = {\r\n    defaultinsurance: savedInsuranceRef.current\r\n      ? [\r\n          {\r\n            ItemValue: ArabicToPersian(\r\n              savedInsuranceRef.current[0].ItemContent\r\n            ),\r\n            ItemContent: ArabicToPersian(\r\n              savedInsuranceRef.current[0].ItemContent\r\n            ),\r\n          },\r\n        ]\r\n      : [\r\n          {\r\n            ItemValue: ArabicToPersian(\r\n              patient?.InsuranceName\r\n            ),\r\n            ItemContent: ArabicToPersian(\r\n              patient?.InsuranceName\r\n            ),\r\n          },\r\n        ],\r\n    insurance: gatheredData?.InsuranceList,\r\n    info: gatheredData?.Info,\r\n    services: gatheredData?.Confer,\r\n    set_insurance: setInsurance,\r\n    set_doctor_off: setInsuranceOff,\r\n    doctor_off: InsuranceOff,\r\n    set_search: setSearch,\r\n    optimized_services: sortedList,\r\n    scroll_handlers: [handleTouchMove, handleScroll],\r\n    set_largelist: setLargeList,\r\n    id_insurance: Insurance,\r\n    set_select: setSelected,\r\n    selected,\r\n    ApiReadyData: {\r\n      dateCreditNoteBook: GetCurrentDateInJalai(),\r\n      discountDoctor: InsuranceOff,\r\n      discountMarkaz: gatheredData?.Info?.DiscountMarkaz,\r\n      erjaId: 0,\r\n      idInsurance: Insurance,\r\n      insuranceNumber: '',\r\n      noPageNoteBook: '',\r\n      serviceListData: dataString,\r\n      idDiagnosis: detection,\r\n    },\r\n    set_reset: setResetTrigger,\r\n    reset: resetTrigger,\r\n    set_reset: setResetTrigger,\r\n    setBringTop,\r\n    detection,\r\n    setDetection,\r\n    detectionBaseList,\r\n    setDetectionBaseList,\r\n    search,\r\n    bringTop,\r\n  }; // objects that will be passed to context API\r\n  return (\r\n    <ConferContext.Provider value={contextObj}>\r\n      {children}\r\n    </ConferContext.Provider>\r\n  );\r\n};\r\n","import { GetInsuranceListPublic } from \"Global/Adapters/GetInsuranceListPublic\";\r\nimport { GetConferServices } from \"../../Adapters/GetConferServices\";\r\nimport { GetConferInfo } from \"../../Adapters/GetConferInfo\";\r\n\r\nexport const FunctionArray = (selectedInsurance) => {\r\n  const functions = [\r\n    {\r\n      functions: GetInsuranceListPublic,\r\n      parameters: \"InsuranceList\",\r\n    },\r\n    {\r\n      functions: GetConferServices,\r\n      parameters: {\r\n        ObjName: \"Confer\",\r\n        idInsurance: selectedInsurance,\r\n      },\r\n    },\r\n    {\r\n      functions: GetConferInfo,\r\n      parameters: {\r\n        ObjName: \"Info\",\r\n      },\r\n    },\r\n  ];\r\n  return functions;\r\n};\r\n","export const ReplaceMatchingObjs = (arr1, arr2) => {\r\n  const result = [...arr1];\r\n  arr2?.forEach((obj2) => {\r\n    const index = result.findIndex((obj1) => obj1.ID === obj2.ID);\r\n    if (index !== -1) {\r\n      result[index] = obj2;\r\n    }\r\n  });\r\n  return result;\r\n};\r\n","export const HandleReplaceStoredItems = (arr1, arr2) => {\r\n  const result = [...arr1];\r\n  arr2.forEach((obj2) => {\r\n    const index = result.findIndex((obj1) => obj1.ID === obj2.ID);\r\n    if (index !== -1) {\r\n      result[index] = obj2;\r\n    }\r\n  });\r\n  return result;\r\n};\r\n","export const removeDuplicates = (arr) => {\r\n  let unique = {};\r\n  let hasDuplicates = false;\r\n  arr.forEach(function (i) {\r\n    if (!unique[i.ID]) {\r\n      unique[i.ID] = true;\r\n    } else {\r\n      hasDuplicates = true;\r\n    }\r\n  });\r\n  if (!hasDuplicates) return arr;\r\n  return Object.keys(unique).map(function (k) {\r\n    return arr.find(function (e) {\r\n      return e.ID == k;\r\n    });\r\n  });\r\n};\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { TimeToMinutes } from 'utils/TimeToMinutes';\r\nimport { env } from 'env';\r\n\r\nexport const CalcByDetection = async (\r\n  idInsurance,\r\n  idDetection,\r\n  setDetectionBaseList,\r\n  setBringTop,\r\n  setLargeList\r\n) => {\r\n  setDetectionBaseList((prev) => ({\r\n    ...prev,\r\n    loading: true,\r\n  }));\r\n\r\n  const patient = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  );\r\n\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_CALC_SERVICE_BY_TASHKHIS}`,\r\n    true,\r\n    {\r\n      dateeHozoor: patient?.DateHozoor,\r\n      idInsurance: idInsurance,\r\n      idPerson: patient?.IdPerson,\r\n      timeHozoor: TimeToMinutes(patient?.TimeHozoor),\r\n      idTashkhis: idDetection,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      if (response?.data?.Data?.list?.length > 0) {\r\n        setLargeList((prev) => {\r\n          return prev.map((large_list_el) => {\r\n            if (\r\n              response?.data?.Data?.list?.findIndex(\r\n                (el) => el.ID === large_list_el.ID\r\n              ) > -1\r\n            ) {\r\n              return response?.data?.Data?.list[\r\n                response?.data?.Data?.list?.findIndex(\r\n                  (el) => el.ID === large_list_el.ID\r\n                )\r\n              ];\r\n            } else {\r\n              return large_list_el;\r\n            }\r\n          });\r\n        });\r\n      }\r\n      setDetectionBaseList((prev) => ({\r\n        enabled: prev.enabled,\r\n        list: response.data.Data.list.map((el) => ({\r\n          ...el,\r\n          select: true,\r\n        })),\r\n      }));\r\n    } else {\r\n      SwalAlert('error', response.data.resMessage, false);\r\n      setDetectionBaseList({\r\n        enabled: false,\r\n        list: [],\r\n      });\r\n    }\r\n  });\r\n};\r\n","import EditableCustomizableSelect from \"Global/Components/EditableComponents/EditableCustomizableSelect/EditableCustomizableSelect\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\nimport i18next from \"i18next\";\r\nimport React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nconst Insurance = ({ context, GlobalConstants }) => {\r\n  const [insuranceValue, setInsuranceValue] = useState();\r\n  useEffect(() => {\r\n    if (insuranceValue?.ItemValue) {\r\n      context?.set_reset((prev) => prev + 1);\r\n    }\r\n  }, [insuranceValue]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <EditableCustomizableSelect\r\n        isSingle={true}\r\n        isEnglish={i18next.language === \"en\"}\r\n        initialData={context?.defaultinsurance}\r\n        SelectableDataArray={context?.insurance}\r\n        label={FindLangKey(\r\n          \"general-public-insurance-type\",\r\n          GlobalConstants?.LanguageArray\r\n        )}\r\n        onChange={context?.set_insurance}\r\n        GetSelectedValue={setInsuranceValue}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Insurance;\r\n","import EditablePersianSupportTextField from \"Global/Components/EditableComponents/EditablePersianSupportTextField\";\r\nimport ReadOnlyTextField from \"Global/Components/ReadOnlyComponents/ReadOnlyTextField\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\nimport i18next from \"i18next\";\r\nimport React from \"react\";\r\n\r\nconst CenterOff = ({ context, GlobalConstants }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <EditablePersianSupportTextField\r\n        disabled={true}\r\n        label={FindLangKey(\r\n          \"add-new-confer-input-off-markaz\",\r\n          GlobalConstants?.LanguageArray\r\n        )}\r\n        isEnglish={i18next.language === \"en\"}\r\n        Initialvalue={context?.info?.DiscountMarkaz || 0}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default CenterOff;\r\n","import EditablePersianSupportNumericTextField from \"Global/Components/EditableComponents/EditablePersianSupportNumericTextField\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\nimport i18next from \"i18next\";\r\nimport React from \"react\";\r\n\r\nconst DoctorOff = ({ context, GlobalConstants }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <EditablePersianSupportNumericTextField\r\n        label={FindLangKey(\r\n          \"add-new-confer-input-off-doctor\",\r\n          GlobalConstants?.LanguageArray\r\n        )}\r\n        isEnglish={i18next.language === \"en\"}\r\n        value={context?.info?.DiscountDoctor || 0}\r\n        onChange={context?.set_doctor_off}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DoctorOff;\r\n","import EditableCustomizableSelect from 'Global/Components/EditableComponents/EditableCustomizableSelect/EditableCustomizableSelect';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport { ConferContext } from 'Routes/Protected/EditConfer/context/context';\r\nimport { GetDetectionList } from 'Routes/Protected/PatientList/Adapters/GetDetectionList';\r\nimport React, {\r\n  useContext,\r\n  useEffect,\r\n  useLayoutEffect,\r\n  useState,\r\n} from 'react';\r\nimport { ArabicToPersian } from 'utils/ConvertToPersianTextFromArabic';\r\n\r\nconst DetectionList = () => {\r\n  const context = useContext(ConferContext);\r\n\r\n  const [data, setData] = useState(null);\r\n\r\n  const patient = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  );\r\n\r\n  const detections_msg = FindLangKey(\r\n    'general-public-label-diagnose'\r\n  );\r\n\r\n  const [detectionList, setDetectionList] = useState([]);\r\n\r\n  console.log('detectionList=>', detectionList);\r\n\r\n  useLayoutEffect(() => {\r\n    GetDetectionList(setDetectionList, 'detectionList');\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      const item = detectionList?.detectionList?.filter(\r\n        (el) => el.ItemContent === data?.ItemContent\r\n      )[0];\r\n\r\n      context?.setDetection(item?.ItemValue);\r\n    }\r\n  }, [data, JSON.stringify(detectionList)]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <EditableCustomizableSelect\r\n        isSingle={true}\r\n        SelectableDataArray={detectionList?.detectionList}\r\n        label={detections_msg}\r\n        initialData={[\r\n          {\r\n            ItemValue: ArabicToPersian(\r\n              patient?.NameDiagnosis\r\n            ),\r\n            ItemContent: ArabicToPersian(\r\n              patient?.NameDiagnosis\r\n            ),\r\n          },\r\n        ]}\r\n        enableInitialOnchange={true}\r\n        GetSelectedValue={setData}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DetectionList;\r\n","import React from 'react';\r\nimport { Stack } from '@mui/material';\r\nimport { useContext } from 'react';\r\nimport { ConferContext } from '../../context/context';\r\nimport Insurance from './components/Insurance';\r\nimport DateCredit from './components/DateCredit';\r\nimport CenterOff from './components/CenterOff';\r\nimport DoctorOff from './components/DoctorOff';\r\nimport SubmitButton from 'Global/Components/UnEditableComponents/SubmitButton/SubmitButton';\r\nimport { GlobalContext } from 'Global/Context/GlobalContextProvider';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport AccessControl from 'Global/security/AccessControl';\r\nimport DetectionList from './components/DetectionList';\r\n\r\nconst Form = () => {\r\n  const context = useContext(ConferContext);\r\n  const GlobalConstants = useContext(GlobalContext);\r\n  const languageArray =\r\n    useContext(GlobalContext)?.LanguageArray;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <form\r\n        onSubmit={(event) => {\r\n          event.preventDefault();\r\n        }}\r\n      >\r\n        <Stack spacing={1}>\r\n          <Insurance\r\n            context={context}\r\n            GlobalConstants={GlobalConstants}\r\n          />\r\n          <DetectionList context={context} />\r\n          {/* <DateCredit GlobalConstants={GlobalConstants} /> */}\r\n          <Stack direction=\"row-reverse\" gap={'.5em'}>\r\n            <CenterOff\r\n              context={context}\r\n              GlobalConstants={GlobalConstants}\r\n            />\r\n            <DoctorOff\r\n              context={context}\r\n              GlobalConstants={GlobalConstants}\r\n            />\r\n          </Stack>\r\n        </Stack>\r\n      </form>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"frameGradient\":\"Confer_general_style_frameGradient__Tldnl\",\"ConferGeneral\":\"Confer_general_style_ConferGeneral__acgYu\",\"ConferGeneral_select\":\"Confer_general_style_ConferGeneral_select__siS5G\",\"ConferName\":\"Confer_general_style_ConferName__TSCxz\",\"confersContainer\":\"Confer_general_style_confersContainer__wrqz4\"};","import React from \"react\";\r\nimport { Stack } from \"@mui/material\";\r\nimport { ArabicToPersian } from \"utils/ConvertToPersianTextFromArabic\";\r\nimport style from \"../../../style/Confer.general.style.module.scss\";\r\nconst ConferName = ({ confer }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <Stack>\r\n        <p className={style.ConferName}>{ArabicToPersian(confer?.Name)}</p>\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ConferName;\r\n","import React from 'react';\r\nimport { Add, Remove } from '@mui/icons-material';\r\nimport { IconButton, Stack } from '@mui/material';\r\nimport { HandleIncreaseCount } from 'Routes/Protected/AddNewConfer/functions/HandleIncreaseCount';\r\nimport { HandleDecreaseCount } from 'Routes/Protected/AddNewConfer/functions/HandleDecreaseCount';\r\nimport { useState } from 'react';\r\nimport { themeColors } from 'Global/JsxThemeColor/JsxThemeColor';\r\n\r\nconst ConferControls = ({ context, confer }) => {\r\n  const [debounce, setDebounce] = useState(false);\r\n\r\n  const { setBringTop } = context;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Stack alignItems=\"center\">\r\n        <IconButton\r\n          onClick={() => {\r\n            HandleIncreaseCount(\r\n              context,\r\n              confer,\r\n              setDebounce\r\n            );\r\n            setBringTop(false);\r\n          }}\r\n          disabled={debounce}\r\n        >\r\n          <Add\r\n            sx={{\r\n              fill: `${themeColors.ColorPrimary} !important`,\r\n            }}\r\n          />\r\n        </IconButton>\r\n        <p>{confer?.Count}</p>\r\n        <IconButton\r\n          onClick={() => {\r\n            HandleDecreaseCount(\r\n              context,\r\n              confer,\r\n              setDebounce\r\n            );\r\n            setBringTop(false);\r\n          }}\r\n          disabled={debounce || confer.Count === 0}\r\n        >\r\n          <Remove\r\n            sx={{\r\n              fill: `${themeColors.ColorPrimary} !important`,\r\n            }}\r\n          />\r\n        </IconButton>\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ConferControls;\r\n","import React from \"react\";\r\nimport useHandleConferPrice from \"Routes/Protected/AddNewConfer/Hooks/useHandleConferPrice\";\r\nimport i18next from \"i18next\";\r\nimport { Stack } from \"@mui/material\";\r\nimport { Price3DigitSplitter } from \"utils/Price3DigitSplitter\";\r\nimport { useContext } from \"react\";\r\nimport { GlobalContext } from \"Global/Context/GlobalContextProvider\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\n\r\nconst ConferPrice = ({ confer, context }) => {\r\n  useHandleConferPrice(confer, context);\r\n  const languageArray = useContext(GlobalContext)?.LanguageArray;\r\n  return (\r\n    <React.Fragment>\r\n      <Stack width=\"100%\">\r\n        <hr />\r\n        <Stack alignSelf=\"end\" width=\"60%\">\r\n          <Stack direction=\"row-reverse\" justifyContent=\"space-between\">\r\n            <p>\r\n              {FindLangKey(\r\n                \"confer-add-edit-common-label-patient-payable\",\r\n                languageArray\r\n              )}\r\n              :\r\n            </p>\r\n            <p>{Price3DigitSplitter(confer?.PatientPart)}</p>\r\n          </Stack>\r\n          <Stack\r\n            alignItems=\"center\"\r\n            direction=\"row-reverse\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <p>\r\n              {FindLangKey(\r\n                \"confer-add-edit-common-label-insurance-payable\",\r\n                languageArray\r\n              )}\r\n              :\r\n            </p>\r\n            <p>{Price3DigitSplitter(confer?.InsurancePart)}</p>\r\n          </Stack>\r\n          <Stack\r\n            alignItems=\"center\"\r\n            direction=\"row-reverse\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <p>\r\n              {FindLangKey(\r\n                \"confer-add-edit-common-label-total-price\",\r\n                languageArray\r\n              )}\r\n              :\r\n            </p>\r\n            <p>{Price3DigitSplitter(confer?.TotalPrice)}</p>\r\n          </Stack>\r\n        </Stack>\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ConferPrice;\r\n","import { Stack } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport style from \"../../../style/Confer.general.style.module.scss\";\r\nimport ConferName from \"./ConferName\";\r\nimport ConferControls from \"./ConferControls\";\r\nimport ConferPrice from \"./ConferPrice\";\r\nimport useHandleSessionStoreConfer from \"Routes/Protected/AddNewConfer/Hooks/useHandleSessionStoreConfer\";\r\nconst Confer = ({ confer, context }) => {\r\n  useHandleSessionStoreConfer(confer, context); //adds removes or updates confers for session storage and also for selected\r\n  return (\r\n    <React.Fragment>\r\n      <Stack\r\n        className={\r\n          confer?.Count > 0 ? style.ConferGeneral_select : style.ConferGeneral //show thicker border if selected\r\n        }\r\n        direction=\"row-reverse\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        sx={{ borderColor: confer.select && \"gray !important\" }} // sessioned items will be in gray\r\n      >\r\n        <Stack spacing={1} alignItems=\"flex-end\" width=\"100%\">\r\n          {/* showing name of the confer */}\r\n          <ConferName confer={confer} />\r\n          {confer?.Count > 0 ? (\r\n            <ConferPrice confer={confer} context={context} /> //showing price of the confer if selected\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </Stack>\r\n        {/* showing increase or decrease quantity buttons */}\r\n        <ConferControls context={context} confer={confer} />\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Confer;\r\n","import React, { memo } from 'react';\r\nimport Confer from './Confer';\r\nimport {\r\n  Box,\r\n  CircularProgress,\r\n  Stack,\r\n} from '@mui/material';\r\nimport { themeColors } from 'Global/JsxThemeColor/JsxThemeColor';\r\nimport style from '../../../style/Confer.general.style.module.scss';\r\n\r\nconst ConferMap = ({ context }) => {\r\n  return (\r\n    <React.Fragment>\r\n      {context?.services && // if services fetched and optimized list is ready, show confers otherwise show loading circle\r\n      context?.optimized_services &&\r\n      context?.optimized_services?.length > 0 ? (\r\n        <React.Fragment>\r\n          <div\r\n            onWheel={context?.scroll_handlers[1]}\r\n            onTouchMove={context?.scroll_handlers[0]}\r\n            style={{ transition: 'all .3s ease' }} // div with scroll and touch event listener to show more or less items\r\n          >\r\n            <Box\r\n              sx={{ mt: '1em', transition: 'all .5s ease' }}\r\n              className={style.confersContainer}\r\n            >\r\n              {context?.optimized_services?.map(\r\n                (\r\n                  confer //mapped confers\r\n                ) => (\r\n                  <Confer\r\n                    confer={confer}\r\n                    key={confer.ID}\r\n                    context={context}\r\n                  />\r\n                )\r\n              )}\r\n            </Box>\r\n          </div>\r\n        </React.Fragment>\r\n      ) : (\r\n        // loading circle\r\n        <Stack\r\n          marginTop=\"1em\"\r\n          width=\"100%\"\r\n          alignItems=\"center\"\r\n        >\r\n          <CircularProgress\r\n            sx={{\r\n              color: `${themeColors.ColorPrimary} !important`,\r\n            }}\r\n          />\r\n        </Stack>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default memo(ConferMap);\r\n","import { Search } from \"@mui/icons-material\";\r\nimport EditablePersianSupportTextField from \"Global/Components/EditableComponents/EditablePersianSupportTextField\";\r\nimport PersianSupportTextField from \"Global/Components/UnEditableComponents/PersianSupportTextField/PersianSupportTextField\";\r\nimport { GlobalContext } from \"Global/Context/GlobalContextProvider\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\nimport i18next from \"i18next\";\r\nimport React from \"react\";\r\nimport { useContext } from \"react\";\r\n\r\nconst SearchBar = ({ context }) => {\r\n  const languageArray = useContext(GlobalContext)?.LanguageArray;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <EditablePersianSupportTextField\r\n        label={FindLangKey(\"general-public-search\", languageArray)}\r\n        isEnglish={i18next.language === \"en\"}\r\n        onChange={context?.set_search}\r\n        Initialvalue={context?.search}\r\n        customOnChange={(event) => {\r\n          if (event.target.value.length > 0) {\r\n            context?.setBringTop(false);\r\n          }\r\n        }}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React, { useRef } from 'react';\r\nimport { useContext } from 'react';\r\nimport { ConferContext } from '../../context/context';\r\nimport {\r\n  Stack,\r\n  Button,\r\n  LinearProgress,\r\n} from '@mui/material';\r\nimport ConferMap from './components/ConferMap';\r\nimport SearchBar from './components/SearchBar';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport { AddTask, List } from '@mui/icons-material';\r\nimport { themeColors } from 'Global/JsxThemeColor/JsxThemeColor';\r\nimport { AddConfer } from '../../Adapters/AddConfer';\r\nimport { GlobalContext } from 'Global/Context/GlobalContextProvider';\r\nimport AccessControl from 'Global/security/AccessControl';\r\nimport DesktopScrollUp from 'Routes/Protected/AddNewConfer/Components/DesktopScrollUp/DesktopScrollUp';\r\nimport useOberseveElement from 'Global/Hooks/useObserverElement/useOberseveElement';\r\n\r\nconst Confers = () => {\r\n  const context = useContext(ConferContext); // data that comes from context API\r\n  const GlobalConstants = useContext(GlobalContext);\r\n  const scrollTop_Ref = useRef(null);\r\n  const inView = useOberseveElement(scrollTop_Ref);\r\n\r\n  const showItemsBtn = FindLangKey(\r\n    'add-edit-confer-show-items'\r\n  );\r\n\r\n  const setBringTop = context?.setBringTop;\r\n\r\n  const selectItemsOnDetection_msg = FindLangKey(\r\n    'add-confer-btn-label-select-services-by-detection'\r\n  );\r\n\r\n  const bringTop = context?.bringTop;\r\n  const detectionBaseList =\r\n    context?.detectionBaseList?.enabled;\r\n\r\n  const AddConferPatient = AddConfer();\r\n  const EditSureMsg = FindLangKey(\r\n    'edit-confer-alert-sure-edit'\r\n  );\r\n  const nothingSelectedMsg = FindLangKey(\r\n    'add-new-alert-no-items-selected'\r\n  );\r\n\r\n  const Handle_Trigger_Submit = () => {\r\n    HandleSubmitForm(\r\n      context?.ApiReadyData,\r\n      context?.info,\r\n      GlobalConstants.navigate,\r\n      GlobalConstants,\r\n      AddConferPatient,\r\n      EditSureMsg,\r\n      nothingSelectedMsg\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Stack>\r\n        <Button\r\n          variant=\"outlined\"\r\n          fullWidth\r\n          sx={{\r\n            mb: '.5em',\r\n            minHeight: '40px',\r\n            color: detectionBaseList\r\n              ? `${themeColors.ColorSecondary} !important`\r\n              : `${themeColors.ColorPrimary} !important`,\r\n            backgroundColor: detectionBaseList\r\n              ? `${themeColors.ColorPrimary} !important`\r\n              : `${themeColors.ColorSecondary} !important`,\r\n          }}\r\n          color=\"colorPrimer\"\r\n          startIcon={<AddTask />}\r\n          onClick={() => {\r\n            context?.setDetectionBaseList((prev) => ({\r\n              ...prev,\r\n              enabled: !prev.enabled,\r\n            }));\r\n            setBringTop((prev) => !prev);\r\n          }}\r\n        >\r\n          {selectItemsOnDetection_msg}\r\n        </Button>\r\n        {/* show select items on top  */}\r\n        <Button\r\n          variant=\"outlined\"\r\n          fullWidth\r\n          sx={{\r\n            mb: '1em',\r\n            minHeight: '40px',\r\n            color: bringTop\r\n              ? `${themeColors.ColorSecondary} !important`\r\n              : `${themeColors.ColorPrimary} !important`,\r\n            backgroundColor: bringTop\r\n              ? `${themeColors.ColorPrimary} !important`\r\n              : `${themeColors.ColorSecondary} !important`,\r\n          }}\r\n          color=\"colorPrimer\"\r\n          startIcon={<List />}\r\n          onClick={() => {\r\n            setBringTop((prev) => !prev);\r\n            context?.set_search('');\r\n          }}\r\n        >\r\n          {showItemsBtn}\r\n        </Button>\r\n        {context?.detectionBaseList?.loading ? (\r\n          <LinearProgress sx={{ my: '.5em' }} />\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {/* searching for items in confers */}\r\n        <SearchBar context={context} />\r\n        <div style={{ marginTop: '.5em' }}>\r\n          <Button\r\n            disabled={AccessControl(\r\n              'edit-confer-opetation-edit-confer'\r\n            )}\r\n            variant=\"contained\"\r\n            fullWidth\r\n            sx={{\r\n              color: `${themeColors.ColorPrimary} !important`,\r\n            }}\r\n            onClick={Handle_Trigger_Submit}\r\n            ref={scrollTop_Ref}\r\n          >\r\n            {FindLangKey(\r\n              'edit-current-confer-submit-button'\r\n            )}\r\n          </Button>\r\n        </div>\r\n\r\n        <DesktopScrollUp\r\n          inView={inView}\r\n          scrollRef={scrollTop_Ref}\r\n        />\r\n\r\n        {/* parent component of mapped Confers */}\r\n        <ConferMap context={context} />\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Confers;\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\n\r\nimport { Post } from 'Xhr/Xhr';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport { env } from 'env';\r\n\r\nexport const AddConfer = () => {\r\n  const confirmationMsg = FindLangKey(\r\n    'add-new-alert-confirm-confer'\r\n  );\r\n  const patient = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  );\r\n  const conferData = JSON.parse(\r\n    sessionStorage.getItem('conferData')\r\n  );\r\n\r\n  const AddConferPatient = (\r\n    data,\r\n    navigate,\r\n    info,\r\n    GlobalConstants\r\n  ) => {\r\n    Post(\r\n      'POST',\r\n      `${process.env.REACT_APP_API_URL_API_ADD_EDIT_CONFER_PATIENT}`,\r\n      true,\r\n      {\r\n        ...data,\r\n        idPatient: patient?.IdPatient,\r\n        idAppWorkList: patient?.Id,\r\n        Idperson: patient?.IdPerson,\r\n        idConfer: conferData?.ID,\r\n        timeHozoor: TimeToMinutes(patient?.TimeHozoor),\r\n        dateHozoor: patient?.DateHozoor,\r\n      }\r\n    ).then((response) => {\r\n      if (response.data.resCode === 1) {\r\n        SwalAlert(\r\n          'success',\r\n          response.data.resMessage,\r\n          false\r\n        );\r\n      } else\r\n        SwalAlert('error', response.data.resMessage, false);\r\n      GlobalConstants.setChangeRender((prev) => !prev);\r\n      setTimeout(() => {\r\n        navigate(-1);\r\n      }, 600);\r\n    });\r\n  };\r\n  return AddConferPatient;\r\n};\r\n","import React from 'react';\r\nimport { Container, Stack } from '@mui/material';\r\nimport { context as ContextProvider } from './context/context';\r\nimport Form from './Components/Form/Form';\r\nimport Confers from './Components/Confers/Confers';\r\nimport { useEffect } from 'react';\r\n\r\nconst EditConfer = () => {\r\n  // entry point. context provider, form and confers\r\n  useEffect(() => {\r\n    return () => {\r\n      sessionStorage.removeItem('saved_confers');\r\n      sessionStorage.removeItem('saved_insurance');\r\n    };\r\n  }, []);\r\n  return (\r\n    <React.Fragment>\r\n      <ContextProvider>\r\n        <Container sx={{ mt: '1em' }}>\r\n          <Stack spacing={1}>\r\n            <Form />\r\n            <Confers />\r\n          </Stack>\r\n        </Container>\r\n      </ContextProvider>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default EditConfer;\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { ArabicToPersian } from 'utils/ConvertToPersianTextFromArabic';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const GetDetectionList = async (\r\n  setDetectionList,\r\n  objName\r\n) => {\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_GET_TASHKHIS_LIST}`,\r\n    true,\r\n    {\r\n      idSystem: 900,\r\n      clause: '',\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1)\r\n      setDetectionList({\r\n        [objName]: response.data.Data.list.map((elemet) => {\r\n          return {\r\n            ItemValue: elemet.Id,\r\n            ItemContent: ArabicToPersian(elemet.Name),\r\n          };\r\n        }),\r\n      });\r\n    else\r\n      SwalAlert('error', response.data.resMessage, false);\r\n  });\r\n};\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M22 5.18 10.59 16.6l-4.24-4.24 1.41-1.41 2.83 2.83 10-10L22 5.18zM12 20c-4.41 0-8-3.59-8-8s3.59-8 8-8c1.57 0 3.04.46 4.28 1.25l1.45-1.45C16.1 2.67 14.13 2 12 2 6.48 2 2 6.48 2 12s4.48 10 10 10c1.73 0 3.36-.44 4.78-1.22l-1.5-1.5c-1 .46-2.11.72-3.28.72zm7-5h-3v2h3v3h2v-3h3v-2h-3v-3h-2v3z\"\n}), 'AddTask');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 13h2v-2H3v2zm0 4h2v-2H3v2zm0-8h2V7H3v2zm4 4h14v-2H7v2zm0 4h14v-2H7v2zM7 7v2h14V7H7z\"\n}), 'List');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 13H5v-2h14v2z\"\n}), 'Remove');"],"names":["ref","inView","setInView","useState","useEffect","observer","IntersectionObserver","_ref","entry","isIntersecting","observe","current","disconnect","scrollRef","screenWidth","useCheckScreenWidth","_jsx","React","children","IconButton","sx","alignSelf","position","backgroundColor","concat","themeColors","onClick","scrollIntoView","behavior","KeyboardDoubleArrowUp","color","fontSize","_Fragment","useHandleConferPrice","confer","context","Count","async","idInsurance","serviceID","count","SetPriceTag","patient","JSON","parse","sessionStorage","getItem","Post","process","dateeHozoor","DateHozoor","InsertDate","idPerson","IdPerson","FldIdDoctor","timeHozoor","TimeToMinutes","TimeHozoor","InsertTime","then","response","data","resCode","price","Data","list","prev","map","element","ID","InsurancePart","PatientPart","TotalPrice","SwalAlert","resMessage","ConferPriceCalculator","id_insurance","set_largelist","useHandleSessionStoreConfer","_context$selected","_context$selected2","selected","findIndex","obj","set_select","select","filter","fl","HandleDecreaseCount","setDebounce","setTimeout","HandleIncreaseCount","useCustomizedListRenderer","largeListArray","additionalFn","FnParams","ApplyFilter","resetTrigger","highestIndex","setHighestIndex","itemsToShow","setItemsToShow","setList","startY","setStartY","activated","setActivated","firstCall","setFirstCall","newHighestIndex","forEach","item","index","largeListItem","updatedList","slice","handleTouchMove","e","currentY","touches","clientY","handleScroll","deltaY","handleTouchStart","useTopSelectedObject","largeList","setResetTrigger","sortedList","setSortedList","stack","setStack","newStack","includes","push","splice","indexOf","length","newSortedList","id","itemIndex","HandleSearchItem","arr","search","result","Name","ArabicToPersian","searchIsNumber","isNaN","getScore","score","Number","Code","sort","a","b","arguments","undefined","seacrh","bringTop","debouncedData","useDebounce","items","memoItems","useMemo","stringify","sortedWordList","GetConferServices","setGatheredData","parameters","dateHozoor","Idperson","searchfield","_response$data","_response$data$Data","ObjName","InsuranceServiceList","el","GetConferInfo","conferData","idAppWorkList","Id","idConfer","idPatient","IdPatient","ConferContext","createContext","_gatheredData$Insuran5","_gatheredData$Info2","setBringTop","savedInsurance","savedInsuranceRef","useRef","saved_confers","saveItemsRef","dataString","setDataString","Insurance","setInsurance","ItemValue","IdInsurance","InsuranceOff","setInsuranceOff","setSearch","gatheredData","useGatherDataFromApi","selectedInsurance","functions","GetInsuranceListPublic","setLargeList","Confer","setSelected","detection","setDetection","detectionBaseList","setDetectionBaseList","enabled","_gatheredData$Confer","_gatheredData$Info","ReplaceMatchingObjs","arr1","arr2","obj2","obj1","Info","SavedServiceList","topSortedList","useSortListByConditions","setItem","removeItem","HandleReplaceStoredItems","structuredData","join","_gatheredData$Confer2","_gatheredData$Insuran","InsuranceList","unique","hasDuplicates","i","Object","keys","k","find","removeDuplicates","_gatheredData$Insuran2","_gatheredData$Insuran3","_gatheredData$Insuran4","InsuranceName","ItemContent","idDetection","loading","idTashkhis","_response$data$Data$l","large_list_el","_response$data2","_response$data2$Data","_response$data2$Data$","_response$data3","_response$data3$Data","_response$data4","_response$data4$Data","_response$data4$Data$","CalcByDetection","console","log","contextObj","defaultinsurance","insurance","info","services","set_insurance","set_doctor_off","doctor_off","set_search","optimized_services","scroll_handlers","ApiReadyData","dateCreditNoteBook","GetCurrentDateInJalai","discountDoctor","discountMarkaz","DiscountMarkaz","erjaId","insuranceNumber","noPageNoteBook","serviceListData","idDiagnosis","set_reset","reset","Provider","value","GlobalConstants","insuranceValue","setInsuranceValue","EditableCustomizableSelect","isSingle","isEnglish","i18next","initialData","SelectableDataArray","label","FindLangKey","LanguageArray","onChange","GetSelectedValue","_context$info","EditablePersianSupportTextField","disabled","Initialvalue","EditablePersianSupportNumericTextField","DiscountDoctor","DetectionList","useContext","setData","detections_msg","detectionList","setDetectionList","useLayoutEffect","GetDetectionList","_detectionList$detect","NameDiagnosis","enableInitialOnchange","Form","_useContext","GlobalContext","onSubmit","event","preventDefault","_jsxs","Stack","spacing","direction","gap","CenterOff","DoctorOff","className","style","debounce","alignItems","Add","fill","Remove","languageArray","width","justifyContent","Price3DigitSplitter","borderColor","ConferName","ConferPrice","ConferControls","ConferMap","_context$optimized_se","_context$optimized_se2","onWheel","onTouchMove","transition","Box","mt","marginTop","CircularProgress","memo","customOnChange","target","Confers","_context$detectionBas","_context$detectionBas2","scrollTop_Ref","useOberseveElement","showItemsBtn","selectItemsOnDetection_msg","AddConferPatient","AddConfer","navigate","setChangeRender","EditSureMsg","nothingSelectedMsg","Button","variant","fullWidth","mb","minHeight","startIcon","AddTask","List","LinearProgress","my","SearchBar","AccessControl","Handle_Trigger_Submit","HandleSubmitForm","DesktopScrollUp","EditConfer","ContextProvider","Container","objName","idSystem","clause","elemet","createSvgIcon","d"],"sourceRoot":""}