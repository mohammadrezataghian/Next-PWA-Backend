{"version":3,"file":"static/js/689.3f7c5692.chunk.js","mappings":"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","sources":["Routes/Protected/ServiceReportSummary/Adapters/GetAllPatientServices.js","Routes/Protected/ServiceReportSummary/StateBank/useStateBank.js","Routes/Protected/ServiceReportSummary/functions/formatDataForGrid.js","Routes/Protected/ServiceReportSummary/functions/gridSwitchFn.js","Routes/Protected/ServiceReportSummary/ServiceReportSummary.js","utils/CreateGridData.js"],"sourcesContent":["import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\nimport { GetCurrentDateInJalai } from 'utils/GetCurrentDateInJalai';\r\n\r\nexport const GetAllPatientServices = async (\r\n  setGatheredData,\r\n  parameters\r\n) => {\r\n  const patient = JSON.parse(\r\n    sessionStorage.getItem('patient')\r\n  );\r\n\r\n  return Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_GET_ALL_SERVICE_PATIENT}`,\r\n    true,\r\n    {\r\n      idPatient: patient?.IdPatient,\r\n      idPerson: patient?.IdPerson,\r\n      All: true,\r\n      topRecord: 100,\r\n      fromDate:\r\n        parameters?.fromDate || GetCurrentDateInJalai(),\r\n      toDate: parameters?.toDate || GetCurrentDateInJalai(),\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.tasks.resCode === 1) {\r\n      setGatheredData((prev) => ({\r\n        ...prev,\r\n        [parameters?.objName]: response.data.tasks.Data,\r\n      }));\r\n    } else {\r\n      SwalAlert(\r\n        'error',\r\n        response.data.tasks.resMessage ?? 'خطا درشبکه',\r\n        false\r\n      );\r\n    }\r\n  });\r\n};\r\n","import React, { useMemo } from \"react\";\r\nimport useGatherDataFromApi from \"Global/Hooks/useGatherDataFromApi\";\r\nimport { GetAllPatientServices } from \"../Adapters/GetAllPatientServices\";\r\n\r\nconst useStateBank = (dateRange) => {\r\n  const [callApi, setCallApi] = React.useState(false);\r\n\r\n  const FunctionArray = useMemo(\r\n    () => [\r\n      {\r\n        functions: GetAllPatientServices,\r\n        parameters: {\r\n          objName: \"PatientServiceList\",\r\n          fromDate: dateRange?.FromDate,\r\n          toDate: dateRange?.ToDate,\r\n        },\r\n      },\r\n    ],\r\n    [dateRange?.FromDate, dateRange?.ToDate]\r\n  );\r\n\r\n  const [StateBank, setStateBank] = React.useState([]);\r\n  const { gatheredData } = useGatherDataFromApi(FunctionArray, callApi);\r\n  React.useEffect(() => {\r\n    if (gatheredData)\r\n      setStateBank((prev) => ({\r\n        ...prev,\r\n        ...gatheredData,\r\n      }));\r\n  }, [gatheredData]);\r\n  return { StateBank, setCallApi };\r\n};\r\n\r\nexport default useStateBank;\r\n","import { ArabicToPersian } from \"utils/ConvertToPersianTextFromArabic\";\r\n\r\nexport const formatDataForGrid = (data = []) => {\r\n  const formattedData = data?.map((element) => ({\r\n    NamePatient: ArabicToPersian(element?.NamePatient),\r\n    DateCash: element?.DateCash,\r\n    DescService: ArabicToPersian(element?.DescService),\r\n    NameDoctor:\r\n      element?.NameDoctor?.length > 0\r\n        ? ArabicToPersian(element?.NameDoctor)\r\n        : \"\",\r\n  }));\r\n\r\n  return formattedData;\r\n};\r\n","export const gridSwitchFn = (key) => {\r\n  let headerName;\r\n\r\n  switch (key) {\r\n    case \"DateCash\":\r\n      headerName = \"تاریخ\";\r\n      break;\r\n    case \"DescService\":\r\n      headerName = \"خدمت\";\r\n      break;\r\n    case \"NameDoctor\":\r\n      headerName = \"انجام دهنده\";\r\n      break;\r\n    case \"NamePatient\":\r\n      headerName = \"بیمار\";\r\n      break;\r\n    default:\r\n      headerName = key;\r\n  }\r\n\r\n  return headerName;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport useStateBank from \"./StateBank/useStateBank\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Container } from \"@mui/material\";\r\nimport DateRangePicker from \"Global/Components/CommonComponents/DateRangePicker/DateRangePicker\";\r\nimport { formatDataForGrid } from \"./functions/formatDataForGrid\";\r\nimport { CreateGridData } from \"utils/CreateGridData\";\r\nimport { gridSwitchFn } from \"./functions/gridSwitchFn\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport useCheckScreenWidth from \"Global/Hooks/useCheckScreenWidth\";\r\n\r\nconst ServiceReportSummary = () => {\r\n  const screenWidth = useCheckScreenWidth(); // 1024 for Desktop\r\n\r\n  const [dateRange, setDateRange] = useState();\r\n\r\n  const { StateBank, setCallApi } = useStateBank(dateRange);\r\n  const { i18n } = useTranslation();\r\n\r\n  const gridFormattedData = formatDataForGrid(StateBank?.PatientServiceList);\r\n\r\n  const { rows, columns } =\r\n    gridFormattedData?.length > 0\r\n      ? CreateGridData(gridFormattedData, gridSwitchFn, 200)\r\n      : [];\r\n\r\n  const increaseWidthColumns = columns?.map((column) => ({\r\n    ...column,\r\n    ...(column?.field === \"DescService\" ? { minWidth: 2300 } : {}),\r\n  }));\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Container>\r\n        <DateRangePicker onChange={setDateRange} />\r\n\r\n        {/* <ItemFilterControls ApiCaller={setCallApi} /> */}\r\n        {rows && columns ? (\r\n          <div\r\n            style={{\r\n              height: screenWidth < 1080 ? 400 : 600,\r\n              width: \"100%\",\r\n              marginTop: \".5em\",\r\n            }}\r\n          >\r\n            <DataGrid\r\n              rows={rows}\r\n              columns={increaseWidthColumns}\r\n              rowHeight={20}\r\n            />\r\n          </div>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ServiceReportSummary;\r\n","export const CreateGridData = (data, swtichFn = () => {}, width) => {\r\n  //eg switch case fn\r\n\r\n  //   let headerName;\r\n  // switch (key) {\r\n  //     case \"date\":\r\n  //       headerName = \"تاریخ\";\r\n  //       break;\r\n  //     case \"timeStr\":\r\n  //       headerName = \"زمان\";\r\n  //       break;\r\n  //     case \"dayName\":\r\n  //       headerName = \"روز\";\r\n  //       break;\r\n  //     default:\r\n  //       headerName = key;\r\n  //   }\r\n\r\n  if (!data) {\r\n    return { rows: [], columns: [] };\r\n  }\r\n\r\n  const rows = data.map((item, index) => ({\r\n    id: index,\r\n    ...item,\r\n  }));\r\n\r\n  const columns = Object.keys(data[0])\r\n    .map((key) => {\r\n      const headerName = swtichFn(key);\r\n      return {\r\n        field: key,\r\n        headerName,\r\n        flex: 1,\r\n        align: \"right\", // This will right align cell texts\r\n        headerAlign: \"center\",\r\n        ...(width ? { minWidth: width } : {}),\r\n      };\r\n    })\r\n    .reverse();\r\n\r\n  return { rows, columns };\r\n};\r\n"],"names":["GetAllPatientServices","async","setGatheredData","parameters","patient","JSON","parse","sessionStorage","getItem","Post","concat","process","idPatient","IdPatient","idPerson","IdPerson","All","topRecord","fromDate","GetCurrentDateInJalai","toDate","then","response","_response$data$tasks$","data","tasks","resCode","prev","objName","Data","SwalAlert","resMessage","dateRange","callApi","setCallApi","React","FunctionArray","useMemo","functions","FromDate","ToDate","StateBank","setStateBank","gatheredData","useGatherDataFromApi","gridSwitchFn","key","headerName","ServiceReportSummary","screenWidth","useCheckScreenWidth","setDateRange","useState","useStateBank","i18n","useTranslation","gridFormattedData","arguments","length","undefined","map","element","_element$NameDoctor","NamePatient","ArabicToPersian","DateCash","DescService","NameDoctor","formatDataForGrid","PatientServiceList","rows","columns","swtichFn","width","item","index","id","Object","keys","field","flex","align","headerAlign","minWidth","reverse","CreateGridData","increaseWidthColumns","column","_jsx","children","_jsxs","Container","DateRangePicker","onChange","style","height","marginTop","DataGrid","rowHeight","_Fragment"],"sourceRoot":""}