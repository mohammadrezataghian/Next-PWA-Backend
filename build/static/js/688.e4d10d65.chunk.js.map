{"version":3,"file":"static/js/688.e4d10d65.chunk.js","mappings":"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","sources":["Global/Components/UnEditableComponents/DateTimePicker/DateTimePicker.js","Global/Components/UnEditableComponents/SingularTimePicker/SingularTimePicker.js","Routes/Protected/SearchPatientForReferal/Variables/SearchPatientForReferalDataArray.js","Routes/Protected/SearchPatientForReferal/Variables/SearchPatientForReferalDefaultValues.js","Routes/Protected/SearchPatientForReferal/Adapters/SearchForPatient.js","Routes/Protected/SearchPatientForReferal/Functions/DetectSearchTypeByTextLength.js","Routes/Protected/SearchPatientForReferal/Adapters/GetDiagnosisList.js","Global/Adapters/GetInsuranceList.js","webpack://new-ui/./src/Routes/Protected/SearchPatientForReferal/Styles/Container.Main.Stack.module.scss?df2f","Global/Hooks/useGatherDataFromApiOnMount.js","Global/Components/UnEditableComponents/ResponsiveChip/ResponsiveChip.js","Routes/Protected/SearchPatientForReferal/Components/PaitentInformation/PaitentInformation.js","Routes/Protected/SearchPatientForReferal/Functions/AddPatientForNewErjaHandler.js","Routes/Protected/SearchPatientForReferal/Adapters/AddPatientToWorkList.js","Routes/Protected/SearchPatientForReferal/SearchPatientForReferal.js","utils/GetCurrentTimeinMinutesJalai.js"],"sourcesContent":["import { Stack } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport { GetCurrentDateInJalai } from \"utils/GetCurrentDateInJalai\";\r\nimport { GetCurrentTimeinMinutesJalai } from \"utils/GetCurrentTimeinMinutesJalai\";\r\nimport SingularDatePicker from \"../SingularDatePicker/SingularDatePicker\";\r\nimport SingularTimePicker from \"../SingularTimePicker/SingularTimePicker\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\n\r\nconst DateTimePicker = ({ label, onChange, errors, name }) => {\r\n  const [UiValue, SetUiValue] = React.useState({\r\n    Date: GetCurrentDateInJalai(),\r\n    Time: GetCurrentTimeinMinutesJalai(),\r\n  });\r\n  React.useEffect(() => {\r\n    if (Object.values(UiValue).length) {\r\n      onChange && onChange(UiValue);\r\n    }\r\n  }, [UiValue]);\r\n  const { t, i18n } = useTranslation();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Stack direction=\"row\" spacing={1} alignItems=\"center\">\r\n        <SingularDatePicker\r\n          i18n={i18n}\r\n          label={FindLangKey(\"general-public-history\")}\r\n          getter={SetUiValue}\r\n        />\r\n        <SingularTimePicker\r\n          label={FindLangKey(\"general-public-label-time\")}\r\n          getter={SetUiValue}\r\n        />\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DateTimePicker;\r\n","import { TextField } from \"@mui/material\";\r\nimport AdapterJalali from \"@date-io/date-fns-jalali\";\r\nimport dayjs from \"dayjs\";\r\nimport {\r\n  MobileTimePicker,\r\n  LocalizationProvider,\r\n} from \"@mui/x-date-pickers-pro\";\r\nimport React from \"react\";\r\nimport { TimeToMinutes } from \"utils/TimeToMinutes\";\r\nimport { ConvertDateObjectToTimeFormat } from \"utils/ConvertDateObjectToTimeFormat\";\r\nimport RightAlignedTextField from \"Global/Components/CommonComponents/RightAlignedTextField/RightAlignedTextField\";\r\nimport FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\nconst SingularTimePicker = ({\r\n  label,\r\n  onChange,\r\n  errors,\r\n  name,\r\n  getter,\r\n  isDateTime = false,\r\n  isEnglish = true,\r\n  OutputInMinutes = false,\r\n}) => {\r\n  const [value, setValue] = React.useState(dayjs(new Date()));\r\n\r\n  const done_msg = FindLangKey(\"general-public-label-approve\");\r\n  const cancel_msg = FindLangKey(\"general-public-label-dismiss\");\r\n\r\n  return (\r\n    <LocalizationProvider\r\n      dateAdapter={AdapterJalali}\r\n      localeText={{\r\n        okButtonLabel: done_msg,\r\n        cancelButtonLabel: cancel_msg,\r\n      }}\r\n    >\r\n      <div dir={isEnglish ? \"ltr\" : \"rtl\"}>\r\n        <MobileTimePicker\r\n          label={label}\r\n          ampm={false}\r\n          value={value}\r\n          onChange={(newValue) => {\r\n            setValue(newValue);\r\n            !isDateTime &&\r\n              onChange &&\r\n              onChange(\r\n                OutputInMinutes\r\n                  ? TimeToMinutes(ConvertDateObjectToTimeFormat(newValue))\r\n                  : ConvertDateObjectToTimeFormat(newValue)\r\n              );\r\n\r\n            getter &&\r\n              getter((prev) => ({\r\n                ...prev,\r\n                Time: TimeToMinutes(ConvertDateObjectToTimeFormat(newValue)),\r\n              }));\r\n          }}\r\n          renderInput={(params) =>\r\n            !isEnglish ? (\r\n              <RightAlignedTextField\r\n                color=\"colorPrimer\"\r\n                {...params}\r\n                fullWidth\r\n              />\r\n            ) : (\r\n              <TextField\r\n                color=\"colorPrimer\"\r\n                {...params}\r\n                fullWidth\r\n                InputProps={{\r\n                  style: {\r\n                    maxHeight: \"40px\",\r\n                  },\r\n                }}\r\n              />\r\n            )\r\n          }\r\n        />\r\n      </div>\r\n    </LocalizationProvider>\r\n  );\r\n};\r\n\r\nexport default SingularTimePicker;\r\n","import React from 'react';\r\nimport DateTimePicker from 'Global/Components/UnEditableComponents/DateTimePicker/DateTimePicker';\r\nimport CustomizableSelect from 'Global/Components/CommonComponents/CustomizableSelect/CustomizableSelect';\r\nimport PersianSupportTextField from 'Global/Components/UnEditableComponents/PersianSupportTextField/PersianSupportTextField';\r\n\r\nexport const SearchPatientForReferalDataArray = (\r\n  parameter,\r\n  t,\r\n  languageArray,\r\n  eachLangueKey\r\n) => {\r\n  const DataArray = [\r\n    {\r\n      element: <DateTimePicker />,\r\n      name: 'timeHozoor',\r\n      required: true,\r\n    },\r\n\r\n    {\r\n      element: (\r\n        <CustomizableSelect\r\n          SelectableDataArray={parameter?.DiagnosisList}\r\n          label={eachLangueKey[0]}\r\n          isSingle={true}\r\n        />\r\n      ),\r\n      name: 'idTashkhis',\r\n      required: true,\r\n    },\r\n\r\n    {\r\n      element: (\r\n        <CustomizableSelect\r\n          SelectableDataArray={parameter?.InsuranceList}\r\n          label={eachLangueKey[1]}\r\n          isSingle={true}\r\n        />\r\n      ),\r\n      name: 'idInsurance',\r\n      required: true,\r\n    },\r\n    {\r\n      element: (\r\n        <PersianSupportTextField\r\n          label={eachLangueKey[10]}\r\n        />\r\n      ),\r\n      name: 'description',\r\n    },\r\n    // {\r\n    //   element: <SearchTypePatientList />,\r\n    //   name: \"searchType\",\r\n    //   required: true,\r\n    // },\r\n  ];\r\n  return DataArray;\r\n};\r\n","import Cookies from \"js-cookie\";\r\nimport { GetCurrentDateInJalai } from \"utils/GetCurrentDateInJalai\";\r\nimport { GetCurrentTimeinMinutesJalai } from \"utils/GetCurrentTimeinMinutesJalai\";\r\nconst Id = Cookies.get(\"user\") && JSON?.parse(Cookies?.get(\"user\"));\r\nexport const SearchPatientForReferalDefaultValues = {\r\n  dateHozoor: GetCurrentDateInJalai(),\r\n  description: \"\",\r\n  idInsurance: \"\",\r\n  idPatient: \"\",\r\n  idPerson: Id?.IdPerson,\r\n  idTashkhis: \"\",\r\n  timeHozoor: GetCurrentTimeinMinutesJalai(),\r\n  DateRange: \"\",\r\n};\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const SearchForPatient = async (\r\n  callbackFn,\r\n  SearchField,\r\n  typeSearch\r\n) => {\r\n  return Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_FIND_PATIENT}`,\r\n    true,\r\n    {\r\n      SearchField,\r\n      typeSearch,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      callbackFn('FoundPatient', response.data.Data);\r\n    } else {\r\n      SwalAlert('error', response.data.resMessage, false);\r\n    }\r\n  });\r\n};\r\n","import { SearchForPatient } from \"../Adapters/SearchForPatient\";\r\n\r\nexport const DetectSearchTypeByTextLength = (\r\n  searchQuery,\r\n  onChange,\r\n  callbackFn\r\n) => {\r\n  // if (typeof searchQuery === Number) {\r\n  //   searchQuery.toString();\r\n  // }\r\n  const EndSearchType =\r\n    searchQuery.length === 11\r\n      ? 4\r\n      : searchQuery.length === 10\r\n      ? 0\r\n      : searchQuery.length <= 7\r\n      ? 1\r\n      : searchQuery.length === 8\r\n      ? 2\r\n      : NaN;\r\n\r\n  SearchForPatient(callbackFn, searchQuery, EndSearchType);\r\n\r\n  return EndSearchType;\r\n};\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport Cookies from 'js-cookie';\r\nimport { ArabicToPersian } from 'utils/ConvertToPersianTextFromArabic';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const GetDiagnosisList = async (ApiDataHandler) => {\r\n  const IdPerson =\r\n    Cookies.get('user') &&\r\n    JSON.parse(Cookies.get('user'))?.IdPerson;\r\n  return Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_DOCTOR_TASHKHIS_LIST}`,\r\n    true,\r\n    {\r\n      idPerson: IdPerson,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      ApiDataHandler(\r\n        'DiagnosisList',\r\n        response?.data?.Data?.list?.map((EeachList) => {\r\n          return {\r\n            ItemValue: EeachList?.Id,\r\n            ItemContent:\r\n              ArabicToPersian(EeachList.Name)?.slice(\r\n                0,\r\n                30\r\n              ) +\r\n              `${EeachList.Name.length > 30 ? '...' : ''}`,\r\n          };\r\n        })\r\n      );\r\n    } else {\r\n      SwalAlert('error', response.data.resMessage, false);\r\n    }\r\n  });\r\n};\r\n","import { env } from 'env';\r\nimport SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { ArabicToPersian } from 'utils/ConvertToPersianTextFromArabic';\r\nimport { Post } from 'Xhr/Xhr';\r\n\r\nexport const GetInsuranceList = async (\r\n  ApiDataHandler,\r\n  setInsuranceList,\r\n  isPatientList\r\n) => {\r\n  Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_GET_INSURANCE_LIST}`,\r\n    true,\r\n    {\r\n      clause: '',\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1)\r\n      isPatientList\r\n        ? setInsuranceList(\r\n            response.data.Data.list.map((elemet) => {\r\n              return {\r\n                ItemValue: elemet.ID,\r\n                ItemContent: ArabicToPersian(elemet.Name),\r\n              };\r\n            })\r\n          )\r\n        : ApiDataHandler(\r\n            'InsuranceList',\r\n            response.data.Data.list.map((elemet) => {\r\n              return {\r\n                ItemValue: elemet.ID,\r\n                ItemContent: ArabicToPersian(elemet.Name),\r\n              };\r\n            })\r\n          );\r\n    else\r\n      SwalAlert('error', response.data.resMessage, false);\r\n  });\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Container_Main_Stack_container__HxvrX\"};","import React from \"react\";\r\n\r\nconst useGatherDataFromApiOnMount = (arrayOfFunctions) => {\r\n  const [apiData, getApiData] = React.useState(null);\r\n  const ApiDataHandler = (ObjectProp, value) => {\r\n    getApiData((prev) => ({\r\n      ...prev,\r\n      [ObjectProp]: value,\r\n    }));\r\n  };\r\n  React.useEffect(() => {\r\n    arrayOfFunctions.forEach((effectFn) => effectFn(ApiDataHandler));\r\n  }, []);\r\n\r\n  return { ApiDataHandler, apiData };\r\n};\r\n\r\nexport default useGatherDataFromApiOnMount;\r\n","import React from \"react\";\r\n\r\nconst ResponsiveChip = ({ content }) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        borderRadius: \"5px\",\r\n        backgroundColor: \"#e0e0e0\",\r\n        padding: \"4px 8px\",\r\n        maxWidth: \"100%\",\r\n        whiteSpace: \"normal\",\r\n        fontSize: \"0.8125rem\",\r\n        fontWeight: 400,\r\n      }}\r\n    >\r\n      {content}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResponsiveChip;\r\n","import { Chip, Stack } from \"@mui/material\";\r\nimport ResponsiveChip from \"Global/Components/UnEditableComponents/ResponsiveChip/ResponsiveChip\";\r\nimport React from \"react\";\r\nimport { ArabicToPersian } from \"utils/ConvertToPersianTextFromArabic\";\r\n\r\nconst PaitentInformation = ({ patientinfo, eachLangueKey }) => {\r\n  const GeneralInformation = `${ArabicToPersian(\r\n    ArabicToPersian(patientinfo?.FullName)\r\n  )} | ${eachLangueKey[4]} : ${patientinfo?.Id} | ${eachLangueKey[5]} : ${\r\n    patientinfo?.Mobile\r\n  }`;\r\n  const details = `${eachLangueKey[6]} : ${\r\n    ArabicToPersian(patientinfo?.Address) !== \"\"\r\n      ? ArabicToPersian(patientinfo?.Address)\r\n      : eachLangueKey[7]\r\n  } | ${eachLangueKey[8]} : ${\r\n    patientinfo?.FileNumber ?? `${eachLangueKey[9]}`\r\n  }`;\r\n  return (\r\n    <React.Fragment>\r\n      <Stack width=\"100%\" spacing={1}>\r\n        <ResponsiveChip content={GeneralInformation} />\r\n        <ResponsiveChip content={details} />\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PaitentInformation;\r\n","import SwalAlert from \"Global/Components/CommonComponents/SwalAlert/SwalAlert\";\r\nimport { AddPatientToWorkList } from \"../Adapters/AddPatientToWorkList\";\r\n\r\nexport const AddPatientForNewErjaHandler = (\r\n  inputData,\r\n  gatheredData,\r\n  previousSavedValue\r\n) => {\r\n  delete inputData.DateRange;\r\n  delete inputData.Date;\r\n  const formData = {\r\n    ...inputData,\r\n    timeHozoor: inputData.timeHozoor.Time,\r\n    dateHozoor: inputData.timeHozoor.Date,\r\n    idPatient: gatheredData.FoundPatient.Id,\r\n  };\r\n\r\n  console.log(previousSavedValue.current);\r\n  if (\r\n    Object.values(previousSavedValue.current).length === 0 ||\r\n    JSON.stringify(previousSavedValue.current) !== JSON.stringify(formData)\r\n  ) {\r\n    AddPatientToWorkList(formData);\r\n    previousSavedValue.current = formData;\r\n  } else {\r\n    SwalAlert(\"warning\", \"قبلا ثبت شده است\", false);\r\n  }\r\n};\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const AddPatientToWorkList = async (data) => {\r\n  return Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_ADD_PATIENT_TO_WORK_LIST}`,\r\n    true,\r\n    {\r\n      ...data,\r\n    }\r\n  ).then((response) => {\r\n    if (response.data.resCode === 1) {\r\n      SwalAlert('success', 'ارجاع جدید ثبت شد', false);\r\n    } else {\r\n      SwalAlert('success', 'ارجاع جدید ثبت شد', false);\r\n    }\r\n  });\r\n};\r\n","import React from 'react';\r\nimport { Container, Stack } from '@mui/material';\r\nimport { useForm } from 'react-hook-form';\r\nimport { SearchPatientForReferalDataArray } from './Variables/SearchPatientForReferalDataArray';\r\nimport { SearchPatientForReferalDefaultValues } from './Variables/SearchPatientForReferalDefaultValues';\r\nimport { Search } from '@mui/icons-material';\r\nimport { DetectSearchTypeByTextLength } from './Functions/DetectSearchTypeByTextLength';\r\nimport { useMemo } from 'react';\r\nimport { GetDiagnosisList } from './Adapters/GetDiagnosisList';\r\nimport { GetInsuranceList } from 'Global/Adapters/GetInsuranceList';\r\nimport MainContainerStyle from './Styles/Container.Main.Stack.module.scss';\r\nimport useGatherDataFromApi from 'Global/Hooks/useGatherDataFromApi';\r\nimport ReactHookFormGenerator from 'Global/ReactHookFormGenerator/ReactHookFormGenerator';\r\nimport SubmitButton from 'Global/Components/UnEditableComponents/SubmitButton/SubmitButton';\r\nimport PersianSupportNumericTextField from 'Global/Components/UnEditableComponents/PersianSupportNumericTextField/PersianSupportNumericTextField';\r\nimport useGatherDataFromApiOnMount from 'Global/Hooks/useGatherDataFromApiOnMount';\r\nimport PaitentInformation from './Components/PaitentInformation/PaitentInformation';\r\nimport { AddPatientForNewErjaHandler } from './Functions/AddPatientForNewErjaHandler';\r\nimport { SearchForPatient } from './Adapters/SearchForPatient';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useContext } from 'react';\r\nimport { GlobalContext } from 'Global/Context/GlobalContextProvider';\r\nimport FindLangKey from 'Global/Functions/FindLangKey/FindLangKey';\r\nimport AccessControl from 'Global/security/AccessControl';\r\n\r\nconst SearchPatientForReferal = () => {\r\n  const getDiagnosisList = useMemo(\r\n    () => GetDiagnosisList,\r\n    []\r\n  );\r\n  const getInsuranceList = useMemo(\r\n    () => GetInsuranceList,\r\n    []\r\n  );\r\n  const { HandleGatherData, gatheredData } =\r\n    useGatherDataFromApi(SearchForPatient, false, true);\r\n  const { apiData } = useGatherDataFromApiOnMount([\r\n    getInsuranceList,\r\n    getDiagnosisList,\r\n  ]);\r\n\r\n  const { control, formState, handleSubmit } = useForm({\r\n    defaultValues: SearchPatientForReferalDefaultValues,\r\n  });\r\n  const previousSavedValue = React.useRef({});\r\n  const { t, i18n } = useTranslation();\r\n  const languageArray =\r\n    useContext(GlobalContext)?.LanguageArray;\r\n  const eachLangueKey =\r\n    [\r\n      // form input labels\r\n      FindLangKey(\r\n        'general-public-label-diagnose',\r\n        languageArray\r\n      ),\r\n      FindLangKey(\r\n        'general-public-insurance-list',\r\n        languageArray\r\n      ),\r\n      FindLangKey(\r\n        'general-public-label-diagnose',\r\n        languageArray\r\n      ),\r\n      FindLangKey(\r\n        'new-referral-input-patient-name-id',\r\n        languageArray\r\n      ),\r\n      //patient information\r\n      FindLangKey('new-referral-label-id', languageArray),\r\n      FindLangKey(\r\n        'general-public-mobile-number',\r\n        languageArray\r\n      ),\r\n      FindLangKey('general-public-address', languageArray),\r\n      FindLangKey(\r\n        'new-referral-label-no-address',\r\n        languageArray\r\n      ),\r\n      FindLangKey(\r\n        'new-referral-label-file-number',\r\n        languageArray\r\n      ),\r\n      FindLangKey(\r\n        'new-referral-label-no-file-number',\r\n        languageArray\r\n      ),\r\n      FindLangKey(\r\n        'general-public-label-sarh-hal',\r\n        languageArray\r\n      ),\r\n    ] || [];\r\n\r\n  const btnDisabled = AccessControl(\r\n    'new-referral-btn-add-referral'\r\n  );\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault();\r\n    }\r\n  };\r\n\r\n  console.log('apiData==>', apiData);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Container>\r\n        <form\r\n          onKeyDown={handleKeyDown}\r\n          onSubmit={handleSubmit((data) => {\r\n            AddPatientForNewErjaHandler(\r\n              data,\r\n              gatheredData,\r\n              previousSavedValue\r\n            );\r\n          })}\r\n        >\r\n          <Stack\r\n            className={MainContainerStyle.container}\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n          >\r\n            <PersianSupportNumericTextField\r\n              label={FindLangKey(\r\n                'new-referral-label-NFI',\r\n                languageArray\r\n              )}\r\n              icon={<Search />}\r\n              iconFn={DetectSearchTypeByTextLength}\r\n              callbackFn={HandleGatherData}\r\n              isOctalAllowed={true}\r\n              isEnglish={i18n?.language === 'en'}\r\n            />\r\n            {gatheredData instanceof Array === false &&\r\n            gatheredData?.length !== 0 &&\r\n            eachLangueKey.length > 0 &&\r\n            gatheredData ? (\r\n              <React.Fragment>\r\n                <PaitentInformation\r\n                  patientinfo={gatheredData?.FoundPatient}\r\n                  eachLangueKey={eachLangueKey}\r\n                />\r\n\r\n                <ReactHookFormGenerator\r\n                  control={control}\r\n                  formState={formState}\r\n                  DataArray={SearchPatientForReferalDataArray(\r\n                    apiData,\r\n                    t,\r\n                    languageArray,\r\n                    eachLangueKey\r\n                  )}\r\n                />\r\n\r\n                <SubmitButton\r\n                  label={eachLangueKey[3]}\r\n                  disabled={btnDisabled}\r\n                />\r\n              </React.Fragment>\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </Stack>\r\n        </form>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default SearchPatientForReferal;\r\n{\r\n  /* <CustomizableSelect />\r\n<CustomizableSelect /> */\r\n}\r\n","import { TimeToMinutes } from \"./TimeToMinutes\";\r\n\r\nexport const GetCurrentTimeinMinutesJalai = () => {\r\n  return TimeToMinutes(\r\n    new Intl.DateTimeFormat(\"en-US\", {\r\n      hour: \"numeric\",\r\n      minute: \"2-digit\",\r\n      hour12: false,\r\n    })?.format(new Date())\r\n  );\r\n};\r\n"],"names":["_ref","label","onChange","errors","name","UiValue","SetUiValue","React","Date","GetCurrentDateInJalai","Time","GetCurrentTimeinMinutesJalai","Object","values","length","t","i18n","useTranslation","_jsx","children","_jsxs","Stack","direction","spacing","alignItems","SingularDatePicker","FindLangKey","getter","SingularTimePicker","isDateTime","isEnglish","OutputInMinutes","value","setValue","dayjs","done_msg","cancel_msg","LocalizationProvider","dateAdapter","AdapterJalali","localeText","okButtonLabel","cancelButtonLabel","dir","MobileTimePicker","ampm","newValue","TimeToMinutes","ConvertDateObjectToTimeFormat","prev","renderInput","params","TextField","color","fullWidth","InputProps","style","maxHeight","RightAlignedTextField","SearchPatientForReferalDataArray","parameter","languageArray","eachLangueKey","element","DateTimePicker","required","CustomizableSelect","SelectableDataArray","DiagnosisList","isSingle","InsuranceList","PersianSupportTextField","Id","Cookies","JSON","parse","SearchPatientForReferalDefaultValues","dateHozoor","description","idInsurance","idPatient","idPerson","IdPerson","idTashkhis","timeHozoor","DateRange","SearchForPatient","async","callbackFn","SearchField","typeSearch","Post","concat","process","then","response","data","resCode","Data","SwalAlert","resMessage","DetectSearchTypeByTextLength","searchQuery","EndSearchType","NaN","GetDiagnosisList","_JSON$parse","_response$data","_response$data$Data","_response$data$Data$l","ApiDataHandler","list","map","EeachList","_ArabicToPersian","ItemValue","ItemContent","ArabicToPersian","Name","slice","GetInsuranceList","setInsuranceList","isPatientList","clause","elemet","ID","arrayOfFunctions","apiData","getApiData","ObjectProp","forEach","effectFn","content","borderRadius","backgroundColor","padding","maxWidth","whiteSpace","fontSize","fontWeight","_patientinfo$FileNumb","patientinfo","GeneralInformation","FullName","Mobile","details","Address","FileNumber","width","ResponsiveChip","AddPatientForNewErjaHandler","inputData","gatheredData","previousSavedValue","formData","FoundPatient","console","log","current","stringify","AddPatientToWorkList","SearchPatientForReferal","_useContext","getDiagnosisList","useMemo","getInsuranceList","HandleGatherData","useGatherDataFromApi","useGatherDataFromApiOnMount","control","formState","handleSubmit","useForm","defaultValues","useContext","GlobalContext","LanguageArray","btnDisabled","AccessControl","Container","onKeyDown","event","key","preventDefault","onSubmit","className","MainContainerStyle","justifyContent","PersianSupportNumericTextField","icon","Search","iconFn","isOctalAllowed","language","Array","PaitentInformation","ReactHookFormGenerator","DataArray","SubmitButton","disabled","_Fragment","_Intl$DateTimeFormat","Intl","DateTimeFormat","hour","minute","hour12","format"],"sourceRoot":""}