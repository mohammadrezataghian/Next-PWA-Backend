{"version":3,"file":"static/js/797.f038a8cd.chunk.js","mappings":"uSAMA,MAmDA,EAnD4CA,CAACC,EAAaC,KACxD,MAAOC,EAAkBC,GAAuBC,EAAAA,SAAe,CAC7DC,oBAAqB,GACrBC,mBAAoB,GACpBC,SAAU,GACVC,OAAQ,KA2CV,OAxCAJ,EAAAA,WAAgB,KAEd,GAD2BK,eAAeC,QAAQ,sBAC1B,CACtB,MAAMC,EAAWC,KAAKC,MAAMJ,eAAeC,QAAQ,uBACnDP,GAAqBW,IAAI,IACpBA,EACHP,SAAUI,EAASJ,SACnBC,OAAQG,EAASH,UAErB,IACC,CAACN,EAAiBK,SAAUL,EAAiBM,SAKhDJ,EAAAA,SAAc,KACRF,EAAiBK,UAAYL,EAAiBM,SCzBrBO,OAC/Bb,EACAC,EACAF,KACI,IAADe,EACH,MAAMC,EACJC,EAAAA,EAAAA,IAAY,UACmB,QADZF,EACnBJ,KAAKC,MAAMK,EAAAA,EAAAA,IAAY,gBAAQ,IAAAF,OAAA,EAA/BA,EAAiCC,WAC5BE,EAAAA,EAAAA,MACL,OAAO,GAADC,OACHC,0CACH,EACA,CACEC,SAAU,EACVC,WAAY,EACZC,SAAUP,EACVQ,OAAQvB,EAAiBG,oBACzBqB,SAAUxB,EAAiBK,SAC3BoB,OAAQzB,EAAiBM,OACzBoB,WAAY,EACZC,sBAA4B,OAAN5B,QAAM,IAANA,OAAM,EAANA,EAAQ6B,YAAa,IAE7CC,MAAMC,IAM8B,IAAhCA,EAASC,KAAKC,MAAMC,QACtBhC,GAAqBW,IAAI,IACpBA,EACHR,mBAAoB0B,EAASC,KAAKC,MAAME,UAG1CC,EAAAA,EAAAA,GACE,QACAL,EAASC,KAAKC,MAAMI,YACpB,EAEJ,GACA,EDdEC,CAAkBrC,EAAkBC,EAAqBF,GAEvDuC,KAAOC,EAAAA,EAAAA,MAAkBC,OAAO,MAAMC,OAAO,iBAC3CzC,EAAiBK,UACnBiC,KAAOI,EAAAA,EAAAA,MAAkBF,OAAO,MAAMC,OAAO,iBAC3CzC,EAAiBK,UAEnBsC,OAAOpC,eAAeqC,QACpB,qBACAlC,KAAKmC,UAAU,CACbxC,SAAUL,EAAiBK,SAC3BC,OAAQN,EAAiBM,UAIjC,GACC,CACDN,EAAiBG,oBACjBH,EAAiBK,SACjBL,EAAiBM,OACjBR,EACAC,IAEK,CAAEC,mBAAkBC,sBAAqB,E,uGEnDlD,MAoCA,EApC2B6C,KACzB,MAAMC,GAAYC,EAAAA,EAAAA,GAAY,2BAgC9B,MAAO,CAAEC,UAtBS,CAChB,CACEC,YAAaH,EACbnB,UAAW,GAEb,CACEsB,aAdoBF,EAAAA,EAAAA,GACtB,+CAcEpB,UAAW,GAEb,CACEsB,aAdiBF,EAAAA,EAAAA,GAAY,4CAe7BpB,UAAW,IAWKuB,cAPE,CACpB,CACED,YAAaH,EACbnB,UAAWmB,IAIoBK,UAxBlBJ,EAAAA,EAAAA,GAAY,+BAwBgB,E,qCCX/C,MA+GA,EA/GwBK,KAAO,IAADC,EAC5B,MAAOvD,EAAQwD,IAAaC,EAAAA,EAAAA,UAAS,IAE9BC,IAAeC,EAAAA,EAAAA,IAAQC,EAAAA,IAEvB7D,EAAa8D,GAClB1D,EAAAA,UAAe,IAEX,iBAAEF,EAAgB,oBAAEC,GACxBJ,EACEC,EACAC,GAGE8D,GAAkBC,EAAAA,EAAAA,YAAWC,EAAAA,GAE7BC,GAAmBC,EAAAA,EAAAA,GACP,OAAhBjE,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBI,qBAGd,KAAE8D,EAAI,gBAAEC,EAAe,aAAEC,IAC7BC,EAAAA,EAAAA,GAAiCL,GAE7BM,EACqB,QADRhB,GACjBQ,EAAAA,EAAAA,YAAWC,EAAAA,UAAc,IAAAT,OAAA,EAAzBA,EAA2BiB,eAE7BC,EAAAA,EAAAA,YAAU,IACD,KACLjE,eAAekE,WAAW,eAAe,GAE1C,IAEH,MAAOC,EAAYC,IAAiBnB,EAAAA,EAAAA,UAAS,OAC7CgB,EAAAA,EAAAA,YAAU,MACRvD,EAAAA,EAAAA,MACE,OAAO,GAADC,OACHC,gCACH,EACA,CACEyD,SAAU,IACVrD,OAAQ,KAEVM,MAAMC,IACN6C,EAAc7C,EAASC,KAAKG,KAAKgC,KAAK,GACtC,GACD,IAEH,MAAM,UAAEjB,EAAS,cAAEE,EAAa,SAAEC,GAChCN,IAEI+B,GAAsBC,EAAAA,EAAAA,KAE5B,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAS,CAACC,GAAI,CAAEC,GAAI,OAASC,SAAS,KAAIC,SAAA,EAC1BC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,KACAD,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,KACfD,EAAAA,EAAAA,KAACE,EAAAA,EAAgB,CACftF,oBAAqBA,EACrBqE,cAAeA,KAEjBS,EAAAA,EAAAA,MAACS,EAAAA,EAAK,CAACC,WAAW,SAAQL,SAAA,EACxBC,EAAAA,EAAAA,KAACK,EAAAA,EAAe,CACdC,aAAc1F,EACd2F,aAAc,CACZvF,SAAUL,EAAiBK,SAC3BC,OAAQN,EAAiBM,WAI7B+E,EAAAA,EAAAA,KAACQ,EAAAA,EAA0B,CACzBC,oBAAqB7C,EACrB8C,YAAa5C,EACb6C,UAAU,EACVC,MAAO7C,EACP8C,uBAAuB,EACvBC,iBAAkB5C,QAGtBwB,EAAAA,EAAAA,MAACS,EAAAA,EAAK,CAACY,UAAU,OAAOC,QAAS,OAAOjB,SAAA,EACvBC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,KACfD,EAAAA,EAAAA,KAAA,OACEiB,MAAO,CACLC,IAAK,WAEPC,QAASpC,EACTqC,YAAatC,EACbuC,UAAWC,EAAAA,EAAAA,iBAAwBvB,SAE9B,OAAJlB,QAAI,IAAJA,OAAI,EAAJA,EAAM0C,KAAI,CAACC,EAASC,KACnBzB,EAAAA,EAAAA,KAAC0B,EAAAA,EAAI,CACHC,UAAW,EACX/B,GAAI,CAAEgC,EAAG,OAAQC,aAAc,QAC/BR,UAAWC,EAAAA,EAAAA,YAAmBvB,UAG9BC,EAAAA,EAAAA,KAAC8B,EAAAA,EAAW,CACVN,QAASA,EAETjD,eAAgBA,EAChBc,WAAYA,EACZG,oBAAqBA,EACrBuC,QAAO,GAAAlG,OAAKmG,EAAAA,EAAAA,eAA0B,gBAJjCxD,EAAgByD,WAJlBR,YAcH,C","sources":["Routes/Protected/CurrentPatients/Hooks/useCurrentPatientSearchLogicHandler.js","Routes/Protected/CurrentPatients/Adapters/GetCurrentPatient.js","Routes/Protected/CurrentPatients/Hooks/useFilterComboData.js","Routes/Protected/CurrentPatients/CurrentPatients.js"],"sourcesContent":["import React from \"react\";\r\nimport { GetCurrentPatient } from \"../Adapters/GetCurrentPatient\";\r\nimport moment from \"moment-jalaali\";\r\nimport { SubstractMonth } from \"utils/SubstractMonth\";\r\nimport { ExcludeTenDays } from \"utils/ExcludeTenDays\";\r\n\r\nconst useCurrentPatientSearchLogicHandler = (forceRender, filter) => {\r\n  const [SearchAndDeliver, setSearchAndDeliver] = React.useState({\r\n    PatientSearchClause: \"\",\r\n    CurrentPatientList: [],\r\n    FromDate: \"\",\r\n    ToDate: \"\",\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    const previousSearchDate = sessionStorage.getItem(\"previousSearchDate\");\r\n    if (previousSearchDate) {\r\n      const prevDate = JSON.parse(sessionStorage.getItem(\"previousSearchDate\"));\r\n      setSearchAndDeliver((prev) => ({\r\n        ...prev,\r\n        FromDate: prevDate.FromDate,\r\n        ToDate: prevDate.ToDate,\r\n      }));\r\n    }\r\n  }, [SearchAndDeliver.FromDate, SearchAndDeliver.ToDate]);\r\n  // React.useEffect(() => {\r\n  //   GetCurrentPatient(SearchAndDeliver, setSearchAndDeliver);\r\n  //   console.log(\"forceRender is =>\", forceRender);\r\n  // }, [forceRender]);\r\n  React.useMemo(() => {\r\n    if (SearchAndDeliver.FromDate && SearchAndDeliver.ToDate) {\r\n      GetCurrentPatient(SearchAndDeliver, setSearchAndDeliver, filter);\r\n      if (\r\n        moment(SubstractMonth()).locale(\"fa\").format(\"jYYYY/jM/jD\") !==\r\n          SearchAndDeliver.FromDate ||\r\n        moment(ExcludeTenDays()).locale(\"fa\").format(\"jYYYY/jM/jD\") !==\r\n          SearchAndDeliver.FromDate\r\n      ) {\r\n        window.sessionStorage.setItem(\r\n          \"previousSearchDate\",\r\n          JSON.stringify({\r\n            FromDate: SearchAndDeliver.FromDate,\r\n            ToDate: SearchAndDeliver.ToDate,\r\n          })\r\n        );\r\n      }\r\n    }\r\n  }, [\r\n    SearchAndDeliver.PatientSearchClause,\r\n    SearchAndDeliver.FromDate,\r\n    SearchAndDeliver.ToDate,\r\n    forceRender,\r\n    filter,\r\n  ]);\r\n  return { SearchAndDeliver, setSearchAndDeliver };\r\n};\r\n\r\nexport default useCurrentPatientSearchLogicHandler;\r\n","import SwalAlert from 'Global/Components/CommonComponents/SwalAlert/SwalAlert';\r\nimport Cookies from 'js-cookie';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport { env } from 'env';\r\n\r\nexport const GetCurrentPatient = async (\r\n  SearchAndDeliver,\r\n  setSearchAndDeliver,\r\n  filter\r\n) => {\r\n  const IdPerson =\r\n    Cookies.get('user') &&\r\n    JSON.parse(Cookies.get('user'))?.IdPerson;\r\n  return Post(\r\n    'POST',\r\n    `${process.env.REACT_APP_API_URL_API_GET_CURRENTPATIENT}`,\r\n    true,\r\n    {\r\n      pageSize: 0,\r\n      startIndex: 0,\r\n      idPerson: IdPerson,\r\n      clause: SearchAndDeliver.PatientSearchClause,\r\n      fromDate: SearchAndDeliver.FromDate,\r\n      toDate: SearchAndDeliver.ToDate,\r\n      searchType: 0,\r\n      filterFormAndService: filter?.ItemValue || 0,\r\n    }\r\n  ).then((response) => {\r\n    // console.log(\r\n    //   'current patients response ==-->',\r\n    //   response\r\n    // );\r\n\r\n    if (response.data.tasks.resCode === 1) {\r\n      setSearchAndDeliver((prev) => ({\r\n        ...prev,\r\n        CurrentPatientList: response.data.tasks.Data,\r\n      }));\r\n    } else {\r\n      SwalAlert(\r\n        'error',\r\n        response.data.tasks.resMessage,\r\n        false\r\n      );\r\n    }\r\n  });\r\n};\r\n","import FindLangKey from \"Global/Functions/FindLangKey/FindLangKey\";\r\nimport React from \"react\";\r\n\r\nconst useFilterComboData = () => {\r\n  const all_label = FindLangKey(\"genral-public-label-all\");\r\n\r\n  const without_service = FindLangKey(\r\n    \"current-patients-filter-selector-no-service\"\r\n  );\r\n\r\n  const without_form = FindLangKey(\"current-patients-filter-selector-no-form\");\r\n\r\n  const show_msg = FindLangKey(\"genral-public-label-show-by\");\r\n\r\n  const dataArray = [\r\n    {\r\n      ItemContent: all_label,\r\n      ItemValue: 0,\r\n    },\r\n    {\r\n      ItemContent: without_service,\r\n      ItemValue: 4,\r\n    },\r\n    {\r\n      ItemContent: without_form,\r\n      ItemValue: 3,\r\n    },\r\n  ];\r\n\r\n  const default_value = [\r\n    {\r\n      ItemContent: all_label,\r\n      ItemValue: all_label,\r\n    },\r\n  ];\r\n\r\n  return { dataArray, default_value, show_msg };\r\n};\r\n\r\nexport default useFilterComboData;\r\n","import { Card, Container, Stack } from '@mui/material';\r\nimport { GlobalContext } from 'Global/Context/GlobalContextProvider';\r\nimport React, {\r\n  useContext,\r\n  useEffect,\r\n  useState,\r\n} from 'react';\r\nimport EachPatient from './Components/EachPatient/EachPatient';\r\nimport PatientSearchBox from './Components/PatientSearchBox/PatientSearchBox';\r\nimport useCurrentPatientSearchLogicHandler from './Hooks/useCurrentPatientSearchLogicHandler';\r\nimport styles from './Styles/Current.Patient.module.scss';\r\nimport DateRangePicker from 'Global/Components/CommonComponents/DateRangePicker/DateRangePicker';\r\nimport { ArabicToPersian } from 'utils/ConvertToPersianTextFromArabic';\r\nimport useOptimizeListRenderPerformance from 'Global/Hooks/useOptimizeListRenderPerformance';\r\nimport useSortSelectedPatientsToTop from 'Global/Hooks/useSortSelectedPatientsToTop';\r\nimport { useAtom } from 'jotai';\r\nimport { pageRefreshAtom } from 'Global/shared/page.refresh.atom';\r\nimport GetPostResponse from 'Global/Functions/GetPostResponse/GetPostResponse';\r\nimport { env } from 'env';\r\nimport EditableCustomizableSelect from 'Global/Components/EditableComponents/EditableCustomizableSelect/EditableCustomizableSelect';\r\nimport useFilterComboData from './Hooks/useFilterComboData';\r\nimport { Post } from 'Xhr/Xhr';\r\nimport useGetSummaryList from '../PatientsForVisit/components/FileReportsSummary/hooks/useGetSummaryList';\r\nimport { themeColors } from 'Global/JsxThemeColor/JsxThemeColor';\r\n\r\nconst CurrentPatients = () => {\r\n  const [filter, setFilter] = useState(0);\r\n\r\n  const [pageRefresh] = useAtom(pageRefreshAtom);\r\n\r\n  const [forceRender, setForceRender] =\r\n    React.useState(false);\r\n\r\n  const { SearchAndDeliver, setSearchAndDeliver } =\r\n    useCurrentPatientSearchLogicHandler(\r\n      forceRender,\r\n      filter\r\n    );\r\n\r\n  const GlobalConstants = useContext(GlobalContext);\r\n\r\n  const userFilePatients = useSortSelectedPatientsToTop(\r\n    SearchAndDeliver?.CurrentPatientList\r\n  );\r\n\r\n  const { list, handleTouchMove, handleScroll } =\r\n    useOptimizeListRenderPerformance(userFilePatients);\r\n\r\n  const languageArray =\r\n    useContext(GlobalContext)?.LanguageArray;\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      sessionStorage.removeItem('quickActions');\r\n    };\r\n  }, []);\r\n\r\n  const [detections, setDetections] = useState(null);\r\n  useEffect(() => {\r\n    Post(\r\n      'POST',\r\n      `${process.env.REACT_APP_API_URL_API_GET_TASHKHIS_LIST}`,\r\n      true,\r\n      {\r\n        idSystem: 900,\r\n        clause: '',\r\n      }\r\n    ).then((response) => {\r\n      setDetections(response.data.Data.list);\r\n    });\r\n  }, []);\r\n\r\n  const { dataArray, default_value, show_msg } =\r\n    useFilterComboData();\r\n\r\n  const documentSummaryList = useGetSummaryList();\r\n\r\n  return (\r\n    <Container sx={{ pb: '1em' }} maxWidth=\"md\">\r\n      {forceRender ? <></> : <></>}\r\n      {pageRefresh ? <></> : <></>}\r\n      <PatientSearchBox\r\n        setSearchAndDeliver={setSearchAndDeliver}\r\n        languageArray={languageArray}\r\n      />\r\n      <Stack alignItems=\"center\">\r\n        <DateRangePicker\r\n          GetDateRange={setSearchAndDeliver}\r\n          initialValue={{\r\n            FromDate: SearchAndDeliver.FromDate,\r\n            ToDate: SearchAndDeliver.ToDate,\r\n          }}\r\n          // ExcludeTenDay={true}\r\n        />\r\n        <EditableCustomizableSelect\r\n          SelectableDataArray={dataArray}\r\n          initialData={default_value}\r\n          isSingle={true}\r\n          label={show_msg}\r\n          enableInitialOnchange={true}\r\n          GetSelectedValue={setFilter}\r\n        />\r\n      </Stack>\r\n      <Stack marginTop=\".3em\" spacing={'.5em'}>\r\n        {forceRender ? <></> : <></>}\r\n        <div\r\n          style={{\r\n            all: 'inherit',\r\n          }}\r\n          onWheel={handleScroll}\r\n          onTouchMove={handleTouchMove}\r\n          className={styles.patientContainer}\r\n        >\r\n          {list?.map((Patient, index) => (\r\n            <Card\r\n              elevation={2}\r\n              sx={{ p: '.3em', borderRadius: '20px' }}\r\n              className={styles.PatientCard}\r\n              key={index}\r\n            >\r\n              <EachPatient\r\n                Patient={Patient}\r\n                key={GlobalConstants.uuidV4()}\r\n                setForceRender={setForceRender}\r\n                detections={detections}\r\n                documentSummaryList={documentSummaryList}\r\n                bgcolor={`${themeColors.ColorSecondary} !important`}\r\n              />\r\n            </Card>\r\n          ))}\r\n        </div>\r\n      </Stack>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CurrentPatients;\r\n"],"names":["useCurrentPatientSearchLogicHandler","forceRender","filter","SearchAndDeliver","setSearchAndDeliver","React","PatientSearchClause","CurrentPatientList","FromDate","ToDate","sessionStorage","getItem","prevDate","JSON","parse","prev","async","_JSON$parse","IdPerson","Cookies","Post","concat","process","pageSize","startIndex","idPerson","clause","fromDate","toDate","searchType","filterFormAndService","ItemValue","then","response","data","tasks","resCode","Data","SwalAlert","resMessage","GetCurrentPatient","moment","SubstractMonth","locale","format","ExcludeTenDays","window","setItem","stringify","useFilterComboData","all_label","FindLangKey","dataArray","ItemContent","default_value","show_msg","CurrentPatients","_useContext","setFilter","useState","pageRefresh","useAtom","pageRefreshAtom","setForceRender","GlobalConstants","useContext","GlobalContext","userFilePatients","useSortSelectedPatientsToTop","list","handleTouchMove","handleScroll","useOptimizeListRenderPerformance","languageArray","LanguageArray","useEffect","removeItem","detections","setDetections","idSystem","documentSummaryList","useGetSummaryList","_jsxs","Container","sx","pb","maxWidth","children","_jsx","_Fragment","PatientSearchBox","Stack","alignItems","DateRangePicker","GetDateRange","initialValue","EditableCustomizableSelect","SelectableDataArray","initialData","isSingle","label","enableInitialOnchange","GetSelectedValue","marginTop","spacing","style","all","onWheel","onTouchMove","className","styles","map","Patient","index","Card","elevation","p","borderRadius","EachPatient","bgcolor","themeColors","uuidV4"],"sourceRoot":""}