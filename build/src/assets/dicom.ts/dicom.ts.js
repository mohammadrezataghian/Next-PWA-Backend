import sha12 from "/assets/dicom.ts/sha1.js";
import {createProgramInfo, primitives, createFramebufferInfo, setBuffersAndAttributes, bindFramebufferInfo, setUniforms, drawBufferInfo, createTexture} from "/assets/dicom.ts/twgljs.js";
import {convertBytes} from "/assets/dicom.ts/dicom-character-set.js";
import pako2 from "/assets/dicom.ts/pako.js";
import __commonjs_module0 from "/assets/dicom.ts/jpeg-lossless-decoder-js.js";
const {lossless} = __commonjs_module0;
;
var __dirname = "/node_modules/dicom.ts/dist";
var __filename = "/node_modules/dicom.ts/dist";
function defaultSetTimout() {
  throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
  throw new Error("clearTimeout has not been defined");
}
var cachedSetTimeout = defaultSetTimout;
var cachedClearTimeout = defaultClearTimeout;
var globalContext;
if (typeof window !== "undefined") {
  globalContext = window;
} else if (typeof self !== "undefined") {
  globalContext = self;
} else {
  globalContext = {};
}
if (typeof globalContext.setTimeout === "function") {
  cachedSetTimeout = setTimeout;
}
if (typeof globalContext.clearTimeout === "function") {
  cachedClearTimeout = clearTimeout;
}
function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    return setTimeout(fun, 0);
  }
  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }
  try {
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e2) {
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}
function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    return clearTimeout(marker);
  }
  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }
  try {
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      return cachedClearTimeout.call(null, marker);
    } catch (e2) {
      return cachedClearTimeout.call(this, marker);
    }
  }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }
  draining = false;
  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }
  if (queue.length) {
    drainQueue();
  }
}
function drainQueue() {
  if (draining) {
    return;
  }
  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;
  while (len) {
    currentQueue = queue;
    queue = [];
    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }
    queueIndex = -1;
    len = queue.length;
  }
  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}
function nextTick(fun) {
  var args = new Array(arguments.length - 1);
  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }
  queue.push(new Item(fun, args));
  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}
function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}
Item.prototype.run = function() {
  this.fun.apply(null, this.array);
};
var title = "browser";
var platform = "browser";
var browser = true;
var argv = [];
var version = "";
var versions = {};
var release = {};
var config = {};
function noop() {
}
var on = noop;
var addListener = noop;
var once = noop;
var off = noop;
var removeListener = noop;
var removeAllListeners = noop;
var emit = noop;
function binding(name) {
  throw new Error("process.binding is not supported");
}
function cwd() {
  return "/";
}
function chdir(dir) {
  throw new Error("process.chdir is not supported");
}
function umask() {
  return 0;
}
var performance = globalContext.performance || {};
var performanceNow = performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow || function() {
  return new Date().getTime();
};
function hrtime(previousTimestamp) {
  var clocktime = performanceNow.call(performance) * 1e-3;
  var seconds = Math.floor(clocktime);
  var nanoseconds = Math.floor(clocktime % 1 * 1e9);
  if (previousTimestamp) {
    seconds = seconds - previousTimestamp[0];
    nanoseconds = nanoseconds - previousTimestamp[1];
    if (nanoseconds < 0) {
      seconds--;
      nanoseconds += 1e9;
    }
  }
  return [seconds, nanoseconds];
}
var startTime = new Date();
function uptime() {
  var currentTime = new Date();
  var dif = currentTime - startTime;
  return dif / 1e3;
}
var process = {
  nextTick,
  title,
  browser,
  env: {NODE_ENV: "production"},
  argv,
  version,
  versions,
  on,
  addListener,
  once,
  off,
  removeListener,
  removeAllListeners,
  emit,
  binding,
  cwd,
  chdir,
  umask,
  hrtime,
  platform,
  release,
  config,
  uptime
};
var TransferSyntax;
(function(TransferSyntax2) {
  TransferSyntax2["ImplicitLittle"] = "1.2.840.10008.1.2";
  TransferSyntax2["ExplicitLittle"] = "1.2.840.10008.1.2.1";
  TransferSyntax2["ExplicitBig"] = "1.2.840.10008.1.2.2";
  TransferSyntax2["CompressionJpeg"] = "1.2.840.10008.1.2.4";
  TransferSyntax2["CompressionJpegLossless"] = "1.2.840.10008.1.2.4.57";
  TransferSyntax2["CompressionJpegLosslessSel1"] = "1.2.840.10008.1.2.4.70";
  TransferSyntax2["CompressionJpegBaseline8bit"] = "1.2.840.10008.1.2.4.50";
  TransferSyntax2["CompressionJpegBaseline12bit"] = "1.2.840.10008.1.2.4.51";
  TransferSyntax2["CompressionJpegLsLossless"] = "1.2.840.10008.1.2.4.80";
  TransferSyntax2["CompressionJpegLs"] = "1.2.840.10008.1.2.4.81";
  TransferSyntax2["CompressionJpeg2000Lossless"] = "1.2.840.10008.1.2.4.90";
  TransferSyntax2["CompressionJpeg2000"] = "1.2.840.10008.1.2.4.91";
  TransferSyntax2["CompressionRLE"] = "1.2.840.10008.1.2.5";
  TransferSyntax2["CompressionDeflate"] = "1.2.840.10008.1.2.1.99";
})(TransferSyntax || (TransferSyntax = {}));
var PixelRepresentation;
(function(PixelRepresentation2) {
  PixelRepresentation2[PixelRepresentation2["UInt"] = 0] = "UInt";
  PixelRepresentation2[PixelRepresentation2["Int"] = 1] = "Int";
})(PixelRepresentation || (PixelRepresentation = {}));
var SliceDirection;
(function(SliceDirection2) {
  SliceDirection2[SliceDirection2["Unknown"] = -1] = "Unknown";
  SliceDirection2[SliceDirection2["Axial"] = 2] = "Axial";
  SliceDirection2[SliceDirection2["Coronal"] = 1] = "Coronal";
  SliceDirection2[SliceDirection2["Sagittal"] = 0] = "Sagittal";
  SliceDirection2[SliceDirection2["Oblique"] = 3] = "Oblique";
})(SliceDirection || (SliceDirection = {}));
var ByteType;
(function(ByteType2) {
  ByteType2[ByteType2["Unkown"] = 0] = "Unkown";
  ByteType2[ByteType2["Binary"] = 1] = "Binary";
  ByteType2[ByteType2["Integer"] = 2] = "Integer";
  ByteType2[ByteType2["IntegerUnsigned"] = 3] = "IntegerUnsigned";
  ByteType2[ByteType2["Float"] = 4] = "Float";
  ByteType2[ByteType2["Complex"] = 5] = "Complex";
  ByteType2[ByteType2["Rgb"] = 6] = "Rgb";
})(ByteType || (ByteType = {}));
const DefaultCharset = "ISO 2022 IR 6";
let crcTable;
const MAX_VALUE = 9007199254740991;
const MIN_VALUE = -9007199254740991;
const dec2hex = (i) => (i + 65536).toString(16).substr(-4).toUpperCase();
const getStringAt = (dataview, start, length, charset, vr) => {
  const strBuff = new Uint8Array(dataview.buffer, dataview.byteOffset + start, length);
  let str = convertBytes(charset || DefaultCharset, strBuff, {
    vr
  });
  while (str && str.charCodeAt(str.length - 1) === 0) {
    str = str.slice(0, -1);
  }
  return str;
};
const stripLeadingZeros = (str) => str.replace(/^[0]+/g, "");
const safeParseInt = (str) => {
  const intStr = stripLeadingZeros(str);
  if (intStr.length > 0) {
    return parseInt(intStr, 10);
  }
  return 0;
};
const convertCamcelCaseToTitleCase = (str) => {
  const result = str.replace(/([A-Z][a-z])/g, " $1");
  return (result.charAt(0).toUpperCase() + result.slice(1)).trim();
};
const safeParseFloat = (str) => {
  const floatStr = stripLeadingZeros(str);
  if (floatStr.length > 0) {
    return parseFloat(floatStr);
  }
  return 0;
};
const bytesToDouble = (data) => {
  const [b0, b1, b2, b3, b4, b5, b6, b7] = data;
  const sign = (b0 & 1 << 7) >> 7;
  const exponent = (b0 & 127) << 4 | (b1 & 15 << 4) >> 4;
  if (exponent === 0) {
    return 0;
  }
  if (exponent === 2047) {
    return sign ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
  }
  const mul = 2 ** exponent - 1023 - 52;
  const mantissa = b7 + b6 * 2 ** 8 + b5 * 2 ** (8 * 2) + b4 * 2 ** (8 * 3) + b3 * 2 ** (8 * 4) + b2 * 2 ** (8 * 5) + (b1 & 15) * 2 ** (8 * 6) + 2 ** 52;
  return (-1) ** sign * mantissa * mul;
};
const concatArrayBuffers = (buffer1, buffer2) => {
  const tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);
  tmp.set(new Uint8Array(buffer1), 0);
  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);
  return tmp.buffer;
};
const toArrayBuffer = (buffer) => {
  const ab = new ArrayBuffer(buffer.length);
  const view = new Uint8Array(ab);
  for (let i = 0; i < buffer.length; i += 1) {
    view[i] = buffer[i];
  }
  return ab;
};
const isString = (s) => typeof s === "string" || s instanceof String;
const isValidDate = (d) => {
  if (Object.prototype.toString.call(d) === "[object Date]") {
    if (isNaN(d.getTime())) {
      return false;
    }
    return true;
  }
  return false;
};
const swap32 = (val) => (val & 255) << 24 | (val & 65280) << 8 | val >> 8 & 65280 | val >> 24 & 255;
const swap16 = (val) => ((val & 255) << 8 | val >> 8 & 255) << 16 >> 16;
const makeCRCTable = () => {
  crcTable = crcTable || Array(256);
  for (let n = 0; n < 256; n += 1) {
    let c = n;
    for (let k = 0; k < 8; k += 1) {
      c = c & 1 ? 3988292384 ^ c >>> 1 : c >>> 1;
    }
    crcTable[n] = c;
  }
  return crcTable;
};
const crc32 = (dataView) => {
  crcTable = crcTable || makeCRCTable();
  let crc = 0 ^ -1;
  for (let i = 0; i < dataView.byteLength; i += 1) {
    crc = crc >>> 8 ^ crcTable[(crc ^ dataView.getUint8(i)) & 255];
  }
  return (crc ^ -1) >>> 0;
};
const createBitMask = (numBytes, bitsStored, unsigned) => {
  let mask = 4294967295;
  mask >>>= (4 - numBytes) * 8 + (numBytes * 8 - bitsStored);
  if (unsigned) {
    if (numBytes === 1) {
      mask &= 255;
    } else if (numBytes === 2) {
      mask &= 65535;
    } else if (numBytes === 4) {
      mask &= 4294967295;
    } else if (numBytes === 8) {
      mask = 4294967295;
    }
  } else {
    mask = 4294967295;
  }
  return mask;
};
var Utils = {
  __proto__: null,
  MAX_VALUE,
  MIN_VALUE,
  dec2hex,
  getStringAt,
  stripLeadingZeros,
  safeParseInt,
  convertCamcelCaseToTitleCase,
  safeParseFloat,
  bytesToDouble,
  concatArrayBuffers,
  toArrayBuffer,
  isString,
  isValidDate,
  swap32,
  swap16,
  makeCRCTable,
  crc32,
  createBitMask
};
const {
  dec2hex: dec2hex$1
} = Utils;
const dictPrivate = {
  "0207": {
    "101F": ["FE", "ElscintDataScale"]
  }
};
const dict = {
  "0002": {
    "0001": ["OB", "FileMetaInformationVersion"],
    "0002": ["UI", "MediaStoredSOPClassUID"],
    "0003": ["UI", "MediaStoredSOPInstanceUID"],
    "0010": ["UI", "TransferSyntaxUID"],
    "0012": ["UI", "ImplementationClassUID"],
    "0013": ["SH", "ImplementationVersionName"],
    "0016": ["AE", "SourceApplicationEntityTitle"],
    "0100": ["UI", "PrivateInformationCreatorUID"],
    "0102": ["OB", "PrivateInformation"]
  },
  "0004": {
    "1130": ["CS", "FilesetID"],
    "1141": ["CS", "FilesetDescriptorFileFileID"],
    "1142": ["CS", "FilesetDescriptorFileFormat"],
    "1200": ["UL", "RootDirectoryEntitysFirstDirectoryRecordOffset"],
    "1202": ["UL", "RootDirectoryEntitysLastDirectoryRecordOffset"],
    "1212": ["US", "File-setConsistenceFlag"],
    "1220": ["SQ", "DirectoryRecordSequence"],
    "1400": ["UL", "NextDirectoryRecordOffset"],
    "1410": ["US", "RecordInuseFlag"],
    "1420": ["UL", "ReferencedLowerlevelDirectoryEntityOffset"],
    "1430": ["CS", "DirectoryRecordType"],
    "1432": ["UI", "PrivateRecordUID"],
    "1500": ["CS", "ReferencedFileID"],
    "1510": ["UI", "ReferencedSOPClassUIDInFile"],
    "1511": ["UI", "ReferencedSOPInstanceUIDInFile"],
    "1600": ["UL", "NumberOfReferences"]
  },
  "0008": {
    "0001": ["UL", "LengthToEnd"],
    "0005": ["CS", "SpecificCharacterSet"],
    "0006": ["SQ", "LanguageCodeSequence"],
    "0008": ["CS", "ImageType"],
    "0010": ["SH", "RecognitionCode"],
    "0012": ["DA", "InstanceCreationDate"],
    "0013": ["TM", "InstanceCreationTime"],
    "0014": ["UI", "InstanceCreatorUID"],
    "0016": ["UI", "SOPClassUID"],
    "0018": ["UI", "SOPInstanceUID"],
    "001A": ["UI", "RelatedGeneralSOPClassUID"],
    "001B": ["UI", "OriginalSpecializedSOPClassUID"],
    "0020": ["DA", "StudyDate"],
    "0021": ["DA", "SeriesDate"],
    "0022": ["DA", "AcquisitionDate"],
    "0023": ["DA", "ContentDate"],
    "0024": ["DA", "OverlayDate"],
    "0025": ["DA", "CurveDate"],
    "002A": ["DT", "AcquisitionDateTime"],
    "0030": ["TM", "StudyTime"],
    "0031": ["TM", "SeriesTime"],
    "0032": ["TM", "AcquisitionTime"],
    "0033": ["TM", "ContentTime"],
    "0034": ["TM", "OverlayTime"],
    "0035": ["TM", "CurveTime"],
    "0040": ["US", "DataSetType"],
    "0041": ["LO", "DataSetSubtype"],
    "0042": ["CS", "NuclearMedicineSeriesType"],
    "0050": ["SH", "AccessionNumber"],
    "0051": ["SQ", "IssuerOfAccessionNumberSequence"],
    "0052": ["CS", "QueryRetrieveLevel"],
    "0054": ["AE", "RetrieveAETitle"],
    "0056": ["CS", "InstanceAvailability"],
    "0058": ["UI", "FailedSOPInstanceUIDList"],
    "0060": ["CS", "Modality"],
    "0061": ["CS", "ModalitiesInStudy"],
    "0062": ["UI", "SOPClassesInStudy"],
    "0064": ["CS", "ConversionType"],
    "0068": ["CS", "PresentationIntentType"],
    "0070": ["LO", "Manufacturer"],
    "0080": ["LO", "InstitutionName"],
    "0081": ["ST", "InstitutionAddress"],
    "0082": ["SQ", "InstitutionCodeSequence"],
    "0090": ["PN", "ReferringPhysicianName"],
    "0092": ["ST", "ReferringPhysicianAddress"],
    "0094": ["SH", "ReferringPhysicianTelephoneNumbers"],
    "0096": ["SQ", "ReferringPhysicianIdentificationSequence"],
    "0100": ["SH", "CodeValue"],
    "0102": ["SH", "CodingSchemeDesignator"],
    "0103": ["SH", "CodingSchemeVersion"],
    "0104": ["LO", "CodeMeaning"],
    "0105": ["CS", "MappingResource"],
    "0106": ["DT", "ContextGroupVersion"],
    "0107": ["DT", "ContextGroupLocalVersion"],
    "010B": ["CS", "ContextGroupExtensionFlag"],
    "010C": ["UI", "CodingSchemeUID"],
    "010D": ["UI", "ContextGroupExtensionCreatorUID"],
    "010F": ["CS", "ContextIdentifier"],
    "0110": ["SQ", "CodingSchemeIdentificationSequence"],
    "0112": ["LO", "CodingSchemeRegistry"],
    "0114": ["ST", "CodingSchemeExternalID"],
    "0115": ["ST", "CodingSchemeName"],
    "0116": ["ST", "CodingSchemeResponsibleOrganization"],
    "0117": ["UI", "ContextUID"],
    "0201": ["SH", "TimezoneOffsetFromUTC"],
    "1000": ["AE", "NetworkID"],
    "1010": ["SH", "StationName"],
    "1030": ["LO", "StudyDescription"],
    "1032": ["SQ", "ProcedureCodeSequence"],
    "103E": ["LO", "SeriesDescription"],
    "103F": ["SQ", "SeriesDescriptionCodeSequence"],
    "1040": ["LO", "InstitutionalDepartmentName"],
    "1048": ["PN", "PhysiciansOfRecord"],
    "1049": ["SQ", "PhysiciansOfRecordIdentificationSequence"],
    "1050": ["PN", "PerformingPhysicianName"],
    "1052": ["SQ", "PerformingPhysicianIdentificationSequence"],
    "1060": ["PN", "NameOfPhysiciansReadingStudy"],
    "1062": ["SQ", "PhysiciansReadingStudyIdentificationSequence"],
    "1070": ["PN", "OperatorsName"],
    "1072": ["SQ", "OperatorIdentificationSequence"],
    "1080": ["LO", "AdmittingDiagnosesDescription"],
    "1084": ["SQ", "AdmittingDiagnosesCodeSequence"],
    "1090": ["LO", "ManufacturerModelName"],
    "1100": ["SQ", "ReferencedResultsSequence"],
    "1110": ["SQ", "ReferencedStudySequence"],
    "1111": ["SQ", "ReferencedPerformedProcedureStepSequence"],
    "1115": ["SQ", "ReferencedSeriesSequence"],
    "1120": ["SQ", "ReferencedPatientSequence"],
    "1125": ["SQ", "ReferencedVisitSequence"],
    "1130": ["SQ", "ReferencedOverlaySequence"],
    "1134": ["SQ", "ReferencedStereometricInstanceSequence"],
    "113A": ["SQ", "ReferencedWaveformSequence"],
    "1140": ["SQ", "ReferencedImageSequence"],
    "1145": ["SQ", "ReferencedCurveSequence"],
    "114A": ["SQ", "ReferencedInstanceSequence"],
    "114B": ["SQ", "ReferencedRealWorldValueMappingInstanceSequence"],
    "1150": ["UI", "ReferencedSOPClassUID"],
    "1155": ["UI", "ReferencedSOPInstanceUID"],
    "115A": ["UI", "SOPClassesSupported"],
    "1160": ["IS", "ReferencedFrameNumber"],
    "1161": ["UL", "SimpleFrameList"],
    "1162": ["UL", "CalculatedFrameList"],
    "1163": ["FD", "TimeRange"],
    "1164": ["SQ", "FrameExtractionSequence"],
    "1167": ["UI", "MultiFrameSourceSOPInstanceUID"],
    "1195": ["UI", "TransactionUID"],
    "1197": ["US", "FailureReason"],
    "1198": ["SQ", "FailedSOPSequence"],
    "1199": ["SQ", "ReferencedSOPSequence"],
    "1200": ["SQ", "StudiesContainingOtherReferencedInstancesSequence"],
    "1250": ["SQ", "RelatedSeriesSequence"],
    "2110": ["CS", "LossyImageCompressionRetired"],
    "2111": ["ST", "DerivationDescription"],
    "2112": ["SQ", "SourceImageSequence"],
    "2120": ["SH", "StageName"],
    "2122": ["IS", "StageNumber"],
    "2124": ["IS", "NumberOfStages"],
    "2127": ["SH", "ViewName"],
    "2128": ["IS", "ViewNumber"],
    "2129": ["IS", "NumberOfEventTimers"],
    "212A": ["IS", "NumberOfViewsInStage"],
    "2130": ["DS", "EventElapsedTimes"],
    "2132": ["LO", "EventTimerNames"],
    "2133": ["SQ", "EventTimerSequence"],
    "2134": ["FD", "EventTimeOffset"],
    "2135": ["SQ", "EventCodeSequence"],
    "2142": ["IS", "StartTrim"],
    "2143": ["IS", "StopTrim"],
    "2144": ["IS", "RecommendedDisplayFrameRate"],
    "2200": ["CS", "TransducerPosition"],
    "2204": ["CS", "TransducerOrientation"],
    "2208": ["CS", "AnatomicStructure"],
    "2218": ["SQ", "AnatomicRegionSequence"],
    "2220": ["SQ", "AnatomicRegionModifierSequence"],
    "2228": ["SQ", "PrimaryAnatomicStructureSequence"],
    "2229": ["SQ", "AnatomicStructureSpaceOrRegionSequence"],
    "2230": ["SQ", "PrimaryAnatomicStructureModifierSequence"],
    "2240": ["SQ", "TransducerPositionSequence"],
    "2242": ["SQ", "TransducerPositionModifierSequence"],
    "2244": ["SQ", "TransducerOrientationSequence"],
    "2246": ["SQ", "TransducerOrientationModifierSequence"],
    "2251": ["SQ", "AnatomicStructureSpaceOrRegionCodeSequenceTrial"],
    "2253": ["SQ", "AnatomicPortalOfEntranceCodeSequenceTrial"],
    "2255": ["SQ", "AnatomicApproachDirectionCodeSequenceTrial"],
    "2256": ["ST", "AnatomicPerspectiveDescriptionTrial"],
    "2257": ["SQ", "AnatomicPerspectiveCodeSequenceTrial"],
    "2258": ["ST", "AnatomicLocationOfExaminingInstrumentDescriptionTrial"],
    "2259": ["SQ", "AnatomicLocationOfExaminingInstrumentCodeSequenceTrial"],
    "225A": ["SQ", "AnatomicStructureSpaceOrRegionModifierCodeSequenceTrial"],
    "225C": ["SQ", "OnAxisBackgroundAnatomicStructureCodeSequenceTrial"],
    "3001": ["SQ", "AlternateRepresentationSequence"],
    "3010": ["UI", "IrradiationEventUID"],
    "4000": ["LT", "IdentifyingComments"],
    "9007": ["CS", "FrameType"],
    "9092": ["SQ", "ReferencedImageEvidenceSequence"],
    "9121": ["SQ", "ReferencedRawDataSequence"],
    "9123": ["UI", "CreatorVersionUID"],
    "9124": ["SQ", "DerivationImageSequence"],
    "9154": ["SQ", "SourceImageEvidenceSequence"],
    "9205": ["CS", "PixelPresentation"],
    "9206": ["CS", "VolumetricProperties"],
    "9207": ["CS", "VolumeBasedCalculationTechnique"],
    "9208": ["CS", "ComplexImageComponent"],
    "9209": ["CS", "AcquisitionContrast"],
    "9215": ["SQ", "DerivationCodeSequence"],
    "9237": ["SQ", "ReferencedPresentationStateSequence"],
    "9410": ["SQ", "ReferencedOtherPlaneSequence"],
    "9458": ["SQ", "FrameDisplaySequence"],
    "9459": ["FL", "RecommendedDisplayFrameRateInFloat"],
    "9460": ["CS", "SkipFrameRangeFlag"]
  },
  "0010": {
    "0010": ["PN", "PatientName"],
    "0020": ["LO", "PatientID"],
    "0021": ["LO", "IssuerOfPatientID"],
    "0022": ["CS", "TypeOfPatientID"],
    "0024": ["SQ", "IssuerOfPatientIDQualifiersSequence"],
    "0030": ["DA", "PatientBirthDate"],
    "0032": ["TM", "PatientBirthTime"],
    "0040": ["CS", "PatientSex"],
    "0050": ["SQ", "PatientInsurancePlanCodeSequence"],
    "0101": ["SQ", "PatientPrimaryLanguageCodeSequence"],
    "0102": ["SQ", "PatientPrimaryLanguageModifierCodeSequence"],
    "1000": ["LO", "OtherPatientIDs"],
    "1001": ["PN", "OtherPatientNames"],
    "1002": ["SQ", "OtherPatientIDsSequence"],
    "1005": ["PN", "PatientBirthName"],
    "1010": ["AS", "PatientAge"],
    "1020": ["DS", "PatientSize"],
    "1021": ["SQ", "PatientSizeCodeSequence"],
    "1030": ["DS", "PatientWeight"],
    "1040": ["LO", "PatientAddress"],
    "1050": ["LO", "InsurancePlanIdentification"],
    "1060": ["PN", "PatientMotherBirthName"],
    "1080": ["LO", "MilitaryRank"],
    "1081": ["LO", "BranchOfService"],
    "1090": ["LO", "MedicalRecordLocator"],
    "2000": ["LO", "MedicalAlerts"],
    "2110": ["LO", "Allergies"],
    "2150": ["LO", "CountryOfResidence"],
    "2152": ["LO", "RegionOfResidence"],
    "2154": ["SH", "PatientTelephoneNumbers"],
    "2160": ["SH", "EthnicGroup"],
    "2180": ["SH", "Occupation"],
    "21A0": ["CS", "SmokingStatus"],
    "21B0": ["LT", "AdditionalPatientHistory"],
    "21C0": ["US", "PregnancyStatus"],
    "21D0": ["DA", "LastMenstrualDate"],
    "21F0": ["LO", "PatientReligiousPreference"],
    "2201": ["LO", "PatientSpeciesDescription"],
    "2202": ["SQ", "PatientSpeciesCodeSequence"],
    "2203": ["CS", "PatientSexNeutered"],
    "2210": ["CS", "AnatomicalOrientationType"],
    "2292": ["LO", "PatientBreedDescription"],
    "2293": ["SQ", "PatientBreedCodeSequence"],
    "2294": ["SQ", "BreedRegistrationSequence"],
    "2295": ["LO", "BreedRegistrationNumber"],
    "2296": ["SQ", "BreedRegistryCodeSequence"],
    "2297": ["PN", "ResponsiblePerson"],
    "2298": ["CS", "ResponsiblePersonRole"],
    "2299": ["LO", "ResponsibleOrganization"],
    "4000": ["LT", "PatientComments"],
    "9431": ["FL", "ExaminedBodyThickness"]
  },
  "0012": {
    "0010": ["LO", "ClinicalTrialSponsorName"],
    "0020": ["LO", "ClinicalTrialProtocolID"],
    "0021": ["LO", "ClinicalTrialProtocolName"],
    "0030": ["LO", "ClinicalTrialSiteID"],
    "0031": ["LO", "ClinicalTrialSiteName"],
    "0040": ["LO", "ClinicalTrialSubjectID"],
    "0042": ["LO", "ClinicalTrialSubjectReadingID"],
    "0050": ["LO", "ClinicalTrialTimePointID"],
    "0051": ["ST", "ClinicalTrialTimePointDescription"],
    "0060": ["LO", "ClinicalTrialCoordinatingCenterName"],
    "0062": ["CS", "PatientIdentityRemoved"],
    "0063": ["LO", "DeidentificationMethod"],
    "0064": ["SQ", "DeidentificationMethodCodeSequence"],
    "0071": ["LO", "ClinicalTrialSeriesID"],
    "0072": ["LO", "ClinicalTrialSeriesDescription"],
    "0081": ["LO", "ClinicalTrialProtocolEthicsCommitteeName"],
    "0082": ["LO", "ClinicalTrialProtocolEthicsCommitteeApprovalNumber"],
    "0083": ["SQ", "ConsentForClinicalTrialUseSequence"],
    "0084": ["CS", "DistributionType"],
    "0085": ["CS", "ConsentForDistributionFlag"]
  },
  "0014": {
    "0023": ["ST", "CADFileFormat"],
    "0024": ["ST", "ComponentReferenceSystem"],
    "0025": ["ST", "ComponentManufacturingProcedure"],
    "0028": ["ST", "ComponentManufacturer"],
    "0030": ["DS", "MaterialThickness"],
    "0032": ["DS", "MaterialPipeDiameter"],
    "0034": ["DS", "MaterialIsolationDiameter"],
    "0042": ["ST", "MaterialGrade"],
    "0044": ["ST", "MaterialPropertiesFileID"],
    "0045": ["ST", "MaterialPropertiesFileFormat"],
    "0046": ["LT", "MaterialNotes"],
    "0050": ["CS", "ComponentShape"],
    "0052": ["CS", "CurvatureType"],
    "0054": ["DS", "OuterDiameter"],
    "0056": ["DS", "InnerDiameter"],
    "1010": ["ST", "ActualEnvironmentalConditions"],
    "1020": ["DA", "ExpiryDate"],
    "1040": ["ST", "EnvironmentalConditions"],
    "2002": ["SQ", "EvaluatorSequence"],
    "2004": ["IS", "EvaluatorNumber"],
    "2006": ["PN", "EvaluatorName"],
    "2008": ["IS", "EvaluationAttempt"],
    "2012": ["SQ", "IndicationSequence"],
    "2014": ["IS", "IndicationNumber "],
    "2016": ["SH", "IndicationLabel"],
    "2018": ["ST", "IndicationDescription"],
    "201A": ["CS", "IndicationType"],
    "201C": ["CS", "IndicationDisposition"],
    "201E": ["SQ", "IndicationROISequence"],
    "2030": ["SQ", "IndicationPhysicalPropertySequence"],
    "2032": ["SH", "PropertyLabel"],
    "2202": ["IS", "CoordinateSystemNumberOfAxes "],
    "2204": ["SQ", "CoordinateSystemAxesSequence"],
    "2206": ["ST", "CoordinateSystemAxisDescription"],
    "2208": ["CS", "CoordinateSystemDataSetMapping"],
    "220A": ["IS", "CoordinateSystemAxisNumber"],
    "220C": ["CS", "CoordinateSystemAxisType"],
    "220E": ["CS", "CoordinateSystemAxisUnits"],
    "2210": ["OB", "CoordinateSystemAxisValues"],
    "2220": ["SQ", "CoordinateSystemTransformSequence"],
    "2222": ["ST", "TransformDescription"],
    "2224": ["IS", "TransformNumberOfAxes"],
    "2226": ["IS", "TransformOrderOfAxes"],
    "2228": ["CS", "TransformedAxisUnits"],
    "222A": ["DS", "CoordinateSystemTransformRotationAndScaleMatrix"],
    "222C": ["DS", "CoordinateSystemTransformTranslationMatrix"],
    "3011": ["DS", "InternalDetectorFrameTime"],
    "3012": ["DS", "NumberOfFramesIntegrated"],
    "3020": ["SQ", "DetectorTemperatureSequence"],
    "3022": ["DS", "SensorName"],
    "3024": ["DS", "HorizontalOffsetOfSensor"],
    "3026": ["DS", "VerticalOffsetOfSensor"],
    "3028": ["DS", "SensorTemperature"],
    "3040": ["SQ", "DarkCurrentSequence"],
    "3050": ["OB", "DarkCurrentCounts"],
    "3060": ["SQ", "GainCorrectionReferenceSequence"],
    "3070": ["OB", "AirCounts"],
    "3071": ["DS", "KVUsedInGainCalibration"],
    "3072": ["DS", "MAUsedInGainCalibration"],
    "3073": ["DS", "NumberOfFramesUsedForIntegration"],
    "3074": ["LO", "FilterMaterialUsedInGainCalibration"],
    "3075": ["DS", "FilterThicknessUsedInGainCalibration"],
    "3076": ["DA", "DateOfGainCalibration"],
    "3077": ["TM", "TimeOfGainCalibration"],
    "3080": ["OB", "BadPixelImage"],
    "3099": ["LT", "CalibrationNotes"],
    "4002": ["SQ", "PulserEquipmentSequence"],
    "4004": ["CS", "PulserType"],
    "4006": ["LT", "PulserNotes"],
    "4008": ["SQ", "ReceiverEquipmentSequence"],
    "400A": ["CS", "AmplifierType"],
    "400C": ["LT", "ReceiverNotes"],
    "400E": ["SQ", "PreAmplifierEquipmentSequence"],
    "400F": ["LT", "PreAmplifierNotes"],
    "4010": ["SQ", "TransmitTransducerSequence"],
    "4011": ["SQ", "ReceiveTransducerSequence"],
    "4012": ["US", "NumberOfElements"],
    "4013": ["CS", "ElementShape"],
    "4014": ["DS", "ElementDimensionA"],
    "4015": ["DS", "ElementDimensionB"],
    "4016": ["DS", "ElementPitch"],
    "4017": ["DS", "MeasuredBeamDimensionA"],
    "4018": ["DS", "MeasuredBeamDimensionB"],
    "4019": ["DS", "LocationOfMeasuredBeamDiameter"],
    "401A": ["DS", "NominalFrequency"],
    "401B": ["DS", "MeasuredCenterFrequency"],
    "401C": ["DS", "MeasuredBandwidth"],
    "4020": ["SQ", "PulserSettingsSequence"],
    "4022": ["DS", "PulseWidth"],
    "4024": ["DS", "ExcitationFrequency"],
    "4026": ["CS", "ModulationType"],
    "4028": ["DS", "Damping"],
    "4030": ["SQ", "ReceiverSettingsSequence"],
    "4031": ["DS", "AcquiredSoundpathLength"],
    "4032": ["CS", "AcquisitionCompressionType"],
    "4033": ["IS", "AcquisitionSampleSize"],
    "4034": ["DS", "RectifierSmoothing"],
    "4035": ["SQ", "DACSequence"],
    "4036": ["CS", "DACType"],
    "4038": ["DS", "DACGainPoints"],
    "403A": ["DS", "DACTimePoints"],
    "403C": ["DS", "DACAmplitude"],
    "4040": ["SQ", "PreAmplifierSettingsSequence"],
    "4050": ["SQ", "TransmitTransducerSettingsSequence"],
    "4051": ["SQ", "ReceiveTransducerSettingsSequence"],
    "4052": ["DS", "IncidentAngle"],
    "4054": ["ST", "CouplingTechnique"],
    "4056": ["ST", "CouplingMedium"],
    "4057": ["DS", "CouplingVelocity"],
    "4058": ["DS", "CrystalCenterLocationX"],
    "4059": ["DS", "CrystalCenterLocationZ"],
    "405A": ["DS", "SoundPathLength"],
    "405C": ["ST", "DelayLawIdentifier"],
    "4060": ["SQ", "GateSettingsSequence"],
    "4062": ["DS", "GateThreshold"],
    "4064": ["DS", "VelocityOfSound"],
    "4070": ["SQ", "CalibrationSettingsSequence"],
    "4072": ["ST", "CalibrationProcedure"],
    "4074": ["SH", "ProcedureVersion"],
    "4076": ["DA", "ProcedureCreationDate"],
    "4078": ["DA", "ProcedureExpirationDate"],
    "407A": ["DA", "ProcedureLastModifiedDate"],
    "407C": ["TM", "CalibrationTime"],
    "407E": ["DA", "CalibrationDate"],
    "5002": ["IS", "LINACEnergy"],
    "5004": ["IS", "LINACOutput"]
  },
  "0018": {
    "0010": ["LO", "ContrastBolusAgent"],
    "0012": ["SQ", "ContrastBolusAgentSequence"],
    "0014": ["SQ", "ContrastBolusAdministrationRouteSequence"],
    "0015": ["CS", "BodyPartExamined"],
    "0020": ["CS", "ScanningSequence"],
    "0021": ["CS", "SequenceVariant"],
    "0022": ["CS", "ScanOptions"],
    "0023": ["CS", "MRAcquisitionType"],
    "0024": ["SH", "SequenceName"],
    "0025": ["CS", "AngioFlag"],
    "0026": ["SQ", "InterventionDrugInformationSequence"],
    "0027": ["TM", "InterventionDrugStopTime"],
    "0028": ["DS", "InterventionDrugDose"],
    "0029": ["SQ", "InterventionDrugCodeSequence"],
    "002A": ["SQ", "AdditionalDrugSequence"],
    "0030": ["LO", "Radionuclide"],
    "0031": ["LO", "Radiopharmaceutical"],
    "0032": ["DS", "EnergyWindowCenterline"],
    "0033": ["DS", "EnergyWindowTotalWidth"],
    "0034": ["LO", "InterventionDrugName"],
    "0035": ["TM", "InterventionDrugStartTime"],
    "0036": ["SQ", "InterventionSequence"],
    "0037": ["CS", "TherapyType"],
    "0038": ["CS", "InterventionStatus"],
    "0039": ["CS", "TherapyDescription"],
    "003A": ["ST", "InterventionDescription"],
    "0040": ["IS", "CineRate"],
    "0042": ["CS", "InitialCineRunState"],
    "0050": ["DS", "SliceThickness"],
    "0060": ["DS", "KVP"],
    "0070": ["IS", "CountsAccumulated"],
    "0071": ["CS", "AcquisitionTerminationCondition"],
    "0072": ["DS", "EffectiveDuration"],
    "0073": ["CS", "AcquisitionStartCondition"],
    "0074": ["IS", "AcquisitionStartConditionData"],
    "0075": ["IS", "AcquisitionTerminationConditionData"],
    "0080": ["DS", "RepetitionTime"],
    "0081": ["DS", "EchoTime"],
    "0082": ["DS", "InversionTime"],
    "0083": ["DS", "NumberOfAverages"],
    "0084": ["DS", "ImagingFrequency"],
    "0085": ["SH", "ImagedNucleus"],
    "0086": ["IS", "EchoNumbers"],
    "0087": ["DS", "MagneticFieldStrength"],
    "0088": ["DS", "SpacingBetweenSlices"],
    "0089": ["IS", "NumberOfPhaseEncodingSteps"],
    "0090": ["DS", "DataCollectionDiameter"],
    "0091": ["IS", "EchoTrainLength"],
    "0093": ["DS", "PercentSampling"],
    "0094": ["DS", "PercentPhaseFieldOfView"],
    "0095": ["DS", "PixelBandwidth"],
    "1000": ["LO", "DeviceSerialNumber"],
    "1002": ["UI", "DeviceUID"],
    "1003": ["LO", "DeviceID"],
    "1004": ["LO", "PlateID"],
    "1005": ["LO", "GeneratorID"],
    "1006": ["LO", "GridID"],
    "1007": ["LO", "CassetteID"],
    "1008": ["LO", "GantryID"],
    "1010": ["LO", "SecondaryCaptureDeviceID"],
    "1011": ["LO", "HardcopyCreationDeviceID"],
    "1012": ["DA", "DateOfSecondaryCapture"],
    "1014": ["TM", "TimeOfSecondaryCapture"],
    "1016": ["LO", "SecondaryCaptureDeviceManufacturer"],
    "1017": ["LO", "HardcopyDeviceManufacturer"],
    "1018": ["LO", "SecondaryCaptureDeviceManufacturerModelName"],
    "1019": ["LO", "SecondaryCaptureDeviceSoftwareVersions"],
    "101A": ["LO", "HardcopyDeviceSoftwareVersion"],
    "101B": ["LO", "HardcopyDeviceManufacturerModelName"],
    "1020": ["LO", "SoftwareVersions"],
    "1022": ["SH", "VideoImageFormatAcquired"],
    "1023": ["LO", "DigitalImageFormatAcquired"],
    "1030": ["LO", "ProtocolName"],
    "1040": ["LO", "ContrastBolusRoute"],
    "1041": ["DS", "ContrastBolusVolume"],
    "1042": ["TM", "ContrastBolusStartTime"],
    "1043": ["TM", "ContrastBolusStopTime"],
    "1044": ["DS", "ContrastBolusTotalDose"],
    "1045": ["IS", "SyringeCounts"],
    "1046": ["DS", "ContrastFlowRate"],
    "1047": ["DS", "ContrastFlowDuration"],
    "1048": ["CS", "ContrastBolusIngredient"],
    "1049": ["DS", "ContrastBolusIngredientConcentration"],
    "1050": ["DS", "SpatialResolution"],
    "1060": ["DS", "TriggerTime"],
    "1061": ["LO", "TriggerSourceOrType"],
    "1062": ["IS", "NominalInterval"],
    "1063": ["DS", "FrameTime"],
    "1064": ["LO", "CardiacFramingType"],
    "1065": ["DS", "FrameTimeVector"],
    "1066": ["DS", "FrameDelay"],
    "1067": ["DS", "ImageTriggerDelay"],
    "1068": ["DS", "MultiplexGroupTimeOffset"],
    "1069": ["DS", "TriggerTimeOffset"],
    "106A": ["CS", "SynchronizationTrigger"],
    "106C": ["US", "SynchronizationChannel"],
    "106E": ["UL", "TriggerSamplePosition"],
    "1070": ["LO", "RadiopharmaceuticalRoute"],
    "1071": ["DS", "RadiopharmaceuticalVolume"],
    "1072": ["TM", "RadiopharmaceuticalStartTime"],
    "1073": ["TM", "RadiopharmaceuticalStopTime"],
    "1074": ["DS", "RadionuclideTotalDose"],
    "1075": ["DS", "RadionuclideHalfLife"],
    "1076": ["DS", "RadionuclidePositronFraction"],
    "1077": ["DS", "RadiopharmaceuticalSpecificActivity"],
    "1078": ["DT", "RadiopharmaceuticalStartDateTime"],
    "1079": ["DT", "RadiopharmaceuticalStopDateTime"],
    "1080": ["CS", "BeatRejectionFlag"],
    "1081": ["IS", "LowRRValue"],
    "1082": ["IS", "HighRRValue"],
    "1083": ["IS", "IntervalsAcquired"],
    "1084": ["IS", "IntervalsRejected"],
    "1085": ["LO", "PVCRejection"],
    "1086": ["IS", "SkipBeats"],
    "1088": ["IS", "HeartRate"],
    "1090": ["IS", "CardiacNumberOfImages"],
    "1094": ["IS", "TriggerWindow"],
    "1100": ["DS", "ReconstructionDiameter"],
    "1110": ["DS", "DistanceSourceToDetector"],
    "1111": ["DS", "DistanceSourceToPatient"],
    "1114": ["DS", "EstimatedRadiographicMagnificationFactor"],
    "1120": ["DS", "GantryDetectorTilt"],
    "1121": ["DS", "GantryDetectorSlew"],
    "1130": ["DS", "TableHeight"],
    "1131": ["DS", "TableTraverse"],
    "1134": ["CS", "TableMotion"],
    "1135": ["DS", "TableVerticalIncrement"],
    "1136": ["DS", "TableLateralIncrement"],
    "1137": ["DS", "TableLongitudinalIncrement"],
    "1138": ["DS", "TableAngle"],
    "113A": ["CS", "TableType"],
    "1140": ["CS", "RotationDirection"],
    "1141": ["DS", "AngularPosition"],
    "1142": ["DS", "RadialPosition"],
    "1143": ["DS", "ScanArc"],
    "1144": ["DS", "AngularStep"],
    "1145": ["DS", "CenterOfRotationOffset"],
    "1146": ["DS", "RotationOffset"],
    "1147": ["CS", "FieldOfViewShape"],
    "1149": ["IS", "FieldOfViewDimensions"],
    "1150": ["IS", "ExposureTime"],
    "1151": ["IS", "XRayTubeCurrent"],
    "1152": ["IS", "Exposure"],
    "1153": ["IS", "ExposureInuAs"],
    "1154": ["DS", "AveragePulseWidth"],
    "1155": ["CS", "RadiationSetting"],
    "1156": ["CS", "RectificationType"],
    "115A": ["CS", "RadiationMode"],
    "115E": ["DS", "ImageAndFluoroscopyAreaDoseProduct"],
    "1160": ["SH", "FilterType"],
    "1161": ["LO", "TypeOfFilters"],
    "1162": ["DS", "IntensifierSize"],
    "1164": ["DS", "ImagerPixelSpacing"],
    "1166": ["CS", "Grid"],
    "1170": ["IS", "GeneratorPower"],
    "1180": ["SH", "CollimatorGridName"],
    "1181": ["CS", "CollimatorType"],
    "1182": ["IS", "FocalDistance"],
    "1183": ["DS", "XFocusCenter"],
    "1184": ["DS", "YFocusCenter"],
    "1190": ["DS", "FocalSpots"],
    "1191": ["CS", "AnodeTargetMaterial"],
    "11A0": ["DS", "BodyPartThickness"],
    "11A2": ["DS", "CompressionForce"],
    "1200": ["DA", "DateOfLastCalibration"],
    "1201": ["TM", "TimeOfLastCalibration"],
    "1210": ["SH", "ConvolutionKernel"],
    "1240": ["IS", "UpperLowerPixelValues"],
    "1242": ["IS", "ActualFrameDuration"],
    "1243": ["IS", "CountRate"],
    "1244": ["US", "PreferredPlaybackSequencing"],
    "1250": ["SH", "ReceiveCoilName"],
    "1251": ["SH", "TransmitCoilName"],
    "1260": ["SH", "PlateType"],
    "1261": ["LO", "PhosphorType"],
    "1300": ["DS", "ScanVelocity"],
    "1301": ["CS", "WholeBodyTechnique"],
    "1302": ["IS", "ScanLength"],
    "1310": ["US", "AcquisitionMatrix"],
    "1312": ["CS", "InPlanePhaseEncodingDirection"],
    "1314": ["DS", "FlipAngle"],
    "1315": ["CS", "VariableFlipAngleFlag"],
    "1316": ["DS", "SAR"],
    "1318": ["DS", "dBdt"],
    "1400": ["LO", "AcquisitionDeviceProcessingDescription"],
    "1401": ["LO", "AcquisitionDeviceProcessingCode"],
    "1402": ["CS", "CassetteOrientation"],
    "1403": ["CS", "CassetteSize"],
    "1404": ["US", "ExposuresOnPlate"],
    "1405": ["IS", "RelativeXRayExposure"],
    "1411": ["DS", "ExposureIndex"],
    "1412": ["DS", "TargetExposureIndex"],
    "1413": ["DS", "DeviationIndex"],
    "1450": ["DS", "ColumnAngulation"],
    "1460": ["DS", "TomoLayerHeight"],
    "1470": ["DS", "TomoAngle"],
    "1480": ["DS", "TomoTime"],
    "1490": ["CS", "TomoType"],
    "1491": ["CS", "TomoClass"],
    "1495": ["IS", "NumberOfTomosynthesisSourceImages"],
    "1500": ["CS", "PositionerMotion"],
    "1508": ["CS", "PositionerType"],
    "1510": ["DS", "PositionerPrimaryAngle"],
    "1511": ["DS", "PositionerSecondaryAngle"],
    "1520": ["DS", "PositionerPrimaryAngleIncrement"],
    "1521": ["DS", "PositionerSecondaryAngleIncrement"],
    "1530": ["DS", "DetectorPrimaryAngle"],
    "1531": ["DS", "DetectorSecondaryAngle"],
    "1600": ["CS", "ShutterShape"],
    "1602": ["IS", "ShutterLeftVerticalEdge"],
    "1604": ["IS", "ShutterRightVerticalEdge"],
    "1606": ["IS", "ShutterUpperHorizontalEdge"],
    "1608": ["IS", "ShutterLowerHorizontalEdge"],
    "1610": ["IS", "CenterOfCircularShutter"],
    "1612": ["IS", "RadiusOfCircularShutter"],
    "1620": ["IS", "VerticesOfThePolygonalShutter"],
    "1622": ["US", "ShutterPresentationValue"],
    "1623": ["US", "ShutterOverlayGroup"],
    "1624": ["US", "ShutterPresentationColorCIELabValue"],
    "1700": ["CS", "CollimatorShape"],
    "1702": ["IS", "CollimatorLeftVerticalEdge"],
    "1704": ["IS", "CollimatorRightVerticalEdge"],
    "1706": ["IS", "CollimatorUpperHorizontalEdge"],
    "1708": ["IS", "CollimatorLowerHorizontalEdge"],
    "1710": ["IS", "CenterOfCircularCollimator"],
    "1712": ["IS", "RadiusOfCircularCollimator"],
    "1720": ["IS", "VerticesOfThePolygonalCollimator"],
    "1800": ["CS", "AcquisitionTimeSynchronized"],
    "1801": ["SH", "TimeSource"],
    "1802": ["CS", "TimeDistributionProtocol"],
    "1803": ["LO", "NTPSourceAddress"],
    "2001": ["IS", "PageNumberVector"],
    "2002": ["SH", "FrameLabelVector"],
    "2003": ["DS", "FramePrimaryAngleVector"],
    "2004": ["DS", "FrameSecondaryAngleVector"],
    "2005": ["DS", "SliceLocationVector"],
    "2006": ["SH", "DisplayWindowLabelVector"],
    "2010": ["DS", "NominalScannedPixelSpacing"],
    "2020": ["CS", "DigitizingDeviceTransportDirection"],
    "2030": ["DS", "RotationOfScannedFilm"],
    "3100": ["CS", "IVUSAcquisition"],
    "3101": ["DS", "IVUSPullbackRate"],
    "3102": ["DS", "IVUSGatedRate"],
    "3103": ["IS", "IVUSPullbackStartFrameNumber"],
    "3104": ["IS", "IVUSPullbackStopFrameNumber"],
    "3105": ["IS", "LesionNumber"],
    "4000": ["LT", "AcquisitionComments"],
    "5000": ["SH", "OutputPower"],
    "5010": ["LO", "TransducerData"],
    "5012": ["DS", "FocusDepth"],
    "5020": ["LO", "ProcessingFunction"],
    "5021": ["LO", "PostprocessingFunction"],
    "5022": ["DS", "MechanicalIndex"],
    "5024": ["DS", "BoneThermalIndex"],
    "5026": ["DS", "CranialThermalIndex"],
    "5027": ["DS", "SoftTissueThermalIndex"],
    "5028": ["DS", "SoftTissueFocusThermalIndex"],
    "5029": ["DS", "SoftTissueSurfaceThermalIndex"],
    "5030": ["DS", "DynamicRange"],
    "5040": ["DS", "TotalGain"],
    "5050": ["IS", "DepthOfScanField"],
    "5100": ["CS", "PatientPosition"],
    "5101": ["CS", "ViewPosition"],
    "5104": ["SQ", "ProjectionEponymousNameCodeSequence"],
    "5210": ["DS", "ImageTransformationMatrix"],
    "5212": ["DS", "ImageTranslationVector"],
    "6000": ["DS", "Sensitivity"],
    "6011": ["SQ", "SequenceOfUltrasoundRegions"],
    "6012": ["US", "RegionSpatialFormat"],
    "6014": ["US", "RegionDataType"],
    "6016": ["UL", "RegionFlags"],
    "6018": ["UL", "RegionLocationMinX0"],
    "601A": ["UL", "RegionLocationMinY0"],
    "601C": ["UL", "RegionLocationMaxX1"],
    "601E": ["UL", "RegionLocationMaxY1"],
    "6020": ["SL", "ReferencePixelX0"],
    "6022": ["SL", "ReferencePixelY0"],
    "6024": ["US", "PhysicalUnitsXDirection"],
    "6026": ["US", "PhysicalUnitsYDirection"],
    "6028": ["FD", "ReferencePixelPhysicalValueX"],
    "602A": ["FD", "ReferencePixelPhysicalValueY"],
    "602C": ["FD", "PhysicalDeltaX"],
    "602E": ["FD", "PhysicalDeltaY"],
    "6030": ["UL", "TransducerFrequency"],
    "6031": ["CS", "TransducerType"],
    "6032": ["UL", "PulseRepetitionFrequency"],
    "6034": ["FD", "DopplerCorrectionAngle"],
    "6036": ["FD", "SteeringAngle"],
    "6038": ["UL", "DopplerSampleVolumeXPositionRetired"],
    "6039": ["SL", "DopplerSampleVolumeXPosition"],
    "603A": ["UL", "DopplerSampleVolumeYPositionRetired"],
    "603B": ["SL", "DopplerSampleVolumeYPosition"],
    "603C": ["UL", "TMLinePositionX0Retired"],
    "603D": ["SL", "TMLinePositionX0"],
    "603E": ["UL", "TMLinePositionY0Retired"],
    "603F": ["SL", "TMLinePositionY0"],
    "6040": ["UL", "TMLinePositionX1Retired"],
    "6041": ["SL", "TMLinePositionX1"],
    "6042": ["UL", "TMLinePositionY1Retired"],
    "6043": ["SL", "TMLinePositionY1"],
    "6044": ["US", "PixelComponentOrganization"],
    "6046": ["UL", "PixelComponentMask"],
    "6048": ["UL", "PixelComponentRangeStart"],
    "604A": ["UL", "PixelComponentRangeStop"],
    "604C": ["US", "PixelComponentPhysicalUnits"],
    "604E": ["US", "PixelComponentDataType"],
    "6050": ["UL", "NumberOfTableBreakPoints"],
    "6052": ["UL", "TableOfXBreakPoints"],
    "6054": ["FD", "TableOfYBreakPoints"],
    "6056": ["UL", "NumberOfTableEntries"],
    "6058": ["UL", "TableOfPixelValues"],
    "605A": ["FL", "TableOfParameterValues"],
    "6060": ["FL", "RWaveTimeVector"],
    "7000": ["CS", "DetectorConditionsNominalFlag"],
    "7001": ["DS", "DetectorTemperature"],
    "7004": ["CS", "DetectorType"],
    "7005": ["CS", "DetectorConfiguration"],
    "7006": ["LT", "DetectorDescription"],
    "7008": ["LT", "DetectorMode"],
    "700A": ["SH", "DetectorID"],
    "700C": ["DA", "DateOfLastDetectorCalibration"],
    "700E": ["TM", "TimeOfLastDetectorCalibration"],
    "7010": ["IS", "ExposuresOnDetectorSinceLastCalibration"],
    "7011": ["IS", "ExposuresOnDetectorSinceManufactured"],
    "7012": ["DS", "DetectorTimeSinceLastExposure"],
    "7014": ["DS", "DetectorActiveTime"],
    "7016": ["DS", "DetectorActivationOffsetFromExposure"],
    "701A": ["DS", "DetectorBinning"],
    "7020": ["DS", "DetectorElementPhysicalSize"],
    "7022": ["DS", "DetectorElementSpacing"],
    "7024": ["CS", "DetectorActiveShape"],
    "7026": ["DS", "DetectorActiveDimensions"],
    "7028": ["DS", "DetectorActiveOrigin"],
    "702A": ["LO", "DetectorManufacturerName"],
    "702B": ["LO", "DetectorManufacturerModelName"],
    "7030": ["DS", "FieldOfViewOrigin"],
    "7032": ["DS", "FieldOfViewRotation"],
    "7034": ["CS", "FieldOfViewHorizontalFlip"],
    "7036": ["FL", "PixelDataAreaOriginRelativeToFOV"],
    "7038": ["FL", "PixelDataAreaRotationAngleRelativeToFOV"],
    "7040": ["LT", "GridAbsorbingMaterial"],
    "7041": ["LT", "GridSpacingMaterial"],
    "7042": ["DS", "GridThickness"],
    "7044": ["DS", "GridPitch"],
    "7046": ["IS", "GridAspectRatio"],
    "7048": ["DS", "GridPeriod"],
    "704C": ["DS", "GridFocalDistance"],
    "7050": ["CS", "FilterMaterial"],
    "7052": ["DS", "FilterThicknessMinimum"],
    "7054": ["DS", "FilterThicknessMaximum"],
    "7056": ["FL", "FilterBeamPathLengthMinimum"],
    "7058": ["FL", "FilterBeamPathLengthMaximum"],
    "7060": ["CS", "ExposureControlMode"],
    "7062": ["LT", "ExposureControlModeDescription"],
    "7064": ["CS", "ExposureStatus"],
    "7065": ["DS", "PhototimerSetting"],
    "8150": ["DS", "ExposureTimeInuS"],
    "8151": ["DS", "XRayTubeCurrentInuA"],
    "9004": ["CS", "ContentQualification"],
    "9005": ["SH", "PulseSequenceName"],
    "9006": ["SQ", "MRImagingModifierSequence"],
    "9008": ["CS", "EchoPulseSequence"],
    "9009": ["CS", "InversionRecovery"],
    "9010": ["CS", "FlowCompensation"],
    "9011": ["CS", "MultipleSpinEcho"],
    "9012": ["CS", "MultiPlanarExcitation"],
    "9014": ["CS", "PhaseContrast"],
    "9015": ["CS", "TimeOfFlightContrast"],
    "9016": ["CS", "Spoiling"],
    "9017": ["CS", "SteadyStatePulseSequence"],
    "9018": ["CS", "EchoPlanarPulseSequence"],
    "9019": ["FD", "TagAngleFirstAxis"],
    "9020": ["CS", "MagnetizationTransfer"],
    "9021": ["CS", "T2Preparation"],
    "9022": ["CS", "BloodSignalNulling"],
    "9024": ["CS", "SaturationRecovery"],
    "9025": ["CS", "SpectrallySelectedSuppression"],
    "9026": ["CS", "SpectrallySelectedExcitation"],
    "9027": ["CS", "SpatialPresaturation"],
    "9028": ["CS", "Tagging"],
    "9029": ["CS", "OversamplingPhase"],
    "9030": ["FD", "TagSpacingFirstDimension"],
    "9032": ["CS", "GeometryOfKSpaceTraversal"],
    "9033": ["CS", "SegmentedKSpaceTraversal"],
    "9034": ["CS", "RectilinearPhaseEncodeReordering"],
    "9035": ["FD", "TagThickness"],
    "9036": ["CS", "PartialFourierDirection"],
    "9037": ["CS", "CardiacSynchronizationTechnique"],
    "9041": ["LO", "ReceiveCoilManufacturerName"],
    "9042": ["SQ", "MRReceiveCoilSequence"],
    "9043": ["CS", "ReceiveCoilType"],
    "9044": ["CS", "QuadratureReceiveCoil"],
    "9045": ["SQ", "MultiCoilDefinitionSequence"],
    "9046": ["LO", "MultiCoilConfiguration"],
    "9047": ["SH", "MultiCoilElementName"],
    "9048": ["CS", "MultiCoilElementUsed"],
    "9049": ["SQ", "MRTransmitCoilSequence"],
    "9050": ["LO", "TransmitCoilManufacturerName"],
    "9051": ["CS", "TransmitCoilType"],
    "9052": ["FD", "SpectralWidth"],
    "9053": ["FD", "ChemicalShiftReference"],
    "9054": ["CS", "VolumeLocalizationTechnique"],
    "9058": ["US", "MRAcquisitionFrequencyEncodingSteps"],
    "9059": ["CS", "Decoupling"],
    "9060": ["CS", "DecoupledNucleus"],
    "9061": ["FD", "DecouplingFrequency"],
    "9062": ["CS", "DecouplingMethod"],
    "9063": ["FD", "DecouplingChemicalShiftReference"],
    "9064": ["CS", "KSpaceFiltering"],
    "9065": ["CS", "TimeDomainFiltering"],
    "9066": ["US", "NumberOfZeroFills"],
    "9067": ["CS", "BaselineCorrection"],
    "9069": ["FD", "ParallelReductionFactorInPlane"],
    "9070": ["FD", "CardiacRRIntervalSpecified"],
    "9073": ["FD", "AcquisitionDuration"],
    "9074": ["DT", "FrameAcquisitionDateTime"],
    "9075": ["CS", "DiffusionDirectionality"],
    "9076": ["SQ", "DiffusionGradientDirectionSequence"],
    "9077": ["CS", "ParallelAcquisition"],
    "9078": ["CS", "ParallelAcquisitionTechnique"],
    "9079": ["FD", "InversionTimes"],
    "9080": ["ST", "MetaboliteMapDescription"],
    "9081": ["CS", "PartialFourier"],
    "9082": ["FD", "EffectiveEchoTime"],
    "9083": ["SQ", "MetaboliteMapCodeSequence"],
    "9084": ["SQ", "ChemicalShiftSequence"],
    "9085": ["CS", "CardiacSignalSource"],
    "9087": ["FD", "DiffusionBValue"],
    "9089": ["FD", "DiffusionGradientOrientation"],
    "9090": ["FD", "VelocityEncodingDirection"],
    "9091": ["FD", "VelocityEncodingMinimumValue"],
    "9092": ["SQ", "VelocityEncodingAcquisitionSequence"],
    "9093": ["US", "NumberOfKSpaceTrajectories"],
    "9094": ["CS", "CoverageOfKSpace"],
    "9095": ["UL", "SpectroscopyAcquisitionPhaseRows"],
    "9096": ["FD", "ParallelReductionFactorInPlaneRetired"],
    "9098": ["FD", "TransmitterFrequency"],
    "9100": ["CS", "ResonantNucleus"],
    "9101": ["CS", "FrequencyCorrection"],
    "9103": ["SQ", "MRSpectroscopyFOVGeometrySequence"],
    "9104": ["FD", "SlabThickness"],
    "9105": ["FD", "SlabOrientation"],
    "9106": ["FD", "MidSlabPosition"],
    "9107": ["SQ", "MRSpatialSaturationSequence"],
    "9112": ["SQ", "MRTimingAndRelatedParametersSequence"],
    "9114": ["SQ", "MREchoSequence"],
    "9115": ["SQ", "MRModifierSequence"],
    "9117": ["SQ", "MRDiffusionSequence"],
    "9118": ["SQ", "CardiacSynchronizationSequence"],
    "9119": ["SQ", "MRAveragesSequence"],
    "9125": ["SQ", "MRFOVGeometrySequence"],
    "9126": ["SQ", "VolumeLocalizationSequence"],
    "9127": ["UL", "SpectroscopyAcquisitionDataColumns"],
    "9147": ["CS", "DiffusionAnisotropyType"],
    "9151": ["DT", "FrameReferenceDateTime"],
    "9152": ["SQ", "MRMetaboliteMapSequence"],
    "9155": ["FD", "ParallelReductionFactorOutOfPlane"],
    "9159": ["UL", "SpectroscopyAcquisitionOutOfPlanePhaseSteps"],
    "9166": ["CS", "BulkMotionStatus"],
    "9168": ["FD", "ParallelReductionFactorSecondInPlane"],
    "9169": ["CS", "CardiacBeatRejectionTechnique"],
    "9170": ["CS", "RespiratoryMotionCompensationTechnique"],
    "9171": ["CS", "RespiratorySignalSource"],
    "9172": ["CS", "BulkMotionCompensationTechnique"],
    "9173": ["CS", "BulkMotionSignalSource"],
    "9174": ["CS", "ApplicableSafetyStandardAgency"],
    "9175": ["LO", "ApplicableSafetyStandardDescription"],
    "9176": ["SQ", "OperatingModeSequence"],
    "9177": ["CS", "OperatingModeType"],
    "9178": ["CS", "OperatingMode"],
    "9179": ["CS", "SpecificAbsorptionRateDefinition"],
    "9180": ["CS", "GradientOutputType"],
    "9181": ["FD", "SpecificAbsorptionRateValue"],
    "9182": ["FD", "GradientOutput"],
    "9183": ["CS", "FlowCompensationDirection"],
    "9184": ["FD", "TaggingDelay"],
    "9185": ["ST", "RespiratoryMotionCompensationTechniqueDescription"],
    "9186": ["SH", "RespiratorySignalSourceID"],
    "9195": ["FD", "ChemicalShiftMinimumIntegrationLimitInHz"],
    "9196": ["FD", "ChemicalShiftMaximumIntegrationLimitInHz"],
    "9197": ["SQ", "MRVelocityEncodingSequence"],
    "9198": ["CS", "FirstOrderPhaseCorrection"],
    "9199": ["CS", "WaterReferencedPhaseCorrection"],
    "9200": ["CS", "MRSpectroscopyAcquisitionType"],
    "9214": ["CS", "RespiratoryCyclePosition"],
    "9217": ["FD", "VelocityEncodingMaximumValue"],
    "9218": ["FD", "TagSpacingSecondDimension"],
    "9219": ["SS", "TagAngleSecondAxis"],
    "9220": ["FD", "FrameAcquisitionDuration"],
    "9226": ["SQ", "MRImageFrameTypeSequence"],
    "9227": ["SQ", "MRSpectroscopyFrameTypeSequence"],
    "9231": ["US", "MRAcquisitionPhaseEncodingStepsInPlane"],
    "9232": ["US", "MRAcquisitionPhaseEncodingStepsOutOfPlane"],
    "9234": ["UL", "SpectroscopyAcquisitionPhaseColumns"],
    "9236": ["CS", "CardiacCyclePosition"],
    "9239": ["SQ", "SpecificAbsorptionRateSequence"],
    "9240": ["US", "RFEchoTrainLength"],
    "9241": ["US", "GradientEchoTrainLength"],
    "9250": ["CS", "ArterialSpinLabelingContrast"],
    "9251": ["SQ", "MRArterialSpinLabelingSequence"],
    "9252": ["LO", "ASLTechniqueDescription"],
    "9253": ["US", "ASLSlabNumber"],
    "9254": ["FD ", "ASLSlabThickness"],
    "9255": ["FD ", "ASLSlabOrientation"],
    "9256": ["FD ", "ASLMidSlabPosition"],
    "9257": ["CS", "ASLContext"],
    "9258": ["UL", "ASLPulseTrainDuration"],
    "9259": ["CS", "ASLCrusherFlag"],
    "925A": ["FD", "ASLCrusherFlow"],
    "925B": ["LO", "ASLCrusherDescription"],
    "925C": ["CS", "ASLBolusCutoffFlag"],
    "925D": ["SQ", "ASLBolusCutoffTimingSequence"],
    "925E": ["LO", "ASLBolusCutoffTechnique"],
    "925F": ["UL", "ASLBolusCutoffDelayTime"],
    "9260": ["SQ", "ASLSlabSequence"],
    "9295": ["FD", "ChemicalShiftMinimumIntegrationLimitInppm"],
    "9296": ["FD", "ChemicalShiftMaximumIntegrationLimitInppm"],
    "9301": ["SQ", "CTAcquisitionTypeSequence"],
    "9302": ["CS", "AcquisitionType"],
    "9303": ["FD", "TubeAngle"],
    "9304": ["SQ", "CTAcquisitionDetailsSequence"],
    "9305": ["FD", "RevolutionTime"],
    "9306": ["FD", "SingleCollimationWidth"],
    "9307": ["FD", "TotalCollimationWidth"],
    "9308": ["SQ", "CTTableDynamicsSequence"],
    "9309": ["FD", "TableSpeed"],
    "9310": ["FD", "TableFeedPerRotation"],
    "9311": ["FD", "SpiralPitchFactor"],
    "9312": ["SQ", "CTGeometrySequence"],
    "9313": ["FD", "DataCollectionCenterPatient"],
    "9314": ["SQ", "CTReconstructionSequence"],
    "9315": ["CS", "ReconstructionAlgorithm"],
    "9316": ["CS", "ConvolutionKernelGroup"],
    "9317": ["FD", "ReconstructionFieldOfView"],
    "9318": ["FD", "ReconstructionTargetCenterPatient"],
    "9319": ["FD", "ReconstructionAngle"],
    "9320": ["SH", "ImageFilter"],
    "9321": ["SQ", "CTExposureSequence"],
    "9322": ["FD", "ReconstructionPixelSpacing"],
    "9323": ["CS", "ExposureModulationType"],
    "9324": ["FD", "EstimatedDoseSaving"],
    "9325": ["SQ", "CTXRayDetailsSequence"],
    "9326": ["SQ", "CTPositionSequence"],
    "9327": ["FD", "TablePosition"],
    "9328": ["FD", "ExposureTimeInms"],
    "9329": ["SQ", "CTImageFrameTypeSequence"],
    "9330": ["FD", "XRayTubeCurrentInmA"],
    "9332": ["FD", "ExposureInmAs"],
    "9333": ["CS", "ConstantVolumeFlag"],
    "9334": ["CS", "FluoroscopyFlag"],
    "9335": ["FD", "DistanceSourceToDataCollectionCenter"],
    "9337": ["US", "ContrastBolusAgentNumber"],
    "9338": ["SQ", "ContrastBolusIngredientCodeSequence"],
    "9340": ["SQ", "ContrastAdministrationProfileSequence"],
    "9341": ["SQ", "ContrastBolusUsageSequence"],
    "9342": ["CS", "ContrastBolusAgentAdministered"],
    "9343": ["CS", "ContrastBolusAgentDetected"],
    "9344": ["CS", "ContrastBolusAgentPhase"],
    "9345": ["FD", "CTDIvol"],
    "9346": ["SQ", "CTDIPhantomTypeCodeSequence"],
    "9351": ["FL", "CalciumScoringMassFactorPatient"],
    "9352": ["FL", "CalciumScoringMassFactorDevice"],
    "9353": ["FL", "EnergyWeightingFactor"],
    "9360": ["SQ", "CTAdditionalXRaySourceSequence"],
    "9401": ["SQ", "ProjectionPixelCalibrationSequence"],
    "9402": ["FL", "DistanceSourceToIsocenter"],
    "9403": ["FL", "DistanceObjectToTableTop"],
    "9404": ["FL", "ObjectPixelSpacingInCenterOfBeam"],
    "9405": ["SQ", "PositionerPositionSequence"],
    "9406": ["SQ", "TablePositionSequence"],
    "9407": ["SQ", "CollimatorShapeSequence"],
    "9410": ["CS", "PlanesInAcquisition"],
    "9412": ["SQ", "XAXRFFrameCharacteristicsSequence"],
    "9417": ["SQ", "FrameAcquisitionSequence"],
    "9420": ["CS", "XRayReceptorType"],
    "9423": ["LO", "AcquisitionProtocolName"],
    "9424": ["LT", "AcquisitionProtocolDescription"],
    "9425": ["CS", "ContrastBolusIngredientOpaque"],
    "9426": ["FL", "DistanceReceptorPlaneToDetectorHousing"],
    "9427": ["CS", "IntensifierActiveShape"],
    "9428": ["FL", "IntensifierActiveDimensions"],
    "9429": ["FL", "PhysicalDetectorSize"],
    "9430": ["FL", "PositionOfIsocenterProjection"],
    "9432": ["SQ", "FieldOfViewSequence"],
    "9433": ["LO", "FieldOfViewDescription"],
    "9434": ["SQ", "ExposureControlSensingRegionsSequence"],
    "9435": ["CS", "ExposureControlSensingRegionShape"],
    "9436": ["SS", "ExposureControlSensingRegionLeftVerticalEdge"],
    "9437": ["SS", "ExposureControlSensingRegionRightVerticalEdge"],
    "9438": ["SS", "ExposureControlSensingRegionUpperHorizontalEdge"],
    "9439": ["SS", "ExposureControlSensingRegionLowerHorizontalEdge"],
    "9440": ["SS", "CenterOfCircularExposureControlSensingRegion"],
    "9441": ["US", "RadiusOfCircularExposureControlSensingRegion"],
    "9442": ["SS", "VerticesOfThePolygonalExposureControlSensingRegion"],
    "9447": ["FL", "ColumnAngulationPatient"],
    "9449": ["FL", "BeamAngle"],
    "9451": ["SQ", "FrameDetectorParametersSequence"],
    "9452": ["FL", "CalculatedAnatomyThickness"],
    "9455": ["SQ", "CalibrationSequence"],
    "9456": ["SQ", "ObjectThicknessSequence"],
    "9457": ["CS", "PlaneIdentification"],
    "9461": ["FL", "FieldOfViewDimensionsInFloat"],
    "9462": ["SQ", "IsocenterReferenceSystemSequence"],
    "9463": ["FL", "PositionerIsocenterPrimaryAngle"],
    "9464": ["FL", "PositionerIsocenterSecondaryAngle"],
    "9465": ["FL", "PositionerIsocenterDetectorRotationAngle"],
    "9466": ["FL", "TableXPositionToIsocenter"],
    "9467": ["FL", "TableYPositionToIsocenter"],
    "9468": ["FL", "TableZPositionToIsocenter"],
    "9469": ["FL", "TableHorizontalRotationAngle"],
    "9470": ["FL", "TableHeadTiltAngle"],
    "9471": ["FL", "TableCradleTiltAngle"],
    "9472": ["SQ", "FrameDisplayShutterSequence"],
    "9473": ["FL", "AcquiredImageAreaDoseProduct"],
    "9474": ["CS", "CArmPositionerTabletopRelationship"],
    "9476": ["SQ", "XRayGeometrySequence"],
    "9477": ["SQ", "IrradiationEventIdentificationSequence"],
    "9504": ["SQ", "XRay3DFrameTypeSequence"],
    "9506": ["SQ", "ContributingSourcesSequence"],
    "9507": ["SQ", "XRay3DAcquisitionSequence"],
    "9508": ["FL", "PrimaryPositionerScanArc"],
    "9509": ["FL", "SecondaryPositionerScanArc"],
    "9510": ["FL", "PrimaryPositionerScanStartAngle"],
    "9511": ["FL", "SecondaryPositionerScanStartAngle"],
    "9514": ["FL", "PrimaryPositionerIncrement"],
    "9515": ["FL", "SecondaryPositionerIncrement"],
    "9516": ["DT", "StartAcquisitionDateTime"],
    "9517": ["DT", "EndAcquisitionDateTime"],
    "9524": ["LO", "ApplicationName"],
    "9525": ["LO", "ApplicationVersion"],
    "9526": ["LO", "ApplicationManufacturer"],
    "9527": ["CS", "AlgorithmType"],
    "9528": ["LO", "AlgorithmDescription"],
    "9530": ["SQ", "XRay3DReconstructionSequence"],
    "9531": ["LO", "ReconstructionDescription"],
    "9538": ["SQ", "PerProjectionAcquisitionSequence"],
    "9601": ["SQ", "DiffusionBMatrixSequence"],
    "9602": ["FD", "DiffusionBValueXX"],
    "9603": ["FD", "DiffusionBValueXY"],
    "9604": ["FD", "DiffusionBValueXZ"],
    "9605": ["FD", "DiffusionBValueYY"],
    "9606": ["FD", "DiffusionBValueYZ"],
    "9607": ["FD", "DiffusionBValueZZ"],
    "9701": ["DT", "DecayCorrectionDateTime"],
    "9715": ["FD", "StartDensityThreshold"],
    "9716": ["FD", "StartRelativeDensityDifferenceThreshold"],
    "9717": ["FD", "StartCardiacTriggerCountThreshold"],
    "9718": ["FD", "StartRespiratoryTriggerCountThreshold"],
    "9719": ["FD", "TerminationCountsThreshold"],
    "9720": ["FD", "TerminationDensityThreshold"],
    "9721": ["FD", "TerminationRelativeDensityThreshold"],
    "9722": ["FD", "TerminationTimeThreshold"],
    "9723": ["FD", "TerminationCardiacTriggerCountThreshold"],
    "9724": ["FD", "TerminationRespiratoryTriggerCountThreshold"],
    "9725": ["CS", "DetectorGeometry"],
    "9726": ["FD", "TransverseDetectorSeparation"],
    "9727": ["FD", "AxialDetectorDimension"],
    "9729": ["US", "RadiopharmaceuticalAgentNumber"],
    "9732": ["SQ", "PETFrameAcquisitionSequence"],
    "9733": ["SQ", "PETDetectorMotionDetailsSequence"],
    "9734": ["SQ", "PETTableDynamicsSequence"],
    "9735": ["SQ", "PETPositionSequence"],
    "9736": ["SQ", "PETFrameCorrectionFactorsSequence"],
    "9737": ["SQ", "RadiopharmaceuticalUsageSequence"],
    "9738": ["CS", "AttenuationCorrectionSource"],
    "9739": ["US", "NumberOfIterations"],
    "9740": ["US", "NumberOfSubsets"],
    "9749": ["SQ", "PETReconstructionSequence"],
    "9751": ["SQ", "PETFrameTypeSequence"],
    "9755": ["CS", "TimeOfFlightInformationUsed"],
    "9756": ["CS", "ReconstructionType"],
    "9758": ["CS", "DecayCorrected"],
    "9759": ["CS", "AttenuationCorrected"],
    "9760": ["CS", "ScatterCorrected"],
    "9761": ["CS", "DeadTimeCorrected"],
    "9762": ["CS", "GantryMotionCorrected"],
    "9763": ["CS", "PatientMotionCorrected"],
    "9764": ["CS", "CountLossNormalizationCorrected"],
    "9765": ["CS", "RandomsCorrected"],
    "9766": ["CS", "NonUniformRadialSamplingCorrected"],
    "9767": ["CS", "SensitivityCalibrated"],
    "9768": ["CS", "DetectorNormalizationCorrection"],
    "9769": ["CS", "IterativeReconstructionMethod"],
    "9770": ["CS", "AttenuationCorrectionTemporalRelationship"],
    "9771": ["SQ", "PatientPhysiologicalStateSequence"],
    "9772": ["SQ", "PatientPhysiologicalStateCodeSequence"],
    "9801": ["FD", "DepthsOfFocus"],
    "9803": ["SQ", "ExcludedIntervalsSequence"],
    "9804": ["DT", "ExclusionStartDatetime"],
    "9805": ["FD", "ExclusionDuration"],
    "9806": ["SQ", "USImageDescriptionSequence"],
    "9807": ["SQ", "ImageDataTypeSequence"],
    "9808": ["CS", "DataType"],
    "9809": ["SQ", "TransducerScanPatternCodeSequence"],
    "980B": ["CS", "AliasedDataType"],
    "980C": ["CS", "PositionMeasuringDeviceUsed"],
    "980D": ["SQ", "TransducerGeometryCodeSequence"],
    "980E": ["SQ", "TransducerBeamSteeringCodeSequence"],
    "980F": ["SQ", "TransducerApplicationCodeSequence"],
    A001: ["SQ", "ContributingEquipmentSequence"],
    A002: ["DT", "ContributionDateTime"],
    A003: ["ST", "ContributionDescription"]
  },
  "0020": {
    "000D": ["UI", "StudyInstanceUID"],
    "000E": ["UI", "SeriesInstanceUID"],
    "0010": ["SH", "StudyID"],
    "0011": ["IS", "SeriesNumber"],
    "0012": ["IS", "AcquisitionNumber"],
    "0013": ["IS", "InstanceNumber"],
    "0014": ["IS", "IsotopeNumber"],
    "0015": ["IS", "PhaseNumber"],
    "0016": ["IS", "IntervalNumber"],
    "0017": ["IS", "TimeSlotNumber"],
    "0018": ["IS", "AngleNumber"],
    "0019": ["IS", "ItemNumber"],
    "0020": ["CS", "PatientOrientation"],
    "0022": ["IS", "OverlayNumber"],
    "0024": ["IS", "CurveNumber"],
    "0026": ["IS", "LUTNumber"],
    "0030": ["DS", "ImagePosition"],
    "0032": ["DS", "ImagePositionPatient"],
    "0035": ["DS", "ImageOrientation"],
    "0037": ["DS", "ImageOrientationPatient"],
    "0050": ["DS", "Location"],
    "0052": ["UI", "FrameOfReferenceUID"],
    "0060": ["CS", "Laterality"],
    "0062": ["CS", "ImageLaterality"],
    "0070": ["LO", "ImageGeometryType"],
    "0080": ["CS", "MaskingImage"],
    "00AA": ["IS", "ReportNumber"],
    "0100": ["IS", "TemporalPositionIdentifier"],
    "0105": ["IS", "NumberOfTemporalPositions"],
    "0110": ["DS", "TemporalResolution"],
    "0200": ["UI", "SynchronizationFrameOfReferenceUID"],
    "0242": ["UI", "SOPInstanceUIDOfConcatenationSource"],
    "1000": ["IS", "SeriesInStudy"],
    "1001": ["IS", "AcquisitionsInSeries"],
    "1002": ["IS", "ImagesInAcquisition"],
    "1003": ["IS", "ImagesInSeries"],
    "1004": ["IS", "AcquisitionsInStudy"],
    "1005": ["IS", "ImagesInStudy"],
    "1020": ["LO", "Reference"],
    "1040": ["LO", "PositionReferenceIndicator"],
    "1041": ["DS", "SliceLocation"],
    "1070": ["IS", "OtherStudyNumbers"],
    "1200": ["IS", "NumberOfPatientRelatedStudies"],
    "1202": ["IS", "NumberOfPatientRelatedSeries"],
    "1204": ["IS", "NumberOfPatientRelatedInstances"],
    "1206": ["IS", "NumberOfStudyRelatedSeries"],
    "1208": ["IS", "NumberOfStudyRelatedInstances"],
    "1209": ["IS", "NumberOfSeriesRelatedInstances"],
    "3401": ["CS", "ModifyingDeviceID"],
    "3402": ["CS", "ModifiedImageID"],
    "3403": ["DA", "ModifiedImageDate"],
    "3404": ["LO", "ModifyingDeviceManufacturer"],
    "3405": ["TM", "ModifiedImageTime"],
    "3406": ["LO", "ModifiedImageDescription"],
    "4000": ["LT", "ImageComments"],
    "5000": ["AT", "OriginalImageIdentification"],
    "5002": ["LO", "OriginalImageIdentificationNomenclature"],
    "9056": ["SH", "StackID"],
    "9057": ["UL", "InStackPositionNumber"],
    "9071": ["SQ", "FrameAnatomySequence"],
    "9072": ["CS", "FrameLaterality"],
    "9111": ["SQ", "FrameContentSequence"],
    "9113": ["SQ", "PlanePositionSequence"],
    "9116": ["SQ", "PlaneOrientationSequence"],
    "9128": ["UL", "TemporalPositionIndex"],
    "9153": ["FD", "NominalCardiacTriggerDelayTime"],
    "9154": ["FL", "NominalCardiacTriggerTimePriorToRPeak"],
    "9155": ["FL", "ActualCardiacTriggerTimePriorToRPeak"],
    "9156": ["US", "FrameAcquisitionNumber"],
    "9157": ["UL", "DimensionIndexValues"],
    "9158": ["LT", "FrameComments"],
    "9161": ["UI", "ConcatenationUID"],
    "9162": ["US", "InConcatenationNumber"],
    "9163": ["US", "InConcatenationTotalNumber"],
    "9164": ["UI", "DimensionOrganizationUID"],
    "9165": ["AT", "DimensionIndexPointer"],
    "9167": ["AT", "FunctionalGroupPointer"],
    "9213": ["LO", "DimensionIndexPrivateCreator"],
    "9221": ["SQ", "DimensionOrganizationSequence"],
    "9222": ["SQ", "DimensionIndexSequence"],
    "9228": ["UL", "ConcatenationFrameOffsetNumber"],
    "9238": ["LO", "FunctionalGroupPrivateCreator"],
    "9241": ["FL", "NominalPercentageOfCardiacPhase"],
    "9245": ["FL", "NominalPercentageOfRespiratoryPhase"],
    "9246": ["FL", "StartingRespiratoryAmplitude"],
    "9247": ["CS", "StartingRespiratoryPhase"],
    "9248": ["FL", "EndingRespiratoryAmplitude"],
    "9249": ["CS", "EndingRespiratoryPhase"],
    "9250": ["CS", "RespiratoryTriggerType"],
    "9251": ["FD", "RRIntervalTimeNominal"],
    "9252": ["FD", "ActualCardiacTriggerDelayTime"],
    "9253": ["SQ", "RespiratorySynchronizationSequence"],
    "9254": ["FD", "RespiratoryIntervalTime"],
    "9255": ["FD", "NominalRespiratoryTriggerDelayTime"],
    "9256": ["FD", "RespiratoryTriggerDelayThreshold"],
    "9257": ["FD", "ActualRespiratoryTriggerDelayTime"],
    "9301": ["FD", "ImagePositionVolume"],
    "9302": ["FD", "ImageOrientationVolume"],
    "9307": ["CS", "UltrasoundAcquisitionGeometry"],
    "9308": ["FD", "ApexPosition"],
    "9309": ["FD", "VolumeToTransducerMappingMatrix"],
    "930A": ["FD", "VolumeToTableMappingMatrix"],
    "930C": ["CS", "PatientFrameOfReferenceSource"],
    "930D": ["FD", "TemporalPositionTimeOffset"],
    "930E": ["SQ", "PlanePositionVolumeSequence"],
    "930F": ["SQ", "PlaneOrientationVolumeSequence"],
    "9310": ["SQ", "TemporalPositionSequence"],
    "9311": ["CS", "DimensionOrganizationType"],
    "9312": ["UI", "VolumeFrameOfReferenceUID"],
    "9313": ["UI", "TableFrameOfReferenceUID"],
    "9421": ["LO", "DimensionDescriptionLabel"],
    "9450": ["SQ", "PatientOrientationInFrameSequence"],
    "9453": ["LO", "FrameLabel"],
    "9518": ["US", "AcquisitionIndex"],
    "9529": ["SQ", "ContributingSOPInstancesReferenceSequence"],
    "9536": ["US", "ReconstructionIndex"]
  },
  "0022": {
    "0001": ["US", "LightPathFilterPassThroughWavelength"],
    "0002": ["US", "LightPathFilterPassBand"],
    "0003": ["US", "ImagePathFilterPassThroughWavelength"],
    "0004": ["US", "ImagePathFilterPassBand"],
    "0005": ["CS", "PatientEyeMovementCommanded"],
    "0006": ["SQ", "PatientEyeMovementCommandCodeSequence"],
    "0007": ["FL", "SphericalLensPower"],
    "0008": ["FL", "CylinderLensPower"],
    "0009": ["FL", "CylinderAxis"],
    "000A": ["FL", "EmmetropicMagnification"],
    "000B": ["FL", "IntraOcularPressure"],
    "000C": ["FL", "HorizontalFieldOfView"],
    "000D": ["CS", "PupilDilated"],
    "000E": ["FL", "DegreeOfDilation"],
    "0010": ["FL", "StereoBaselineAngle"],
    "0011": ["FL", "StereoBaselineDisplacement"],
    "0012": ["FL", "StereoHorizontalPixelOffset"],
    "0013": ["FL", "StereoVerticalPixelOffset"],
    "0014": ["FL", "StereoRotation"],
    "0015": ["SQ", "AcquisitionDeviceTypeCodeSequence"],
    "0016": ["SQ", "IlluminationTypeCodeSequence"],
    "0017": ["SQ", "LightPathFilterTypeStackCodeSequence"],
    "0018": ["SQ", "ImagePathFilterTypeStackCodeSequence"],
    "0019": ["SQ", "LensesCodeSequence"],
    "001A": ["SQ", "ChannelDescriptionCodeSequence"],
    "001B": ["SQ", "RefractiveStateSequence"],
    "001C": ["SQ", "MydriaticAgentCodeSequence"],
    "001D": ["SQ", "RelativeImagePositionCodeSequence"],
    "001E": ["FL", "CameraAngleOfView"],
    "0020": ["SQ", "StereoPairsSequence"],
    "0021": ["SQ", "LeftImageSequence"],
    "0022": ["SQ", "RightImageSequence"],
    "0030": ["FL", "AxialLengthOfTheEye"],
    "0031": ["SQ", "OphthalmicFrameLocationSequence"],
    "0032": ["FL", "ReferenceCoordinates"],
    "0035": ["FL", "DepthSpatialResolution"],
    "0036": ["FL", "MaximumDepthDistortion"],
    "0037": ["FL", "AlongScanSpatialResolution"],
    "0038": ["FL", "MaximumAlongScanDistortion"],
    "0039": ["CS", "OphthalmicImageOrientation"],
    "0041": ["FL", "DepthOfTransverseImage"],
    "0042": ["SQ", "MydriaticAgentConcentrationUnitsSequence"],
    "0048": ["FL", "AcrossScanSpatialResolution"],
    "0049": ["FL", "MaximumAcrossScanDistortion"],
    "004E": ["DS", "MydriaticAgentConcentration"],
    "0055": ["FL", "IlluminationWaveLength"],
    "0056": ["FL", "IlluminationPower"],
    "0057": ["FL", "IlluminationBandwidth"],
    "0058": ["SQ", "MydriaticAgentSequence"],
    "1007": ["SQ", "OphthalmicAxialMeasurementsRightEyeSequence"],
    "1008": ["SQ", "OphthalmicAxialMeasurementsLeftEyeSequence"],
    "1010": ["CS", "OphthalmicAxialLengthMeasurementsType"],
    "1019": ["FL", "OphthalmicAxialLength"],
    "1024": ["SQ", "LensStatusCodeSequence"],
    "1025": ["SQ", "VitreousStatusCodeSequence"],
    "1028": ["SQ", "IOLFormulaCodeSequence"],
    "1029": ["LO", "IOLFormulaDetail"],
    "1033": ["FL", "KeratometerIndex"],
    "1035": ["SQ", "SourceOfOphthalmicAxialLengthCodeSequence"],
    "1037": ["FL", "TargetRefraction"],
    "1039": ["CS", "RefractiveProcedureOccurred"],
    "1040": ["SQ", "RefractiveSurgeryTypeCodeSequence"],
    "1044": ["SQ", "OphthalmicUltrasoundAxialMeasurementsTypeCodeSequence"],
    "1050": ["SQ", "OphthalmicAxialLengthMeasurementsSequence"],
    "1053": ["FL", "IOLPower"],
    "1054": ["FL", "PredictedRefractiveError"],
    "1059": ["FL", "OphthalmicAxialLengthVelocity"],
    "1065": ["LO", "LensStatusDescription"],
    "1066": ["LO", "VitreousStatusDescription"],
    "1090": ["SQ", "IOLPowerSequence"],
    "1092": ["SQ", "LensConstantSequence"],
    "1093": ["LO", "IOLManufacturer"],
    "1094": ["LO", "LensConstantDescription"],
    "1096": ["SQ", "KeratometryMeasurementTypeCodeSequence"],
    "1100": ["SQ", "ReferencedOphthalmicAxialMeasurementsSequence"],
    "1101": ["SQ", "OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence"],
    "1103": ["SQ", "RefractiveErrorBeforeRefractiveSurgeryCodeSequence"],
    "1121": ["FL", "IOLPowerForExactEmmetropia"],
    "1122": ["FL", "IOLPowerForExactTargetRefraction"],
    "1125": ["SQ", "AnteriorChamberDepthDefinitionCodeSequence"],
    "1130": ["FL", "LensThickness"],
    "1131": ["FL", "AnteriorChamberDepth"],
    "1132": ["SQ", "SourceOfLensThicknessDataCodeSequence"],
    "1133": ["SQ", "SourceOfAnteriorChamberDepthDataCodeSequence"],
    "1135": ["SQ", "SourceOfRefractiveErrorDataCodeSequence"],
    "1140": ["CS", "OphthalmicAxialLengthMeasurementModified"],
    "1150": ["SQ", "OphthalmicAxialLengthDataSourceCodeSequence"],
    "1153": ["SQ", "OphthalmicAxialLengthAcquisitionMethodCodeSequence"],
    "1155": ["FL", "SignalToNoiseRatio"],
    "1159": ["LO", "OphthalmicAxialLengthDataSourceDescription"],
    "1210": ["SQ", "OphthalmicAxialLengthMeasurementsTotalLengthSequence"],
    "1211": ["SQ", "OphthalmicAxialLengthMeasurementsSegmentalLengthSequence"],
    "1212": ["SQ", "OphthalmicAxialLengthMeasurementsLengthSummationSequence"],
    "1220": ["SQ", "UltrasoundOphthalmicAxialLengthMeasurementsSequence"],
    "1225": ["SQ", "OpticalOphthalmicAxialLengthMeasurementsSequence"],
    "1230": ["SQ", "UltrasoundSelectedOphthalmicAxialLengthSequence"],
    "1250": ["SQ", "OphthalmicAxialLengthSelectionMethodCodeSequence"],
    "1255": ["SQ", "OpticalSelectedOphthalmicAxialLengthSequence"],
    "1257": ["SQ", "SelectedSegmentalOphthalmicAxialLengthSequence"],
    "1260": ["SQ", "SelectedTotalOphthalmicAxialLengthSequence"],
    "1262": ["SQ", "OphthalmicAxialLengthQualityMetricSequence"],
    "1273": ["LO", "OphthalmicAxialLengthQualityMetricTypeDescription"],
    "1300": ["SQ", "IntraocularLensCalculationsRightEyeSequence"],
    "1310": ["SQ", "IntraocularLensCalculationsLeftEyeSequence"],
    "1330": ["SQ", "ReferencedOphthalmicAxialLengthMeasurementQCImageSequence"]
  },
  "0024": {
    "0010": ["FL", "VisualFieldHorizontalExtent"],
    "0011": ["FL", "VisualFieldVerticalExtent"],
    "0012": ["CS", "VisualFieldShape"],
    "0016": ["SQ", "ScreeningTestModeCodeSequence"],
    "0018": ["FL", "MaximumStimulusLuminance"],
    "0020": ["FL", "BackgroundLuminance"],
    "0021": ["SQ", "StimulusColorCodeSequence"],
    "0024": ["SQ", "BackgroundIlluminationColorCodeSequence"],
    "0025": ["FL", "StimulusArea"],
    "0028": ["FL", "StimulusPresentationTime"],
    "0032": ["SQ", "FixationSequence"],
    "0033": ["SQ", "FixationMonitoringCodeSequence"],
    "0034": ["SQ", "VisualFieldCatchTrialSequence"],
    "0035": ["US", "FixationCheckedQuantity"],
    "0036": ["US", "PatientNotProperlyFixatedQuantity"],
    "0037": ["CS", "PresentedVisualStimuliDataFlag"],
    "0038": ["US", "NumberOfVisualStimuli"],
    "0039": ["CS", "ExcessiveFixationLossesDataFlag"],
    "0040": ["CS", "ExcessiveFixationLosses"],
    "0042": ["US", "StimuliRetestingQuantity"],
    "0044": ["LT", "CommentsOnPatientPerformanceOfVisualField"],
    "0045": ["CS", "FalseNegativesEstimateFlag"],
    "0046": ["FL", "FalseNegativesEstimate"],
    "0048": ["US", "NegativeCatchTrialsQuantity"],
    "0050": ["US", "FalseNegativesQuantity"],
    "0051": ["CS", "ExcessiveFalseNegativesDataFlag"],
    "0052": ["CS", "ExcessiveFalseNegatives"],
    "0053": ["CS", "FalsePositivesEstimateFlag"],
    "0054": ["FL", "FalsePositivesEstimate"],
    "0055": ["CS", "CatchTrialsDataFlag"],
    "0056": ["US", "PositiveCatchTrialsQuantity"],
    "0057": ["CS", "TestPointNormalsDataFlag"],
    "0058": ["SQ", "TestPointNormalsSequence"],
    "0059": ["CS", "GlobalDeviationProbabilityNormalsFlag"],
    "0060": ["US", "FalsePositivesQuantity"],
    "0061": ["CS", "ExcessiveFalsePositivesDataFlag"],
    "0062": ["CS", "ExcessiveFalsePositives"],
    "0063": ["CS", "VisualFieldTestNormalsFlag"],
    "0064": ["SQ", "ResultsNormalsSequence"],
    "0065": ["SQ", "AgeCorrectedSensitivityDeviationAlgorithmSequence"],
    "0066": ["FL", "GlobalDeviationFromNormal"],
    "0067": ["SQ", "GeneralizedDefectSensitivityDeviationAlgorithmSequence"],
    "0068": ["FL", "LocalizedDeviationfromNormal"],
    "0069": ["LO", "PatientReliabilityIndicator"],
    "0070": ["FL", "VisualFieldMeanSensitivity"],
    "0071": ["FL", "GlobalDeviationProbability"],
    "0072": ["CS", "LocalDeviationProbabilityNormalsFlag"],
    "0073": ["FL", "LocalizedDeviationProbability"],
    "0074": ["CS", "ShortTermFluctuationCalculated"],
    "0075": ["FL", "ShortTermFluctuation"],
    "0076": ["CS", "ShortTermFluctuationProbabilityCalculated"],
    "0077": ["FL", "ShortTermFluctuationProbability"],
    "0078": ["CS", "CorrectedLocalizedDeviationFromNormalCalculated"],
    "0079": ["FL", "CorrectedLocalizedDeviationFromNormal"],
    "0080": ["CS", "CorrectedLocalizedDeviationFromNormalProbabilityCalculated"],
    "0081": ["FL", "CorrectedLocalizedDeviationFromNormalProbability"],
    "0083": ["SQ", "GlobalDeviationProbabilitySequence"],
    "0085": ["SQ", "LocalizedDeviationProbabilitySequence"],
    "0086": ["CS", "FovealSensitivityMeasured"],
    "0087": ["FL", "FovealSensitivity"],
    "0088": ["FL", "VisualFieldTestDuration"],
    "0089": ["SQ", "VisualFieldTestPointSequence"],
    "0090": ["FL", "VisualFieldTestPointXCoordinate"],
    "0091": ["FL", "VisualFieldTestPointYCoordinate"],
    "0092": ["FL", "AgeCorrectedSensitivityDeviationValue"],
    "0093": ["CS", "StimulusResults"],
    "0094": ["FL", "SensitivityValue"],
    "0095": ["CS", "RetestStimulusSeen"],
    "0096": ["FL", "RetestSensitivityValue"],
    "0097": ["SQ", "VisualFieldTestPointNormalsSequence"],
    "0098": ["FL", "QuantifiedDefect"],
    "0100": ["FL", "AgeCorrectedSensitivityDeviationProbabilityValue"],
    "0102": ["CS", "GeneralizedDefectCorrectedSensitivityDeviationFlag "],
    "0103": ["FL", "GeneralizedDefectCorrectedSensitivityDeviationValue "],
    "0104": ["FL", "GeneralizedDefectCorrectedSensitivityDeviationProbabilityValue"],
    "0105": ["FL ", "MinimumSensitivityValue"],
    "0106": ["CS", "BlindSpotLocalized"],
    "0107": ["FL", "BlindSpotXCoordinate"],
    "0108": ["FL", "BlindSpotYCoordinate "],
    "0110": ["SQ", "VisualAcuityMeasurementSequence"],
    "0112": ["SQ", "RefractiveParametersUsedOnPatientSequence"],
    "0113": ["CS", "MeasurementLaterality"],
    "0114": ["SQ", "OphthalmicPatientClinicalInformationLeftEyeSequence"],
    "0115": ["SQ", "OphthalmicPatientClinicalInformationRightEyeSequence"],
    "0117": ["CS", "FovealPointNormativeDataFlag"],
    "0118": ["FL", "FovealPointProbabilityValue"],
    "0120": ["CS", "ScreeningBaselineMeasured"],
    "0122": ["SQ", "ScreeningBaselineMeasuredSequence"],
    "0124": ["CS", "ScreeningBaselineType"],
    "0126": ["FL", "ScreeningBaselineValue"],
    "0202": ["LO", "AlgorithmSource"],
    "0306": ["LO", "DataSetName"],
    "0307": ["LO", "DataSetVersion"],
    "0308": ["LO", "DataSetSource"],
    "0309": ["LO", "DataSetDescription"],
    "0317": ["SQ", "VisualFieldTestReliabilityGlobalIndexSequence"],
    "0320": ["SQ", "VisualFieldGlobalResultsIndexSequence"],
    "0325": ["SQ", "DataObservationSequence"],
    "0338": ["CS", "IndexNormalsFlag"],
    "0341": ["FL", "IndexProbability"],
    "0344": ["SQ", "IndexProbabilitySequence"]
  },
  "0028": {
    "0002": ["US", "SamplesPerPixel"],
    "0003": ["US", "SamplesPerPixelUsed"],
    "0004": ["CS", "PhotometricInterpretation"],
    "0005": ["US", "ImageDimensions"],
    "0006": ["US", "PlanarConfiguration"],
    "0008": ["IS", "NumberOfFrames"],
    "0009": ["AT", "FrameIncrementPointer"],
    "000A": ["AT", "FrameDimensionPointer"],
    "0010": ["US", "Rows"],
    "0011": ["US", "Columns"],
    "0012": ["US", "Planes"],
    "0014": ["US", "UltrasoundColorDataPresent"],
    "0030": ["DS", "PixelSpacing"],
    "0031": ["DS", "ZoomFactor"],
    "0032": ["DS", "ZoomCenter"],
    "0034": ["IS", "PixelAspectRatio"],
    "0040": ["CS", "ImageFormat"],
    "0050": ["LO", "ManipulatedImage"],
    "0051": ["CS", "CorrectedImage"],
    "005F": ["LO", "CompressionRecognitionCode"],
    "0060": ["CS", "CompressionCode"],
    "0061": ["SH", "CompressionOriginator"],
    "0062": ["LO", "CompressionLabel"],
    "0063": ["SH", "CompressionDescription"],
    "0065": ["CS", "CompressionSequence"],
    "0066": ["AT", "CompressionStepPointers"],
    "0068": ["US", "RepeatInterval"],
    "0069": ["US", "BitsGrouped"],
    "0070": ["US", "PerimeterTable"],
    "0071": ["SS", "PerimeterValue"],
    "0080": ["US", "PredictorRows"],
    "0081": ["US", "PredictorColumns"],
    "0082": ["US", "PredictorConstants"],
    "0090": ["CS", "BlockedPixels"],
    "0091": ["US", "BlockRows"],
    "0092": ["US", "BlockColumns"],
    "0093": ["US", "RowOverlap"],
    "0094": ["US", "ColumnOverlap"],
    "0100": ["US", "BitsAllocated"],
    "0101": ["US", "BitsStored"],
    "0102": ["US", "HighBit"],
    "0103": ["US", "PixelRepresentation"],
    "0104": ["SS", "SmallestValidPixelValue"],
    "0105": ["SS", "LargestValidPixelValue"],
    "0106": ["SS", "SmallestImagePixelValue"],
    "0107": ["SS", "LargestImagePixelValue"],
    "0108": ["SS", "SmallestPixelValueInSeries"],
    "0109": ["SS", "LargestPixelValueInSeries"],
    "0110": ["SS", "SmallestImagePixelValueInPlane"],
    "0111": ["SS", "LargestImagePixelValueInPlane"],
    "0120": ["SS", "PixelPaddingValue"],
    "0121": ["SS", "PixelPaddingRangeLimit"],
    "0200": ["US", "ImageLocation"],
    "0300": ["CS", "QualityControlImage"],
    "0301": ["CS", "BurnedInAnnotation"],
    "0302": ["CS", "RecognizableVisualFeatures"],
    "0303": ["CS", "LongitudinalTemporalInformationModified"],
    "0400": ["LO", "TransformLabel"],
    "0401": ["LO", "TransformVersionNumber"],
    "0402": ["US", "NumberOfTransformSteps"],
    "0403": ["LO", "SequenceOfCompressedData"],
    "0404": ["AT", "DetailsOfCoefficients"],
    "0700": ["LO", "DCTLabel"],
    "0701": ["CS", "DataBlockDescription"],
    "0702": ["AT", "DataBlock"],
    "0710": ["US", "NormalizationFactorFormat"],
    "0720": ["US", "ZonalMapNumberFormat"],
    "0721": ["AT", "ZonalMapLocation"],
    "0722": ["US", "ZonalMapFormat"],
    "0730": ["US", "AdaptiveMapFormat"],
    "0740": ["US", "CodeNumberFormat"],
    "0A02": ["CS", "PixelSpacingCalibrationType"],
    "0A04": ["LO", "PixelSpacingCalibrationDescription"],
    "1040": ["CS", "PixelIntensityRelationship"],
    "1041": ["SS", "PixelIntensityRelationshipSign"],
    "1050": ["DS", "WindowCenter"],
    "1051": ["DS", "WindowWidth"],
    "1052": ["DS", "RescaleIntercept"],
    "1053": ["DS", "RescaleSlope"],
    "1054": ["LO", "RescaleType"],
    "1055": ["LO", "WindowCenterWidthExplanation"],
    "1056": ["CS", "VOILUTFunction"],
    "1080": ["CS", "GrayScale"],
    "1090": ["CS", "RecommendedViewingMode"],
    "1100": ["SS", "GrayLookupTableDescriptor"],
    "1101": ["SS", "RedPaletteColorLookupTableDescriptor"],
    "1102": ["SS", "GreenPaletteColorLookupTableDescriptor"],
    "1103": ["SS", "BluePaletteColorLookupTableDescriptor"],
    "1104": ["US", "AlphaPaletteColorLookupTableDescriptor"],
    "1111": ["SS", "LargeRedPaletteColorLookupTableDescriptor"],
    "1112": ["SS", "LargeGreenPaletteColorLookupTableDescriptor"],
    "1113": ["SS", "LargeBluePaletteColorLookupTableDescriptor"],
    "1199": ["UI", "PaletteColorLookupTableUID"],
    "1200": ["OW", "GrayLookupTableData"],
    "1201": ["OW", "RedPaletteColorLookupTableData"],
    "1202": ["OW", "GreenPaletteColorLookupTableData"],
    "1203": ["OW", "BluePaletteColorLookupTableData"],
    "1204": ["OW", "AlphaPaletteColorLookupTableData"],
    "1211": ["OW", "LargeRedPaletteColorLookupTableData"],
    "1212": ["OW", "LargeGreenPaletteColorLookupTableData"],
    "1213": ["OW", "LargeBluePaletteColorLookupTableData"],
    "1214": ["UI", "LargePaletteColorLookupTableUID"],
    "1221": ["OW", "SegmentedRedPaletteColorLookupTableData"],
    "1222": ["OW", "SegmentedGreenPaletteColorLookupTableData"],
    "1223": ["OW", "SegmentedBluePaletteColorLookupTableData"],
    "1300": ["CS", "BreastImplantPresent"],
    "1350": ["CS", "PartialView"],
    "1351": ["ST", "PartialViewDescription"],
    "1352": ["SQ", "PartialViewCodeSequence"],
    "135A": ["CS", "SpatialLocationsPreserved"],
    "1401": ["SQ", "DataFrameAssignmentSequence"],
    "1402": ["CS", "DataPathAssignment"],
    "1403": ["US", "BitsMappedToColorLookupTable"],
    "1404": ["SQ", "BlendingLUT1Sequence"],
    "1405": ["CS", "BlendingLUT1TransferFunction"],
    "1406": ["FD", "BlendingWeightConstant"],
    "1407": ["US", "BlendingLookupTableDescriptor"],
    "1408": ["OW", "BlendingLookupTableData"],
    "140B": ["SQ", "EnhancedPaletteColorLookupTableSequence"],
    "140C": ["SQ", "BlendingLUT2Sequence"],
    "140D": ["CS", "BlendingLUT2TransferFunction"],
    "140E": ["CS", "DataPathID"],
    "140F": ["CS", "RGBLUTTransferFunction"],
    "1410": ["CS", "AlphaLUTTransferFunction"],
    "2000": ["OB", "ICCProfile"],
    "2110": ["CS", "LossyImageCompression"],
    "2112": ["DS", "LossyImageCompressionRatio"],
    "2114": ["CS", "LossyImageCompressionMethod"],
    "3000": ["SQ", "ModalityLUTSequence"],
    "3002": ["SS", "LUTDescriptor"],
    "3003": ["LO", "LUTExplanation"],
    "3004": ["LO", "ModalityLUTType"],
    "3006": ["OW", "LUTData"],
    "3010": ["SQ", "VOILUTSequence"],
    "3110": ["SQ", "SoftcopyVOILUTSequence"],
    "4000": ["LT", "ImagePresentationComments"],
    "5000": ["SQ", "BiPlaneAcquisitionSequence"],
    "6010": ["US", "RepresentativeFrameNumber"],
    "6020": ["US", "FrameNumbersOfInterest"],
    "6022": ["LO", "FrameOfInterestDescription"],
    "6023": ["CS", "FrameOfInterestType"],
    "6030": ["US", "MaskPointers"],
    "6040": ["US", "RWavePointer"],
    "6100": ["SQ", "MaskSubtractionSequence"],
    "6101": ["CS", "MaskOperation"],
    "6102": ["US", "ApplicableFrameRange"],
    "6110": ["US", "MaskFrameNumbers"],
    "6112": ["US", "ContrastFrameAveraging"],
    "6114": ["FL", "MaskSubPixelShift"],
    "6120": ["SS", "TIDOffset"],
    "6190": ["ST", "MaskOperationExplanation"],
    "7FE0": ["UT", "PixelDataProviderURL"],
    "9001": ["UL", "DataPointRows"],
    "9002": ["UL", "DataPointColumns"],
    "9003": ["CS", "SignalDomainColumns"],
    "9099": ["US", "LargestMonochromePixelValue"],
    "9108": ["CS", "DataRepresentation"],
    "9110": ["SQ", "PixelMeasuresSequence"],
    "9132": ["SQ", "FrameVOILUTSequence"],
    "9145": ["SQ", "PixelValueTransformationSequence"],
    "9235": ["CS", "SignalDomainRows"],
    "9411": ["FL", "DisplayFilterPercentage"],
    "9415": ["SQ", "FramePixelShiftSequence"],
    "9416": ["US", "SubtractionItemID"],
    "9422": ["SQ", "PixelIntensityRelationshipLUTSequence"],
    "9443": ["SQ", "FramePixelDataPropertiesSequence"],
    "9444": ["CS", "GeometricalProperties"],
    "9445": ["FL", "GeometricMaximumDistortion"],
    "9446": ["CS", "ImageProcessingApplied"],
    "9454": ["CS", "MaskSelectionMode"],
    "9474": ["CS", "LUTFunction"],
    "9478": ["FL", "MaskVisibilityPercentage"],
    "9501": ["SQ", "PixelShiftSequence"],
    "9502": ["SQ", "RegionPixelShiftSequence"],
    "9503": ["SS", "VerticesOfTheRegion"],
    "9505": ["SQ", "MultiFramePresentationSequence"],
    "9506": ["US", "PixelShiftFrameRange"],
    "9507": ["US", "LUTFrameRange"],
    "9520": ["DS", "ImageToEquipmentMappingMatrix"],
    "9537": ["CS", "EquipmentCoordinateSystemIdentification"]
  },
  "0032": {
    "000A": ["CS", "StudyStatusID"],
    "000C": ["CS", "StudyPriorityID"],
    "0012": ["LO", "StudyIDIssuer"],
    "0032": ["DA", "StudyVerifiedDate"],
    "0033": ["TM", "StudyVerifiedTime"],
    "0034": ["DA", "StudyReadDate"],
    "0035": ["TM", "StudyReadTime"],
    "1000": ["DA", "ScheduledStudyStartDate"],
    "1001": ["TM", "ScheduledStudyStartTime"],
    "1010": ["DA", "ScheduledStudyStopDate"],
    "1011": ["TM", "ScheduledStudyStopTime"],
    "1020": ["LO", "ScheduledStudyLocation"],
    "1021": ["AE", "ScheduledStudyLocationAETitle"],
    "1030": ["LO", "ReasonForStudy"],
    "1031": ["SQ", "RequestingPhysicianIdentificationSequence"],
    "1032": ["PN", "RequestingPhysician"],
    "1033": ["LO", "RequestingService"],
    "1034": ["SQ", "RequestingServiceCodeSequence"],
    "1040": ["DA", "StudyArrivalDate"],
    "1041": ["TM", "StudyArrivalTime"],
    "1050": ["DA", "StudyCompletionDate"],
    "1051": ["TM", "StudyCompletionTime"],
    "1055": ["CS", "StudyComponentStatusID"],
    "1060": ["LO", "RequestedProcedureDescription"],
    "1064": ["SQ", "RequestedProcedureCodeSequence"],
    "1070": ["LO", "RequestedContrastAgent"],
    "4000": ["LT", "StudyComments"]
  },
  "0038": {
    "0004": ["SQ", "ReferencedPatientAliasSequence"],
    "0008": ["CS", "VisitStatusID"],
    "0010": ["LO", "AdmissionID"],
    "0011": ["LO", "IssuerOfAdmissionID"],
    "0014": ["SQ", "IssuerOfAdmissionIDSequence"],
    "0016": ["LO", "RouteOfAdmissions"],
    "001A": ["DA", "ScheduledAdmissionDate"],
    "001B": ["TM", "ScheduledAdmissionTime"],
    "001C": ["DA", "ScheduledDischargeDate"],
    "001D": ["TM", "ScheduledDischargeTime"],
    "001E": ["LO", "ScheduledPatientInstitutionResidence"],
    "0020": ["DA", "AdmittingDate"],
    "0021": ["TM", "AdmittingTime"],
    "0030": ["DA", "DischargeDate"],
    "0032": ["TM", "DischargeTime"],
    "0040": ["LO", "DischargeDiagnosisDescription"],
    "0044": ["SQ", "DischargeDiagnosisCodeSequence"],
    "0050": ["LO", "SpecialNeeds"],
    "0060": ["LO", "ServiceEpisodeID"],
    "0061": ["LO", "IssuerOfServiceEpisodeID"],
    "0062": ["LO", "ServiceEpisodeDescription"],
    "0064": ["SQ", "IssuerOfServiceEpisodeIDSequence"],
    "0100": ["SQ", "PertinentDocumentsSequence"],
    "0300": ["LO", "CurrentPatientLocation"],
    "0400": ["LO", "PatientInstitutionResidence"],
    "0500": ["LO", "PatientState"],
    "0502": ["SQ", "PatientClinicalTrialParticipationSequence"],
    "4000": ["LT", "VisitComments"]
  },
  "003A": {
    "0004": ["CS", "WaveformOriginality"],
    "0005": ["US", "NumberOfWaveformChannels"],
    "0010": ["UL", "NumberOfWaveformSamples"],
    "001A": ["DS", "SamplingFrequency"],
    "0020": ["SH", "MultiplexGroupLabel"],
    "0200": ["SQ", "ChannelDefinitionSequence"],
    "0202": ["IS", "WaveformChannelNumber"],
    "0203": ["SH", "ChannelLabel"],
    "0205": ["CS", "ChannelStatus"],
    "0208": ["SQ", "ChannelSourceSequence"],
    "0209": ["SQ", "ChannelSourceModifiersSequence"],
    "020A": ["SQ", "SourceWaveformSequence"],
    "020C": ["LO", "ChannelDerivationDescription"],
    "0210": ["DS", "ChannelSensitivity"],
    "0211": ["SQ", "ChannelSensitivityUnitsSequence"],
    "0212": ["DS", "ChannelSensitivityCorrectionFactor"],
    "0213": ["DS", "ChannelBaseline"],
    "0214": ["DS", "ChannelTimeSkew"],
    "0215": ["DS", "ChannelSampleSkew"],
    "0218": ["DS", "ChannelOffset"],
    "021A": ["US", "WaveformBitsStored"],
    "0220": ["DS", "FilterLowFrequency"],
    "0221": ["DS", "FilterHighFrequency"],
    "0222": ["DS", "NotchFilterFrequency"],
    "0223": ["DS", "NotchFilterBandwidth"],
    "0230": ["FL", "WaveformDataDisplayScale"],
    "0231": ["US", "WaveformDisplayBackgroundCIELabValue"],
    "0240": ["SQ", "WaveformPresentationGroupSequence"],
    "0241": ["US", "PresentationGroupNumber"],
    "0242": ["SQ", "ChannelDisplaySequence"],
    "0244": ["US", "ChannelRecommendedDisplayCIELabValue"],
    "0245": ["FL", "ChannelPosition"],
    "0246": ["CS", "DisplayShadingFlag"],
    "0247": ["FL", "FractionalChannelDisplayScale"],
    "0248": ["FL", "AbsoluteChannelDisplayScale"],
    "0300": ["SQ", "MultiplexedAudioChannelsDescriptionCodeSequence"],
    "0301": ["IS", "ChannelIdentificationCode"],
    "0302": ["CS", "ChannelMode"]
  },
  "0040": {
    "0001": ["AE", "ScheduledStationAETitle"],
    "0002": ["DA", "ScheduledProcedureStepStartDate"],
    "0003": ["TM", "ScheduledProcedureStepStartTime"],
    "0004": ["DA", "ScheduledProcedureStepEndDate"],
    "0005": ["TM", "ScheduledProcedureStepEndTime"],
    "0006": ["PN", "ScheduledPerformingPhysicianName"],
    "0007": ["LO", "ScheduledProcedureStepDescription"],
    "0008": ["SQ", "ScheduledProtocolCodeSequence"],
    "0009": ["SH", "ScheduledProcedureStepID"],
    "000A": ["SQ", "StageCodeSequence"],
    "000B": ["SQ", "ScheduledPerformingPhysicianIdentificationSequence"],
    "0010": ["SH", "ScheduledStationName"],
    "0011": ["SH", "ScheduledProcedureStepLocation"],
    "0012": ["LO", "PreMedication"],
    "0020": ["CS", "ScheduledProcedureStepStatus"],
    "0026": ["SQ", "OrderPlacerIdentifierSequence"],
    "0027": ["SQ", "OrderFillerIdentifierSequence"],
    "0031": ["UT", "LocalNamespaceEntityID"],
    "0032": ["UT", "UniversalEntityID"],
    "0033": ["CS", "UniversalEntityIDType"],
    "0035": ["CS", "IdentifierTypeCode"],
    "0036": ["SQ", "AssigningFacilitySequence"],
    "0039": ["SQ", "AssigningJurisdictionCodeSequence"],
    "003A": ["SQ", "AssigningAgencyOrDepartmentCodeSequence"],
    "0100": ["SQ", "ScheduledProcedureStepSequence"],
    "0220": ["SQ", "ReferencedNonImageCompositeSOPInstanceSequence"],
    "0241": ["AE", "PerformedStationAETitle"],
    "0242": ["SH", "PerformedStationName"],
    "0243": ["SH", "PerformedLocation"],
    "0244": ["DA", "PerformedProcedureStepStartDate"],
    "0245": ["TM", "PerformedProcedureStepStartTime"],
    "0250": ["DA", "PerformedProcedureStepEndDate"],
    "0251": ["TM", "PerformedProcedureStepEndTime"],
    "0252": ["CS", "PerformedProcedureStepStatus"],
    "0253": ["SH", "PerformedProcedureStepID"],
    "0254": ["LO", "PerformedProcedureStepDescription"],
    "0255": ["LO", "PerformedProcedureTypeDescription"],
    "0260": ["SQ", "PerformedProtocolCodeSequence"],
    "0261": ["CS", "PerformedProtocolType"],
    "0270": ["SQ", "ScheduledStepAttributesSequence"],
    "0275": ["SQ", "RequestAttributesSequence"],
    "0280": ["ST", "CommentsOnThePerformedProcedureStep"],
    "0281": ["SQ", "PerformedProcedureStepDiscontinuationReasonCodeSequence"],
    "0293": ["SQ", "QuantitySequence"],
    "0294": ["DS", "Quantity"],
    "0295": ["SQ", "MeasuringUnitsSequence"],
    "0296": ["SQ", "BillingItemSequence"],
    "0300": ["US", "TotalTimeOfFluoroscopy"],
    "0301": ["US", "TotalNumberOfExposures"],
    "0302": ["US", "EntranceDose"],
    "0303": ["US", "ExposedArea"],
    "0306": ["DS", "DistanceSourceToEntrance"],
    "0307": ["DS", "DistanceSourceToSupport"],
    "030E": ["SQ", "ExposureDoseSequence"],
    "0310": ["ST", "CommentsOnRadiationDose"],
    "0312": ["DS", "XRayOutput"],
    "0314": ["DS", "HalfValueLayer"],
    "0316": ["DS", "OrganDose"],
    "0318": ["CS", "OrganExposed"],
    "0320": ["SQ", "BillingProcedureStepSequence"],
    "0321": ["SQ", "FilmConsumptionSequence"],
    "0324": ["SQ", "BillingSuppliesAndDevicesSequence"],
    "0330": ["SQ", "ReferencedProcedureStepSequence"],
    "0340": ["SQ", "PerformedSeriesSequence"],
    "0400": ["LT", "CommentsOnTheScheduledProcedureStep"],
    "0440": ["SQ", "ProtocolContextSequence"],
    "0441": ["SQ", "ContentItemModifierSequence"],
    "0500": ["SQ", "ScheduledSpecimenSequence"],
    "050A": ["LO", "SpecimenAccessionNumber"],
    "0512": ["LO", "ContainerIdentifier"],
    "0513": ["SQ", "IssuerOfTheContainerIdentifierSequence"],
    "0515": ["SQ", "AlternateContainerIdentifierSequence"],
    "0518": ["SQ", "ContainerTypeCodeSequence"],
    "051A": ["LO", "ContainerDescription"],
    "0520": ["SQ", "ContainerComponentSequence"],
    "0550": ["SQ", "SpecimenSequence"],
    "0551": ["LO", "SpecimenIdentifier"],
    "0552": ["SQ", "SpecimenDescriptionSequenceTrial"],
    "0553": ["ST", "SpecimenDescriptionTrial"],
    "0554": ["UI", "SpecimenUID"],
    "0555": ["SQ", "AcquisitionContextSequence"],
    "0556": ["ST", "AcquisitionContextDescription"],
    "059A": ["SQ", "SpecimenTypeCodeSequence"],
    "0560": ["SQ", "SpecimenDescriptionSequence"],
    "0562": ["SQ", "IssuerOfTheSpecimenIdentifierSequence"],
    "0600": ["LO", "SpecimenShortDescription"],
    "0602": ["UT", "SpecimenDetailedDescription"],
    "0610": ["SQ", "SpecimenPreparationSequence"],
    "0612": ["SQ", "SpecimenPreparationStepContentItemSequence"],
    "0620": ["SQ", "SpecimenLocalizationContentItemSequence"],
    "06FA": ["LO", "SlideIdentifier"],
    "071A": ["SQ", "ImageCenterPointCoordinatesSequence"],
    "072A": ["DS", "XOffsetInSlideCoordinateSystem"],
    "073A": ["DS", "YOffsetInSlideCoordinateSystem"],
    "074A": ["DS", "ZOffsetInSlideCoordinateSystem"],
    "08D8": ["SQ", "PixelSpacingSequence"],
    "08DA": ["SQ", "CoordinateSystemAxisCodeSequence"],
    "08EA": ["SQ", "MeasurementUnitsCodeSequence"],
    "09F8": ["SQ", "VitalStainCodeSequenceTrial"],
    "1001": ["SH", "RequestedProcedureID"],
    "1002": ["LO", "ReasonForTheRequestedProcedure"],
    "1003": ["SH", "RequestedProcedurePriority"],
    "1004": ["LO", "PatientTransportArrangements"],
    "1005": ["LO", "RequestedProcedureLocation"],
    "1006": ["SH", "PlacerOrderNumberProcedure"],
    "1007": ["SH", "FillerOrderNumberProcedure"],
    "1008": ["LO", "ConfidentialityCode"],
    "1009": ["SH", "ReportingPriority"],
    "100A": ["SQ", "ReasonForRequestedProcedureCodeSequence"],
    "1010": ["PN", "NamesOfIntendedRecipientsOfResults"],
    "1011": ["SQ", "IntendedRecipientsOfResultsIdentificationSequence"],
    "1012": ["SQ", "ReasonForPerformedProcedureCodeSequence"],
    "1060": ["LO", "RequestedProcedureDescriptionTrial"],
    "1101": ["SQ", "PersonIdentificationCodeSequence"],
    "1102": ["ST", "PersonAddress"],
    "1103": ["LO", "PersonTelephoneNumbers"],
    "1400": ["LT", "RequestedProcedureComments"],
    "2001": ["LO", "ReasonForTheImagingServiceRequest"],
    "2004": ["DA", "IssueDateOfImagingServiceRequest"],
    "2005": ["TM", "IssueTimeOfImagingServiceRequest"],
    "2006": ["SH", "PlacerOrderNumberImagingServiceRequestRetired"],
    "2007": ["SH", "FillerOrderNumberImagingServiceRequestRetired"],
    "2008": ["PN", "OrderEnteredBy"],
    "2009": ["SH", "OrderEntererLocation"],
    "2010": ["SH", "OrderCallbackPhoneNumber"],
    "2016": ["LO", "PlacerOrderNumberImagingServiceRequest"],
    "2017": ["LO", "FillerOrderNumberImagingServiceRequest"],
    "2400": ["LT", "ImagingServiceRequestComments"],
    "3001": ["LO", "ConfidentialityConstraintOnPatientDataDescription"],
    "4001": ["CS", "GeneralPurposeScheduledProcedureStepStatus"],
    "4002": ["CS", "GeneralPurposePerformedProcedureStepStatus"],
    "4003": ["CS", "GeneralPurposeScheduledProcedureStepPriority"],
    "4004": ["SQ", "ScheduledProcessingApplicationsCodeSequence"],
    "4005": ["DT", "ScheduledProcedureStepStartDateTime"],
    "4006": ["CS", "MultipleCopiesFlag"],
    "4007": ["SQ", "PerformedProcessingApplicationsCodeSequence"],
    "4009": ["SQ", "HumanPerformerCodeSequence"],
    "4010": ["DT", "ScheduledProcedureStepModificationDateTime"],
    "4011": ["DT", "ExpectedCompletionDateTime"],
    "4015": ["SQ", "ResultingGeneralPurposePerformedProcedureStepsSequence"],
    "4016": ["SQ", "ReferencedGeneralPurposeScheduledProcedureStepSequence"],
    "4018": ["SQ", "ScheduledWorkitemCodeSequence"],
    "4019": ["SQ", "PerformedWorkitemCodeSequence"],
    "4020": ["CS", "InputAvailabilityFlag"],
    "4021": ["SQ", "InputInformationSequence"],
    "4022": ["SQ", "RelevantInformationSequence"],
    "4023": ["UI", "ReferencedGeneralPurposeScheduledProcedureStepTransactionUID"],
    "4025": ["SQ", "ScheduledStationNameCodeSequence"],
    "4026": ["SQ", "ScheduledStationClassCodeSequence"],
    "4027": ["SQ", "ScheduledStationGeographicLocationCodeSequence"],
    "4028": ["SQ", "PerformedStationNameCodeSequence"],
    "4029": ["SQ", "PerformedStationClassCodeSequence"],
    "4030": ["SQ", "PerformedStationGeographicLocationCodeSequence"],
    "4031": ["SQ", "RequestedSubsequentWorkitemCodeSequence"],
    "4032": ["SQ", "NonDICOMOutputCodeSequence"],
    "4033": ["SQ", "OutputInformationSequence"],
    "4034": ["SQ", "ScheduledHumanPerformersSequence"],
    "4035": ["SQ", "ActualHumanPerformersSequence"],
    "4036": ["LO", "HumanPerformerOrganization"],
    "4037": ["PN", "HumanPerformerName"],
    "4040": ["CS", "RawDataHandling"],
    "4041": ["CS", "InputReadinessState"],
    "4050": ["DT", "PerformedProcedureStepStartDateTime"],
    "4051": ["DT", "PerformedProcedureStepEndDateTime"],
    "4052": ["DT", "ProcedureStepCancellationDateTime"],
    "8302": ["DS", "EntranceDoseInmGy"],
    "9094": ["SQ", "ReferencedImageRealWorldValueMappingSequence"],
    "9096": ["SQ", "RealWorldValueMappingSequence"],
    "9098": ["SQ", "PixelValueMappingCodeSequence"],
    "9210": ["SH", "LUTLabel"],
    "9211": ["SS", "RealWorldValueLastValueMapped"],
    "9212": ["FD", "RealWorldValueLUTData"],
    "9216": ["SS", "RealWorldValueFirstValueMapped"],
    "9224": ["FD", "RealWorldValueIntercept"],
    "9225": ["FD", "RealWorldValueSlope"],
    A007: ["CS", "FindingsFlagTrial"],
    A010: ["CS", "RelationshipType"],
    A020: ["SQ", "FindingsSequenceTrial"],
    A021: ["UI", "FindingsGroupUIDTrial"],
    A022: ["UI", "ReferencedFindingsGroupUIDTrial"],
    A023: ["DA", "FindingsGroupRecordingDateTrial"],
    A024: ["TM", "FindingsGroupRecordingTimeTrial"],
    A026: ["SQ", "FindingsSourceCategoryCodeSequenceTrial"],
    A027: ["LO", "VerifyingOrganization"],
    A028: ["SQ", "DocumentingOrganizationIdentifierCodeSequenceTrial"],
    A030: ["DT", "VerificationDateTime"],
    A032: ["DT", "ObservationDateTime"],
    A040: ["CS", "ValueType"],
    A043: ["SQ", "ConceptNameCodeSequence"],
    A047: ["LO", "MeasurementPrecisionDescriptionTrial"],
    A050: ["CS", "ContinuityOfContent"],
    A057: ["CS", "UrgencyOrPriorityAlertsTrial"],
    A060: ["LO", "SequencingIndicatorTrial"],
    A066: ["SQ", "DocumentIdentifierCodeSequenceTrial"],
    A067: ["PN", "DocumentAuthorTrial"],
    A068: ["SQ", "DocumentAuthorIdentifierCodeSequenceTrial"],
    A070: ["SQ", "IdentifierCodeSequenceTrial"],
    A073: ["SQ", "VerifyingObserverSequence"],
    A074: ["OB", "ObjectBinaryIdentifierTrial"],
    A075: ["PN", "VerifyingObserverName"],
    A076: ["SQ", "DocumentingObserverIdentifierCodeSequenceTrial"],
    A078: ["SQ", "AuthorObserverSequence"],
    A07A: ["SQ", "ParticipantSequence"],
    A07C: ["SQ", "CustodialOrganizationSequence"],
    A080: ["CS", "ParticipationType"],
    A082: ["DT", "ParticipationDateTime"],
    A084: ["CS", "ObserverType"],
    A085: ["SQ", "ProcedureIdentifierCodeSequenceTrial"],
    A088: ["SQ", "VerifyingObserverIdentificationCodeSequence"],
    A089: ["OB", "ObjectDirectoryBinaryIdentifierTrial"],
    A090: ["SQ", "EquivalentCDADocumentSequence"],
    A0B0: ["US", "ReferencedWaveformChannels"],
    A110: ["DA", "DateOfDocumentOrVerbalTransactionTrial"],
    A112: ["TM", "TimeOfDocumentCreationOrVerbalTransactionTrial"],
    A120: ["DT", "DateTime"],
    A121: ["DA", "Date"],
    A122: ["TM", "Time"],
    A123: ["PN", "PersonName"],
    A124: ["UI", "UID"],
    A125: ["CS", "ReportStatusIDTrial"],
    A130: ["CS", "TemporalRangeType"],
    A132: ["UL", "ReferencedSamplePositions"],
    A136: ["US", "ReferencedFrameNumbers"],
    A138: ["DS", "ReferencedTimeOffsets"],
    A13A: ["DT", "ReferencedDateTime"],
    A160: ["UT", "TextValue"],
    A167: ["SQ", "ObservationCategoryCodeSequenceTrial"],
    A168: ["SQ", "ConceptCodeSequence"],
    A16A: ["ST", "BibliographicCitationTrial"],
    A170: ["SQ", "PurposeOfReferenceCodeSequence"],
    A171: ["UI", "ObservationUIDTrial"],
    A172: ["UI", "ReferencedObservationUIDTrial"],
    A173: ["CS", "ReferencedObservationClassTrial"],
    A174: ["CS", "ReferencedObjectObservationClassTrial"],
    A180: ["US", "AnnotationGroupNumber"],
    A192: ["DA", "ObservationDateTrial"],
    A193: ["TM", "ObservationTimeTrial"],
    A194: ["CS", "MeasurementAutomationTrial"],
    A195: ["SQ", "ModifierCodeSequence"],
    A224: ["ST", "IdentificationDescriptionTrial"],
    A290: ["CS", "CoordinatesSetGeometricTypeTrial"],
    A296: ["SQ", "AlgorithmCodeSequenceTrial"],
    A297: ["ST", "AlgorithmDescriptionTrial"],
    A29A: ["SL", "PixelCoordinatesSetTrial"],
    A300: ["SQ", "MeasuredValueSequence"],
    A301: ["SQ", "NumericValueQualifierCodeSequence"],
    A307: ["PN", "CurrentObserverTrial"],
    A30A: ["DS", "NumericValue"],
    A313: ["SQ", "ReferencedAccessionSequenceTrial"],
    A33A: ["ST", "ReportStatusCommentTrial"],
    A340: ["SQ", "ProcedureContextSequenceTrial"],
    A352: ["PN", "VerbalSourceTrial"],
    A353: ["ST", "AddressTrial"],
    A354: ["LO", "TelephoneNumberTrial"],
    A358: ["SQ", "VerbalSourceIdentifierCodeSequenceTrial"],
    A360: ["SQ", "PredecessorDocumentsSequence"],
    A370: ["SQ", "ReferencedRequestSequence"],
    A372: ["SQ", "PerformedProcedureCodeSequence"],
    A375: ["SQ", "CurrentRequestedProcedureEvidenceSequence"],
    A380: ["SQ", "ReportDetailSequenceTrial"],
    A385: ["SQ", "PertinentOtherEvidenceSequence"],
    A390: ["SQ", "HL7StructuredDocumentReferenceSequence"],
    A402: ["UI", "ObservationSubjectUIDTrial"],
    A403: ["CS", "ObservationSubjectClassTrial"],
    A404: ["SQ", "ObservationSubjectTypeCodeSequenceTrial"],
    A491: ["CS", "CompletionFlag"],
    A492: ["LO", "CompletionFlagDescription"],
    A493: ["CS", "VerificationFlag"],
    A494: ["CS", "ArchiveRequested"],
    A496: ["CS", "PreliminaryFlag"],
    A504: ["SQ", "ContentTemplateSequence"],
    A525: ["SQ", "IdenticalDocumentsSequence"],
    A600: ["CS", "ObservationSubjectContextFlagTrial"],
    A601: ["CS", "ObserverContextFlagTrial"],
    A603: ["CS", "ProcedureContextFlagTrial"],
    A730: ["SQ", "ContentSequence"],
    A731: ["SQ", "RelationshipSequenceTrial"],
    A732: ["SQ", "RelationshipTypeCodeSequenceTrial"],
    A744: ["SQ", "LanguageCodeSequenceTrial"],
    A992: ["ST", "UniformResourceLocatorTrial"],
    B020: ["SQ", "WaveformAnnotationSequence"],
    DB00: ["CS", "TemplateIdentifier"],
    DB06: ["DT", "TemplateVersion"],
    DB07: ["DT", "TemplateLocalVersion"],
    DB0B: ["CS", "TemplateExtensionFlag"],
    DB0C: ["UI", "TemplateExtensionOrganizationUID"],
    DB0D: ["UI", "TemplateExtensionCreatorUID"],
    DB73: ["UL", "ReferencedContentItemIdentifier"],
    E001: ["ST", "HL7InstanceIdentifier"],
    E004: ["DT", "HL7DocumentEffectiveTime"],
    E006: ["SQ", "HL7DocumentTypeCodeSequence"],
    E008: ["SQ", "DocumentClassCodeSequence"],
    E010: ["UT", "RetrieveURI"],
    E011: ["UI", "RetrieveLocationUID"],
    E020: ["CS", "TypeOfInstances"],
    E021: ["SQ", "DICOMRetrievalSequence"],
    E022: ["SQ", "DICOMMediaRetrievalSequence"],
    E023: ["SQ", "WADORetrievalSequence"],
    E024: ["SQ", "XDSRetrievalSequence"],
    E030: ["UI", "RepositoryUniqueID"],
    E031: ["UI", "HomeCommunityID"]
  },
  "0042": {
    "0010": ["ST", "DocumentTitle"],
    "0011": ["OB", "EncapsulatedDocument"],
    "0012": ["LO", "MIMETypeOfEncapsulatedDocument"],
    "0013": ["SQ", "SourceInstanceSequence"],
    "0014": ["LO", "ListOfMIMETypes"]
  },
  "0044": {
    "0001": ["ST", "ProductPackageIdentifier"],
    "0002": ["CS", "SubstanceAdministrationApproval"],
    "0003": ["LT", "ApprovalStatusFurtherDescription"],
    "0004": ["DT", "ApprovalStatusDateTime"],
    "0007": ["SQ", "ProductTypeCodeSequence"],
    "0008": ["LO", "ProductName"],
    "0009": ["LT", "ProductDescription"],
    "000A": ["LO", "ProductLotIdentifier"],
    "000B": ["DT", "ProductExpirationDateTime"],
    "0010": ["DT", "SubstanceAdministrationDateTime"],
    "0011": ["LO", "SubstanceAdministrationNotes"],
    "0012": ["LO", "SubstanceAdministrationDeviceID"],
    "0013": ["SQ", "ProductParameterSequence"],
    "0019": ["SQ", "SubstanceAdministrationParameterSequence"]
  },
  "0046": {
    "0012": ["LO", "LensDescription"],
    "0014": ["SQ", "RightLensSequence"],
    "0015": ["SQ", "LeftLensSequence"],
    "0016": ["SQ", "UnspecifiedLateralityLensSequence"],
    "0018": ["SQ", "CylinderSequence"],
    "0028": ["SQ", "PrismSequence"],
    "0030": ["FD", "HorizontalPrismPower"],
    "0032": ["CS", "HorizontalPrismBase"],
    "0034": ["FD", "VerticalPrismPower"],
    "0036": ["CS", "VerticalPrismBase"],
    "0038": ["CS", "LensSegmentType"],
    "0040": ["FD", "OpticalTransmittance"],
    "0042": ["FD", "ChannelWidth"],
    "0044": ["FD", "PupilSize"],
    "0046": ["FD", "CornealSize"],
    "0050": ["SQ", "AutorefractionRightEyeSequence"],
    "0052": ["SQ", "AutorefractionLeftEyeSequence"],
    "0060": ["FD", "DistancePupillaryDistance"],
    "0062": ["FD", "NearPupillaryDistance"],
    "0063": ["FD", "IntermediatePupillaryDistance"],
    "0064": ["FD", "OtherPupillaryDistance"],
    "0070": ["SQ", "KeratometryRightEyeSequence"],
    "0071": ["SQ", "KeratometryLeftEyeSequence"],
    "0074": ["SQ", "SteepKeratometricAxisSequence"],
    "0075": ["FD", "RadiusOfCurvature"],
    "0076": ["FD", "KeratometricPower"],
    "0077": ["FD", "KeratometricAxis"],
    "0080": ["SQ", "FlatKeratometricAxisSequence"],
    "0092": ["CS", "BackgroundColor"],
    "0094": ["CS", "Optotype"],
    "0095": ["CS", "OptotypePresentation"],
    "0097": ["SQ", "SubjectiveRefractionRightEyeSequence"],
    "0098": ["SQ", "SubjectiveRefractionLeftEyeSequence"],
    "0100": ["SQ", "AddNearSequence"],
    "0101": ["SQ", "AddIntermediateSequence"],
    "0102": ["SQ", "AddOtherSequence"],
    "0104": ["FD", "AddPower"],
    "0106": ["FD", "ViewingDistance"],
    "0121": ["SQ", "VisualAcuityTypeCodeSequence"],
    "0122": ["SQ", "VisualAcuityRightEyeSequence"],
    "0123": ["SQ", "VisualAcuityLeftEyeSequence"],
    "0124": ["SQ", "VisualAcuityBothEyesOpenSequence"],
    "0125": ["CS", "ViewingDistanceType"],
    "0135": ["SS", "VisualAcuityModifiers"],
    "0137": ["FD", "DecimalVisualAcuity"],
    "0139": ["LO", "OptotypeDetailedDefinition"],
    "0145": ["SQ", "ReferencedRefractiveMeasurementsSequence"],
    "0146": ["FD", "SpherePower"],
    "0147": ["FD", "CylinderPower"]
  },
  "0048": {
    "0001": ["FL", "ImagedVolumeWidth"],
    "0002": ["FL", "ImagedVolumeHeight"],
    "0003": ["FL", "ImagedVolumeDepth"],
    "0006": ["UL", "TotalPixelMatrixColumns"],
    "0007": ["UL", "TotalPixelMatrixRows"],
    "0008": ["SQ", "TotalPixelMatrixOriginSequence"],
    "0010": ["CS", "SpecimenLabelInImage"],
    "0011": ["CS", "FocusMethod"],
    "0012": ["CS", "ExtendedDepthOfField"],
    "0013": ["US", "NumberOfFocalPlanes"],
    "0014": ["FL", "DistanceBetweenFocalPlanes"],
    "0015": ["US", "RecommendedAbsentPixelCIELabValue"],
    "0100": ["SQ", "IlluminatorTypeCodeSequence"],
    "0102": ["DS", "ImageOrientationSlide"],
    "0105": ["SQ", "OpticalPathSequence"],
    "0106": ["SH", "OpticalPathIdentifier"],
    "0107": ["ST", "OpticalPathDescription"],
    "0108": ["SQ", "IlluminationColorCodeSequence"],
    "0110": ["SQ", "SpecimenReferenceSequence"],
    "0111": ["DS", "CondenserLensPower"],
    "0112": ["DS", "ObjectiveLensPower"],
    "0113": ["DS", "ObjectiveLensNumericalAperture"],
    "0120": ["SQ", "PaletteColorLookupTableSequence"],
    "0200": ["SQ", "ReferencedImageNavigationSequence"],
    "0201": ["US", "TopLeftHandCornerOfLocalizerArea"],
    "0202": ["US", "BottomRightHandCornerOfLocalizerArea"],
    "0207": ["SQ", "OpticalPathIdentificationSequence"],
    "021A": ["SQ", "PlanePositionSlideSequence"],
    "021E": ["SL", "RowPositionInTotalImagePixelMatrix"],
    "021F": ["SL", "ColumnPositionInTotalImagePixelMatrix"],
    "0301": ["CS", "PixelOriginInterpretation"]
  },
  "0050": {
    "0004": ["CS", "CalibrationImage"],
    "0010": ["SQ", "DeviceSequence"],
    "0012": ["SQ", "ContainerComponentTypeCodeSequence"],
    "0013": ["FD", "ContainerComponentThickness"],
    "0014": ["DS", "DeviceLength"],
    "0015": ["FD", "ContainerComponentWidth"],
    "0016": ["DS", "DeviceDiameter"],
    "0017": ["CS", "DeviceDiameterUnits"],
    "0018": ["DS", "DeviceVolume"],
    "0019": ["DS", "InterMarkerDistance"],
    "001A": ["CS", "ContainerComponentMaterial"],
    "001B": ["LO", "ContainerComponentID"],
    "001C": ["FD", "ContainerComponentLength"],
    "001D": ["FD", "ContainerComponentDiameter"],
    "001E": ["LO", "ContainerComponentDescription"],
    "0020": ["LO", "DeviceDescription"]
  },
  "0052": {
    "0001": ["FL", "ContrastBolusIngredientPercentByVolume"],
    "0002": ["FD", "OCTFocalDistance"],
    "0003": ["FD", "BeamSpotSize"],
    "0004": ["FD", "EffectiveRefractiveIndex"],
    "0006": ["CS", "OCTAcquisitionDomain"],
    "0007": ["FD", "OCTOpticalCenterWavelength"],
    "0008": ["FD", "AxialResolution"],
    "0009": ["FD", "RangingDepth"],
    "0011": ["FD", "ALineRate"],
    "0012": ["US", "ALinesPerFrame"],
    "0013": ["FD", "CatheterRotationalRate"],
    "0014": ["FD", "ALinePixelSpacing"],
    "0016": ["SQ", "ModeOfPercutaneousAccessSequence"],
    "0025": ["SQ", "IntravascularOCTFrameTypeSequence"],
    "0026": ["CS", "OCTZOffsetApplied"],
    "0027": ["SQ", "IntravascularFrameContentSequence"],
    "0028": ["FD", "IntravascularLongitudinalDistance"],
    "0029": ["SQ", "IntravascularOCTFrameContentSequence"],
    "0030": ["SS", "OCTZOffsetCorrection"],
    "0031": ["CS", "CatheterDirectionOfRotation"],
    "0033": ["FD", "SeamLineLocation"],
    "0034": ["FD", "FirstALineLocation"],
    "0036": ["US", "SeamLineIndex"],
    "0038": ["US", "NumberOfPaddedAlines"],
    "0039": ["CS", "InterpolationType"],
    "003A": ["CS", "RefractiveIndexApplied"]
  },
  "0054": {
    "0010": ["US", "EnergyWindowVector"],
    "0011": ["US", "NumberOfEnergyWindows"],
    "0012": ["SQ", "EnergyWindowInformationSequence"],
    "0013": ["SQ", "EnergyWindowRangeSequence"],
    "0014": ["DS", "EnergyWindowLowerLimit"],
    "0015": ["DS", "EnergyWindowUpperLimit"],
    "0016": ["SQ", "RadiopharmaceuticalInformationSequence"],
    "0017": ["IS", "ResidualSyringeCounts"],
    "0018": ["SH", "EnergyWindowName"],
    "0020": ["US", "DetectorVector"],
    "0021": ["US", "NumberOfDetectors"],
    "0022": ["SQ", "DetectorInformationSequence"],
    "0030": ["US", "PhaseVector"],
    "0031": ["US", "NumberOfPhases"],
    "0032": ["SQ", "PhaseInformationSequence"],
    "0033": ["US", "NumberOfFramesInPhase"],
    "0036": ["IS", "PhaseDelay"],
    "0038": ["IS", "PauseBetweenFrames"],
    "0039": ["CS", "PhaseDescription"],
    "0050": ["US", "RotationVector"],
    "0051": ["US", "NumberOfRotations"],
    "0052": ["SQ", "RotationInformationSequence"],
    "0053": ["US", "NumberOfFramesInRotation"],
    "0060": ["US", "RRIntervalVector"],
    "0061": ["US", "NumberOfRRIntervals"],
    "0062": ["SQ", "GatedInformationSequence"],
    "0063": ["SQ", "DataInformationSequence"],
    "0070": ["US", "TimeSlotVector"],
    "0071": ["US", "NumberOfTimeSlots"],
    "0072": ["SQ", "TimeSlotInformationSequence"],
    "0073": ["DS", "TimeSlotTime"],
    "0080": ["US", "SliceVector"],
    "0081": ["US", "NumberOfSlices"],
    "0090": ["US", "AngularViewVector"],
    "0100": ["US", "TimeSliceVector"],
    "0101": ["US", "NumberOfTimeSlices"],
    "0200": ["DS", "StartAngle"],
    "0202": ["CS", "TypeOfDetectorMotion"],
    "0210": ["IS", "TriggerVector"],
    "0211": ["US", "NumberOfTriggersInPhase"],
    "0220": ["SQ", "ViewCodeSequence"],
    "0222": ["SQ", "ViewModifierCodeSequence"],
    "0300": ["SQ", "RadionuclideCodeSequence"],
    "0302": ["SQ", "AdministrationRouteCodeSequence"],
    "0304": ["SQ", "RadiopharmaceuticalCodeSequence"],
    "0306": ["SQ", "CalibrationDataSequence"],
    "0308": ["US", "EnergyWindowNumber"],
    "0400": ["SH", "ImageID"],
    "0410": ["SQ", "PatientOrientationCodeSequence"],
    "0412": ["SQ", "PatientOrientationModifierCodeSequence"],
    "0414": ["SQ", "PatientGantryRelationshipCodeSequence"],
    "0500": ["CS", "SliceProgressionDirection"],
    "1000": ["CS", "SeriesType"],
    "1001": ["CS", "Units"],
    "1002": ["CS", "CountsSource"],
    "1004": ["CS", "ReprojectionMethod"],
    "1006": ["CS", "SUVType"],
    "1100": ["CS", "RandomsCorrectionMethod"],
    "1101": ["LO", "AttenuationCorrectionMethod"],
    "1102": ["CS", "DecayCorrection"],
    "1103": ["LO", "ReconstructionMethod"],
    "1104": ["LO", "DetectorLinesOfResponseUsed"],
    "1105": ["LO", "ScatterCorrectionMethod"],
    "1200": ["DS", "AxialAcceptance"],
    "1201": ["IS", "AxialMash"],
    "1202": ["IS", "TransverseMash"],
    "1203": ["DS", "DetectorElementSize"],
    "1210": ["DS", "CoincidenceWindowWidth"],
    "1220": ["CS", "SecondaryCountsType"],
    "1300": ["DS", "FrameReferenceTime"],
    "1310": ["IS", "PrimaryPromptsCountsAccumulated"],
    "1311": ["IS", "SecondaryCountsAccumulated"],
    "1320": ["DS", "SliceSensitivityFactor"],
    "1321": ["DS", "DecayFactor"],
    "1322": ["DS", "DoseCalibrationFactor"],
    "1323": ["DS", "ScatterFractionFactor"],
    "1324": ["DS", "DeadTimeFactor"],
    "1330": ["US", "ImageIndex"],
    "1400": ["CS", "CountsIncluded"],
    "1401": ["CS", "DeadTimeCorrectionFlag"]
  },
  "0060": {
    "3000": ["SQ", "HistogramSequence"],
    "3002": ["US", "HistogramNumberOfBins"],
    "3004": ["SS", "HistogramFirstBinValue"],
    "3006": ["SS", "HistogramLastBinValue"],
    "3008": ["US", "HistogramBinWidth"],
    "3010": ["LO", "HistogramExplanation"],
    "3020": ["UL", "HistogramData"]
  },
  "0062": {
    "0001": ["CS", "SegmentationType"],
    "0002": ["SQ", "SegmentSequence"],
    "0003": ["SQ", "SegmentedPropertyCategoryCodeSequence"],
    "0004": ["US", "SegmentNumber"],
    "0005": ["LO", "SegmentLabel"],
    "0006": ["ST", "SegmentDescription"],
    "0008": ["CS", "SegmentAlgorithmType"],
    "0009": ["LO", "SegmentAlgorithmName"],
    "000A": ["SQ", "SegmentIdentificationSequence"],
    "000B": ["US", "ReferencedSegmentNumber"],
    "000C": ["US", "RecommendedDisplayGrayscaleValue"],
    "000D": ["US", "RecommendedDisplayCIELabValue"],
    "000E": ["US", "MaximumFractionalValue"],
    "000F": ["SQ", "SegmentedPropertyTypeCodeSequence"],
    "0010": ["CS", "SegmentationFractionalType"]
  },
  "0064": {
    "0002": ["SQ", "DeformableRegistrationSequence"],
    "0003": ["UI", "SourceFrameOfReferenceUID"],
    "0005": ["SQ", "DeformableRegistrationGridSequence"],
    "0007": ["UL", "GridDimensions"],
    "0008": ["FD", "GridResolution"],
    "0009": ["OF", "VectorGridData"],
    "000F": ["SQ", "PreDeformationMatrixRegistrationSequence"],
    "0010": ["SQ", "PostDeformationMatrixRegistrationSequence"]
  },
  "0066": {
    "0001": ["UL", "NumberOfSurfaces"],
    "0002": ["SQ", "SurfaceSequence"],
    "0003": ["UL", "SurfaceNumber"],
    "0004": ["LT", "SurfaceComments"],
    "0009": ["CS", "SurfaceProcessing"],
    "000A": ["FL", "SurfaceProcessingRatio"],
    "000B": ["LO", "SurfaceProcessingDescription"],
    "000C": ["FL", "RecommendedPresentationOpacity"],
    "000D": ["CS", "RecommendedPresentationType"],
    "000E": ["CS", "FiniteVolume"],
    "0010": ["CS", "Manifold"],
    "0011": ["SQ", "SurfacePointsSequence"],
    "0012": ["SQ", "SurfacePointsNormalsSequence"],
    "0013": ["SQ", "SurfaceMeshPrimitivesSequence"],
    "0015": ["UL", "NumberOfSurfacePoints"],
    "0016": ["OF", "PointCoordinatesData"],
    "0017": ["FL", "PointPositionAccuracy"],
    "0018": ["FL", "MeanPointDistance"],
    "0019": ["FL", "MaximumPointDistance"],
    "001A": ["FL", "PointsBoundingBoxCoordinates"],
    "001B": ["FL", "AxisOfRotation"],
    "001C": ["FL", "CenterOfRotation"],
    "001E": ["UL", "NumberOfVectors"],
    "001F": ["US", "VectorDimensionality"],
    "0020": ["FL", "VectorAccuracy"],
    "0021": ["OF", "VectorCoordinateData"],
    "0023": ["OW", "TrianglePointIndexList"],
    "0024": ["OW", "EdgePointIndexList"],
    "0025": ["OW", "VertexPointIndexList"],
    "0026": ["SQ", "TriangleStripSequence"],
    "0027": ["SQ", "TriangleFanSequence"],
    "0028": ["SQ", "LineSequence"],
    "0029": ["OW", "PrimitivePointIndexList"],
    "002A": ["UL", "SurfaceCount"],
    "002B": ["SQ", "ReferencedSurfaceSequence"],
    "002C": ["UL", "ReferencedSurfaceNumber"],
    "002D": ["SQ", "SegmentSurfaceGenerationAlgorithmIdentificationSequence"],
    "002E": ["SQ", "SegmentSurfaceSourceInstanceSequence"],
    "002F": ["SQ", "AlgorithmFamilyCodeSequence"],
    "0030": ["SQ", "AlgorithmNameCodeSequence"],
    "0031": ["LO", "AlgorithmVersion"],
    "0032": ["LT", "AlgorithmParameters"],
    "0034": ["SQ", "FacetSequence"],
    "0035": ["SQ", "SurfaceProcessingAlgorithmIdentificationSequence"],
    "0036": ["LO", "AlgorithmName"]
  },
  "0068": {
    "6210": ["LO", "ImplantSize"],
    "6221": ["LO", "ImplantTemplateVersion"],
    "6222": ["SQ", "ReplacedImplantTemplateSequence"],
    "6223": ["CS", "ImplantType"],
    "6224": ["SQ", "DerivationImplantTemplateSequence"],
    "6225": ["SQ", "OriginalImplantTemplateSequence"],
    "6226": ["DT", "EffectiveDateTime"],
    "6230": ["SQ", "ImplantTargetAnatomySequence"],
    "6260": ["SQ", "InformationFromManufacturerSequence"],
    "6265": ["SQ", "NotificationFromManufacturerSequence"],
    "6270": ["DT", "InformationIssueDateTime"],
    "6280": ["ST", "InformationSummary"],
    "62A0": ["SQ", "ImplantRegulatoryDisapprovalCodeSequence"],
    "62A5": ["FD", "OverallTemplateSpatialTolerance"],
    "62C0": ["SQ", "HPGLDocumentSequence"],
    "62D0": ["US", "HPGLDocumentID"],
    "62D5": ["LO", "HPGLDocumentLabel"],
    "62E0": ["SQ", "ViewOrientationCodeSequence"],
    "62F0": ["FD", "ViewOrientationModifier"],
    "62F2": ["FD", "HPGLDocumentScaling"],
    "6300": ["OB", "HPGLDocument"],
    "6310": ["US", "HPGLContourPenNumber"],
    "6320": ["SQ", "HPGLPenSequence"],
    "6330": ["US", "HPGLPenNumber"],
    "6340": ["LO", "HPGLPenLabel"],
    "6345": ["ST", "HPGLPenDescription"],
    "6346": ["FD", "RecommendedRotationPoint"],
    "6347": ["FD", "BoundingRectangle"],
    "6350": ["US", "ImplantTemplate3DModelSurfaceNumber"],
    "6360": ["SQ", "SurfaceModelDescriptionSequence"],
    "6380": ["LO", "SurfaceModelLabel"],
    "6390": ["FD", "SurfaceModelScalingFactor"],
    "63A0": ["SQ", "MaterialsCodeSequence"],
    "63A4": ["SQ", "CoatingMaterialsCodeSequence"],
    "63A8": ["SQ", "ImplantTypeCodeSequence"],
    "63AC": ["SQ", "FixationMethodCodeSequence"],
    "63B0": ["SQ", "MatingFeatureSetsSequence"],
    "63C0": ["US", "MatingFeatureSetID"],
    "63D0": ["LO", "MatingFeatureSetLabel"],
    "63E0": ["SQ", "MatingFeatureSequence"],
    "63F0": ["US", "MatingFeatureID"],
    "6400": ["SQ", "MatingFeatureDegreeOfFreedomSequence"],
    "6410": ["US", "DegreeOfFreedomID"],
    "6420": ["CS", "DegreeOfFreedomType"],
    "6430": ["SQ", "TwoDMatingFeatureCoordinatesSequence"],
    "6440": ["US", "ReferencedHPGLDocumentID"],
    "6450": ["FD", "TwoDMatingPoint"],
    "6460": ["FD", "TwoDMatingAxes"],
    "6470": ["SQ", "TwoDDegreeOfFreedomSequence"],
    "6490": ["FD", "ThreeDDegreeOfFreedomAxis"],
    "64A0": ["FD", "RangeOfFreedom"],
    "64C0": ["FD", "ThreeDMatingPoint"],
    "64D0": ["FD", "ThreeDMatingAxes"],
    "64F0": ["FD", "TwoDDegreeOfFreedomAxis"],
    "6500": ["SQ", "PlanningLandmarkPointSequence"],
    "6510": ["SQ", "PlanningLandmarkLineSequence"],
    "6520": ["SQ", "PlanningLandmarkPlaneSequence"],
    "6530": ["US", "PlanningLandmarkID"],
    "6540": ["LO", "PlanningLandmarkDescription"],
    "6545": ["SQ", "PlanningLandmarkIdentificationCodeSequence"],
    "6550": ["SQ", "TwoDPointCoordinatesSequence"],
    "6560": ["FD", "TwoDPointCoordinates"],
    "6590": ["FD", "ThreeDPointCoordinates"],
    "65A0": ["SQ", "TwoDLineCoordinatesSequence"],
    "65B0": ["FD", "TwoDLineCoordinates"],
    "65D0": ["FD", "ThreeDLineCoordinates"],
    "65E0": ["SQ", "TwoDPlaneCoordinatesSequence"],
    "65F0": ["FD", "TwoDPlaneIntersection"],
    "6610": ["FD", "ThreeDPlaneOrigin"],
    "6620": ["FD", "ThreeDPlaneNormal"]
  },
  "0070": {
    "0001": ["SQ", "GraphicAnnotationSequence"],
    "0002": ["CS", "GraphicLayer"],
    "0003": ["CS", "BoundingBoxAnnotationUnits"],
    "0004": ["CS", "AnchorPointAnnotationUnits"],
    "0005": ["CS", "GraphicAnnotationUnits"],
    "0006": ["ST", "UnformattedTextValue"],
    "0008": ["SQ", "TextObjectSequence"],
    "0009": ["SQ", "GraphicObjectSequence"],
    "0010": ["FL", "BoundingBoxTopLeftHandCorner"],
    "0011": ["FL", "BoundingBoxBottomRightHandCorner"],
    "0012": ["CS", "BoundingBoxTextHorizontalJustification"],
    "0014": ["FL", "AnchorPoint"],
    "0015": ["CS", "AnchorPointVisibility"],
    "0020": ["US", "GraphicDimensions"],
    "0021": ["US", "NumberOfGraphicPoints"],
    "0022": ["FL", "GraphicData"],
    "0023": ["CS", "GraphicType"],
    "0024": ["CS", "GraphicFilled"],
    "0040": ["IS", "ImageRotationRetired"],
    "0041": ["CS", "ImageHorizontalFlip"],
    "0042": ["US", "ImageRotation"],
    "0050": ["US", "DisplayedAreaTopLeftHandCornerTrial"],
    "0051": ["US", "DisplayedAreaBottomRightHandCornerTrial"],
    "0052": ["SL", "DisplayedAreaTopLeftHandCorner"],
    "0053": ["SL", "DisplayedAreaBottomRightHandCorner"],
    "005A": ["SQ", "DisplayedAreaSelectionSequence"],
    "0060": ["SQ", "GraphicLayerSequence"],
    "0062": ["IS", "GraphicLayerOrder"],
    "0066": ["US", "GraphicLayerRecommendedDisplayGrayscaleValue"],
    "0067": ["US", "GraphicLayerRecommendedDisplayRGBValue"],
    "0068": ["LO", "GraphicLayerDescription"],
    "0080": ["CS", "ContentLabel"],
    "0081": ["LO", "ContentDescription"],
    "0082": ["DA", "PresentationCreationDate"],
    "0083": ["TM", "PresentationCreationTime"],
    "0084": ["PN", "ContentCreatorName"],
    "0086": ["SQ", "ContentCreatorIdentificationCodeSequence"],
    "0087": ["SQ", "AlternateContentDescriptionSequence"],
    "0100": ["CS", "PresentationSizeMode"],
    "0101": ["DS", "PresentationPixelSpacing"],
    "0102": ["IS", "PresentationPixelAspectRatio"],
    "0103": ["FL", "PresentationPixelMagnificationRatio"],
    "0207": ["LO", "GraphicGroupLabel"],
    "0208": ["ST", "GraphicGroupDescription"],
    "0209": ["SQ", "CompoundGraphicSequence"],
    "0226": ["UL", "CompoundGraphicInstanceID"],
    "0227": ["LO", "FontName"],
    "0228": ["CS", "FontNameType"],
    "0229": ["LO", "CSSFontName"],
    "0230": ["FD", "RotationAngle"],
    "0231": ["SQ", "TextStyleSequence"],
    "0232": ["SQ", "LineStyleSequence"],
    "0233": ["SQ", "FillStyleSequence"],
    "0234": ["SQ", "GraphicGroupSequence"],
    "0241": ["US", "TextColorCIELabValue"],
    "0242": ["CS", "HorizontalAlignment"],
    "0243": ["CS", "VerticalAlignment"],
    "0244": ["CS", "ShadowStyle"],
    "0245": ["FL", "ShadowOffsetX"],
    "0246": ["FL", "ShadowOffsetY"],
    "0247": ["US", "ShadowColorCIELabValue"],
    "0248": ["CS", "Underlined"],
    "0249": ["CS", "Bold"],
    "0250": ["CS", "Italic"],
    "0251": ["US", "PatternOnColorCIELabValue"],
    "0252": ["US", "PatternOffColorCIELabValue"],
    "0253": ["FL", "LineThickness"],
    "0254": ["CS", "LineDashingStyle"],
    "0255": ["UL", "LinePattern"],
    "0256": ["OB", "FillPattern"],
    "0257": ["CS", "FillMode"],
    "0258": ["FL", "ShadowOpacity"],
    "0261": ["FL", "GapLength"],
    "0262": ["FL", "DiameterOfVisibility"],
    "0273": ["FL", "RotationPoint"],
    "0274": ["CS", "TickAlignment"],
    "0278": ["CS", "ShowTickLabel"],
    "0279": ["CS", "TickLabelAlignment"],
    "0282": ["CS", "CompoundGraphicUnits"],
    "0284": ["FL", "PatternOnOpacity"],
    "0285": ["FL", "PatternOffOpacity"],
    "0287": ["SQ", "MajorTicksSequence"],
    "0288": ["FL", "TickPosition"],
    "0289": ["SH", "TickLabel"],
    "0294": ["CS", "CompoundGraphicType"],
    "0295": ["UL", "GraphicGroupID"],
    "0306": ["CS", "ShapeType"],
    "0308": ["SQ", "RegistrationSequence"],
    "0309": ["SQ", "MatrixRegistrationSequence"],
    "030A": ["SQ", "MatrixSequence"],
    "030C": ["CS", "FrameOfReferenceTransformationMatrixType"],
    "030D": ["SQ", "RegistrationTypeCodeSequence"],
    "030F": ["ST", "FiducialDescription"],
    "0310": ["SH", "FiducialIdentifier"],
    "0311": ["SQ", "FiducialIdentifierCodeSequence"],
    "0312": ["FD", "ContourUncertaintyRadius"],
    "0314": ["SQ", "UsedFiducialsSequence"],
    "0318": ["SQ", "GraphicCoordinatesDataSequence"],
    "031A": ["UI", "FiducialUID"],
    "031C": ["SQ", "FiducialSetSequence"],
    "031E": ["SQ", "FiducialSequence"],
    "0401": ["US", "GraphicLayerRecommendedDisplayCIELabValue"],
    "0402": ["SQ", "BlendingSequence"],
    "0403": ["FL", "RelativeOpacity"],
    "0404": ["SQ", "ReferencedSpatialRegistrationSequence"],
    "0405": ["CS", "BlendingPosition"]
  },
  "0072": {
    "0002": ["SH", "HangingProtocolName"],
    "0004": ["LO", "HangingProtocolDescription"],
    "0006": ["CS", "HangingProtocolLevel"],
    "0008": ["LO", "HangingProtocolCreator"],
    "000A": ["DT", "HangingProtocolCreationDateTime"],
    "000C": ["SQ", "HangingProtocolDefinitionSequence"],
    "000E": ["SQ", "HangingProtocolUserIdentificationCodeSequence"],
    "0010": ["LO", "HangingProtocolUserGroupName"],
    "0012": ["SQ", "SourceHangingProtocolSequence"],
    "0014": ["US", "NumberOfPriorsReferenced"],
    "0020": ["SQ", "ImageSetsSequence"],
    "0022": ["SQ", "ImageSetSelectorSequence"],
    "0024": ["CS", "ImageSetSelectorUsageFlag"],
    "0026": ["AT", "SelectorAttribute"],
    "0028": ["US", "SelectorValueNumber"],
    "0030": ["SQ", "TimeBasedImageSetsSequence"],
    "0032": ["US", "ImageSetNumber"],
    "0034": ["CS", "ImageSetSelectorCategory"],
    "0038": ["US", "RelativeTime"],
    "003A": ["CS", "RelativeTimeUnits"],
    "003C": ["SS", "AbstractPriorValue"],
    "003E": ["SQ", "AbstractPriorCodeSequence"],
    "0040": ["LO", "ImageSetLabel"],
    "0050": ["CS", "SelectorAttributeVR"],
    "0052": ["AT", "SelectorSequencePointer"],
    "0054": ["LO", "SelectorSequencePointerPrivateCreator"],
    "0056": ["LO", "SelectorAttributePrivateCreator"],
    "0060": ["AT", "SelectorATValue"],
    "0062": ["CS", "SelectorCSValue"],
    "0064": ["IS", "SelectorISValue"],
    "0066": ["LO", "SelectorLOValue"],
    "0068": ["LT", "SelectorLTValue"],
    "006A": ["PN", "SelectorPNValue"],
    "006C": ["SH", "SelectorSHValue"],
    "006E": ["ST", "SelectorSTValue"],
    "0070": ["UT", "SelectorUTValue"],
    "0072": ["DS", "SelectorDSValue"],
    "0074": ["FD", "SelectorFDValue"],
    "0076": ["FL", "SelectorFLValue"],
    "0078": ["UL", "SelectorULValue"],
    "007A": ["US", "SelectorUSValue"],
    "007C": ["SL", "SelectorSLValue"],
    "007E": ["SS", "SelectorSSValue"],
    "0080": ["SQ", "SelectorCodeSequenceValue"],
    "0100": ["US", "NumberOfScreens"],
    "0102": ["SQ", "NominalScreenDefinitionSequence"],
    "0104": ["US", "NumberOfVerticalPixels"],
    "0106": ["US", "NumberOfHorizontalPixels"],
    "0108": ["FD", "DisplayEnvironmentSpatialPosition"],
    "010A": ["US", "ScreenMinimumGrayscaleBitDepth"],
    "010C": ["US", "ScreenMinimumColorBitDepth"],
    "010E": ["US", "ApplicationMaximumRepaintTime"],
    "0200": ["SQ", "DisplaySetsSequence"],
    "0202": ["US", "DisplaySetNumber"],
    "0203": ["LO", "DisplaySetLabel"],
    "0204": ["US", "DisplaySetPresentationGroup"],
    "0206": ["LO", "DisplaySetPresentationGroupDescription"],
    "0208": ["CS", "PartialDataDisplayHandling"],
    "0210": ["SQ", "SynchronizedScrollingSequence"],
    "0212": ["US", "DisplaySetScrollingGroup"],
    "0214": ["SQ", "NavigationIndicatorSequence"],
    "0216": ["US", "NavigationDisplaySet"],
    "0218": ["US", "ReferenceDisplaySets"],
    "0300": ["SQ", "ImageBoxesSequence"],
    "0302": ["US", "ImageBoxNumber"],
    "0304": ["CS", "ImageBoxLayoutType"],
    "0306": ["US", "ImageBoxTileHorizontalDimension"],
    "0308": ["US", "ImageBoxTileVerticalDimension"],
    "0310": ["CS", "ImageBoxScrollDirection"],
    "0312": ["CS", "ImageBoxSmallScrollType"],
    "0314": ["US", "ImageBoxSmallScrollAmount"],
    "0316": ["CS", "ImageBoxLargeScrollType"],
    "0318": ["US", "ImageBoxLargeScrollAmount"],
    "0320": ["US", "ImageBoxOverlapPriority"],
    "0330": ["FD", "CineRelativeToRealTime"],
    "0400": ["SQ", "FilterOperationsSequence"],
    "0402": ["CS", "FilterByCategory"],
    "0404": ["CS", "FilterByAttributePresence"],
    "0406": ["CS", "FilterByOperator"],
    "0420": ["US", "StructuredDisplayBackgroundCIELabValue"],
    "0421": ["US", "EmptyImageBoxCIELabValue"],
    "0422": ["SQ", "StructuredDisplayImageBoxSequence"],
    "0424": ["SQ", "StructuredDisplayTextBoxSequence"],
    "0427": ["SQ", "ReferencedFirstFrameSequence"],
    "0430": ["SQ", "ImageBoxSynchronizationSequence"],
    "0432": ["US", "SynchronizedImageBoxList"],
    "0434": ["CS", "TypeOfSynchronization"],
    "0500": ["CS", "BlendingOperationType"],
    "0510": ["CS", "ReformattingOperationType"],
    "0512": ["FD", "ReformattingThickness"],
    "0514": ["FD", "ReformattingInterval"],
    "0516": ["CS", "ReformattingOperationInitialViewDirection"],
    "0520": ["CS", "ThreeDRenderingType"],
    "0600": ["SQ", "SortingOperationsSequence"],
    "0602": ["CS", "SortByCategory"],
    "0604": ["CS", "SortingDirection"],
    "0700": ["CS", "DisplaySetPatientOrientation"],
    "0702": ["CS", "VOIType"],
    "0704": ["CS", "PseudoColorType"],
    "0705": ["SQ", "PseudoColorPaletteInstanceReferenceSequence"],
    "0706": ["CS", "ShowGrayscaleInverted"],
    "0710": ["CS", "ShowImageTrueSizeFlag"],
    "0712": ["CS", "ShowGraphicAnnotationFlag"],
    "0714": ["CS", "ShowPatientDemographicsFlag"],
    "0716": ["CS", "ShowAcquisitionTechniquesFlag"],
    "0717": ["CS", "DisplaySetHorizontalJustification"],
    "0718": ["CS", "DisplaySetVerticalJustification"]
  },
  "0074": {
    "0120": ["FD", "ContinuationStartMeterset"],
    "0121": ["FD", "ContinuationEndMeterset"],
    "1000": ["CS", "ProcedureStepState"],
    "1002": ["SQ", "ProcedureStepProgressInformationSequence"],
    "1004": ["DS", "ProcedureStepProgress"],
    "1006": ["ST", "ProcedureStepProgressDescription"],
    "1008": ["SQ", "ProcedureStepCommunicationsURISequence"],
    "100A": ["ST", "ContactURI"],
    "100C": ["LO", "ContactDisplayName"],
    "100E": ["SQ", "ProcedureStepDiscontinuationReasonCodeSequence"],
    "1020": ["SQ", "BeamTaskSequence"],
    "1022": ["CS", "BeamTaskType"],
    "1024": ["IS", "BeamOrderIndexTrial"],
    "1026": ["FD", "TableTopVerticalAdjustedPosition"],
    "1027": ["FD", "TableTopLongitudinalAdjustedPosition"],
    "1028": ["FD", "TableTopLateralAdjustedPosition"],
    "102A": ["FD", "PatientSupportAdjustedAngle"],
    "102B": ["FD", "TableTopEccentricAdjustedAngle"],
    "102C": ["FD", "TableTopPitchAdjustedAngle"],
    "102D": ["FD", "TableTopRollAdjustedAngle"],
    "1030": ["SQ", "DeliveryVerificationImageSequence"],
    "1032": ["CS", "VerificationImageTiming"],
    "1034": ["CS", "DoubleExposureFlag"],
    "1036": ["CS", "DoubleExposureOrdering"],
    "1038": ["DS", "DoubleExposureMetersetTrial"],
    "103A": ["DS", "DoubleExposureFieldDeltaTrial"],
    "1040": ["SQ", "RelatedReferenceRTImageSequence"],
    "1042": ["SQ", "GeneralMachineVerificationSequence"],
    "1044": ["SQ", "ConventionalMachineVerificationSequence"],
    "1046": ["SQ", "IonMachineVerificationSequence"],
    "1048": ["SQ", "FailedAttributesSequence"],
    "104A": ["SQ", "OverriddenAttributesSequence"],
    "104C": ["SQ", "ConventionalControlPointVerificationSequence"],
    "104E": ["SQ", "IonControlPointVerificationSequence"],
    "1050": ["SQ", "AttributeOccurrenceSequence"],
    "1052": ["AT", "AttributeOccurrencePointer"],
    "1054": ["UL", "AttributeItemSelector"],
    "1056": ["LO", "AttributeOccurrencePrivateCreator"],
    "1057": ["IS", "SelectorSequencePointerItems"],
    "1200": ["CS", "ScheduledProcedureStepPriority"],
    "1202": ["LO", "WorklistLabel"],
    "1204": ["LO", "ProcedureStepLabel"],
    "1210": ["SQ", "ScheduledProcessingParametersSequence"],
    "1212": ["SQ", "PerformedProcessingParametersSequence"],
    "1216": ["SQ", "UnifiedProcedureStepPerformedProcedureSequence"],
    "1220": ["SQ", "RelatedProcedureStepSequence"],
    "1222": ["LO", "ProcedureStepRelationshipType"],
    "1224": ["SQ", "ReplacedProcedureStepSequence"],
    "1230": ["LO", "DeletionLock"],
    "1234": ["AE", "ReceivingAE"],
    "1236": ["AE", "RequestingAE"],
    "1238": ["LT", "ReasonForCancellation"],
    "1242": ["CS", "SCPStatus"],
    "1244": ["CS", "SubscriptionListStatus"],
    "1246": ["CS", "UnifiedProcedureStepListStatus"],
    "1324": ["UL", "BeamOrderIndex"],
    "1338": ["FD", "DoubleExposureMeterset"],
    "133A": ["FD", "DoubleExposureFieldDelta"]
  },
  "0076": {
    "0001": ["LO", "ImplantAssemblyTemplateName"],
    "0003": ["LO", "ImplantAssemblyTemplateIssuer"],
    "0006": ["LO", "ImplantAssemblyTemplateVersion"],
    "0008": ["SQ", "ReplacedImplantAssemblyTemplateSequence"],
    "000A": ["CS", "ImplantAssemblyTemplateType"],
    "000C": ["SQ", "OriginalImplantAssemblyTemplateSequence"],
    "000E": ["SQ", "DerivationImplantAssemblyTemplateSequence"],
    "0010": ["SQ", "ImplantAssemblyTemplateTargetAnatomySequence"],
    "0020": ["SQ", "ProcedureTypeCodeSequence"],
    "0030": ["LO", "SurgicalTechnique"],
    "0032": ["SQ", "ComponentTypesSequence"],
    "0034": ["CS", "ComponentTypeCodeSequence"],
    "0036": ["CS", "ExclusiveComponentType"],
    "0038": ["CS", "MandatoryComponentType"],
    "0040": ["SQ", "ComponentSequence"],
    "0055": ["US", "ComponentID"],
    "0060": ["SQ", "ComponentAssemblySequence"],
    "0070": ["US", "Component1ReferencedID"],
    "0080": ["US", "Component1ReferencedMatingFeatureSetID"],
    "0090": ["US", "Component1ReferencedMatingFeatureID"],
    "00A0": ["US", "Component2ReferencedID"],
    "00B0": ["US", "Component2ReferencedMatingFeatureSetID"],
    "00C0": ["US", "Component2ReferencedMatingFeatureID"]
  },
  "0078": {
    "0001": ["LO", "ImplantTemplateGroupName"],
    "0010": ["ST", "ImplantTemplateGroupDescription"],
    "0020": ["LO", "ImplantTemplateGroupIssuer"],
    "0024": ["LO", "ImplantTemplateGroupVersion"],
    "0026": ["SQ", "ReplacedImplantTemplateGroupSequence"],
    "0028": ["SQ", "ImplantTemplateGroupTargetAnatomySequence"],
    "002A": ["SQ", "ImplantTemplateGroupMembersSequence"],
    "002E": ["US", "ImplantTemplateGroupMemberID"],
    "0050": ["FD", "ThreeDImplantTemplateGroupMemberMatchingPoint"],
    "0060": ["FD", "ThreeDImplantTemplateGroupMemberMatchingAxes"],
    "0070": ["SQ", "ImplantTemplateGroupMemberMatching2DCoordinatesSequence"],
    "0090": ["FD", "TwoDImplantTemplateGroupMemberMatchingPoint"],
    "00A0": ["FD", "TwoDImplantTemplateGroupMemberMatchingAxes"],
    "00B0": ["SQ", "ImplantTemplateGroupVariationDimensionSequence"],
    "00B2": ["LO", "ImplantTemplateGroupVariationDimensionName"],
    "00B4": ["SQ", "ImplantTemplateGroupVariationDimensionRankSequence"],
    "00B6": ["US", "ReferencedImplantTemplateGroupMemberID"],
    "00B8": ["US", "ImplantTemplateGroupVariationDimensionRank"]
  },
  "0088": {
    "0130": ["SH", "StorageMediaFileSetID"],
    "0140": ["UI", "StorageMediaFileSetUID"],
    "0200": ["SQ", "IconImageSequence"],
    "0904": ["LO", "TopicTitle"],
    "0906": ["ST", "TopicSubject"],
    "0910": ["LO", "TopicAuthor"],
    "0912": ["LO", "TopicKeywords"]
  },
  "0100": {
    "0410": ["CS", "SOPInstanceStatus"],
    "0420": ["DT", "SOPAuthorizationDateTime"],
    "0424": ["LT", "SOPAuthorizationComment"],
    "0426": ["LO", "AuthorizationEquipmentCertificationNumber"]
  },
  "0400": {
    "0005": ["US", "MACIDNumber"],
    "0010": ["UI", "MACCalculationTransferSyntaxUID"],
    "0015": ["CS", "MACAlgorithm"],
    "0020": ["AT", "DataElementsSigned"],
    "0100": ["UI", "DigitalSignatureUID"],
    "0105": ["DT", "DigitalSignatureDateTime"],
    "0110": ["CS", "CertificateType"],
    "0115": ["OB", "CertificateOfSigner"],
    "0120": ["OB", "Signature"],
    "0305": ["CS", "CertifiedTimestampType"],
    "0310": ["OB", "CertifiedTimestamp"],
    "0401": ["SQ", "DigitalSignaturePurposeCodeSequence"],
    "0402": ["SQ", "ReferencedDigitalSignatureSequence"],
    "0403": ["SQ", "ReferencedSOPInstanceMACSequence"],
    "0404": ["OB", "MAC"],
    "0500": ["SQ", "EncryptedAttributesSequence"],
    "0510": ["UI", "EncryptedContentTransferSyntaxUID"],
    "0520": ["OB", "EncryptedContent"],
    "0550": ["SQ", "ModifiedAttributesSequence"],
    "0561": ["SQ", "OriginalAttributesSequence"],
    "0562": ["DT", "AttributeModificationDateTime"],
    "0563": ["LO", "ModifyingSystem"],
    "0564": ["LO", "SourceOfPreviousValues"],
    "0565": ["CS", "ReasonForTheAttributeModification"]
  },
  "2000": {
    "0010": ["IS", "NumberOfCopies"],
    "001E": ["SQ", "PrinterConfigurationSequence"],
    "0020": ["CS", "PrintPriority"],
    "0030": ["CS", "MediumType"],
    "0040": ["CS", "FilmDestination"],
    "0050": ["LO", "FilmSessionLabel"],
    "0060": ["IS", "MemoryAllocation"],
    "0061": ["IS", "MaximumMemoryAllocation"],
    "0062": ["CS", "ColorImagePrintingFlag"],
    "0063": ["CS", "CollationFlag"],
    "0065": ["CS", "AnnotationFlag"],
    "0067": ["CS", "ImageOverlayFlag"],
    "0069": ["CS", "PresentationLUTFlag"],
    "006A": ["CS", "ImageBoxPresentationLUTFlag"],
    "00A0": ["US", "MemoryBitDepth"],
    "00A1": ["US", "PrintingBitDepth"],
    "00A2": ["SQ", "MediaInstalledSequence"],
    "00A4": ["SQ", "OtherMediaAvailableSequence"],
    "00A8": ["SQ", "SupportedImageDisplayFormatsSequence"],
    "0500": ["SQ", "ReferencedFilmBoxSequence"],
    "0510": ["SQ", "ReferencedStoredPrintSequence"]
  },
  "2010": {
    "0010": ["ST", "ImageDisplayFormat"],
    "0030": ["CS", "AnnotationDisplayFormatID"],
    "0040": ["CS", "FilmOrientation"],
    "0050": ["CS", "FilmSizeID"],
    "0052": ["CS", "PrinterResolutionID"],
    "0054": ["CS", "DefaultPrinterResolutionID"],
    "0060": ["CS", "MagnificationType"],
    "0080": ["CS", "SmoothingType"],
    "00A6": ["CS", "DefaultMagnificationType"],
    "00A7": ["CS", "OtherMagnificationTypesAvailable"],
    "00A8": ["CS", "DefaultSmoothingType"],
    "00A9": ["CS", "OtherSmoothingTypesAvailable"],
    "0100": ["CS", "BorderDensity"],
    "0110": ["CS", "EmptyImageDensity"],
    "0120": ["US", "MinDensity"],
    "0130": ["US", "MaxDensity"],
    "0140": ["CS", "Trim"],
    "0150": ["ST", "ConfigurationInformation"],
    "0152": ["LT", "ConfigurationInformationDescription"],
    "0154": ["IS", "MaximumCollatedFilms"],
    "015E": ["US", "Illumination"],
    "0160": ["US", "ReflectedAmbientLight"],
    "0376": ["DS", "PrinterPixelSpacing"],
    "0500": ["SQ", "ReferencedFilmSessionSequence"],
    "0510": ["SQ", "ReferencedImageBoxSequence"],
    "0520": ["SQ", "ReferencedBasicAnnotationBoxSequence"]
  },
  "2020": {
    "0010": ["US", "ImageBoxPosition"],
    "0020": ["CS", "Polarity"],
    "0030": ["DS", "RequestedImageSize"],
    "0040": ["CS", "RequestedDecimateCropBehavior"],
    "0050": ["CS", "RequestedResolutionID"],
    "00A0": ["CS", "RequestedImageSizeFlag"],
    "00A2": ["CS", "DecimateCropResult"],
    "0110": ["SQ", "BasicGrayscaleImageSequence"],
    "0111": ["SQ", "BasicColorImageSequence"],
    "0130": ["SQ", "ReferencedImageOverlayBoxSequence"],
    "0140": ["SQ", "ReferencedVOILUTBoxSequence"]
  },
  "2030": {
    "0010": ["US", "AnnotationPosition"],
    "0020": ["LO", "TextString"]
  },
  "2040": {
    "0010": ["SQ", "ReferencedOverlayPlaneSequence"],
    "0011": ["US", "ReferencedOverlayPlaneGroups"],
    "0020": ["SQ", "OverlayPixelDataSequence"],
    "0060": ["CS", "OverlayMagnificationType"],
    "0070": ["CS", "OverlaySmoothingType"],
    "0072": ["CS", "OverlayOrImageMagnification"],
    "0074": ["US", "MagnifyToNumberOfColumns"],
    "0080": ["CS", "OverlayForegroundDensity"],
    "0082": ["CS", "OverlayBackgroundDensity"],
    "0090": ["CS", "OverlayMode"],
    "0100": ["CS", "ThresholdDensity"],
    "0500": ["SQ", "ReferencedImageBoxSequenceRetired"]
  },
  "2050": {
    "0010": ["SQ", "PresentationLUTSequence"],
    "0020": ["CS", "PresentationLUTShape"],
    "0500": ["SQ", "ReferencedPresentationLUTSequence"]
  },
  "2100": {
    "0010": ["SH", "PrintJobID"],
    "0020": ["CS", "ExecutionStatus"],
    "0030": ["CS", "ExecutionStatusInfo"],
    "0040": ["DA", "CreationDate"],
    "0050": ["TM", "CreationTime"],
    "0070": ["AE", "Originator"],
    "0140": ["AE", "DestinationAE"],
    "0160": ["SH", "OwnerID"],
    "0170": ["IS", "NumberOfFilms"],
    "0500": ["SQ", "ReferencedPrintJobSequencePullStoredPrint"]
  },
  "2110": {
    "0010": ["CS", "PrinterStatus"],
    "0020": ["CS", "PrinterStatusInfo"],
    "0030": ["LO", "PrinterName"],
    "0099": ["SH", "PrintQueueID"]
  },
  "2120": {
    "0010": ["CS", "QueueStatus"],
    "0050": ["SQ", "PrintJobDescriptionSequence"],
    "0070": ["SQ", "ReferencedPrintJobSequence"]
  },
  "2130": {
    "0010": ["SQ", "PrintManagementCapabilitiesSequence"],
    "0015": ["SQ", "PrinterCharacteristicsSequence"],
    "0030": ["SQ", "FilmBoxContentSequence"],
    "0040": ["SQ", "ImageBoxContentSequence"],
    "0050": ["SQ", "AnnotationContentSequence"],
    "0060": ["SQ", "ImageOverlayBoxContentSequence"],
    "0080": ["SQ", "PresentationLUTContentSequence"],
    "00A0": ["SQ", "ProposedStudySequence"],
    "00C0": ["SQ", "OriginalImageSequence"]
  },
  "2200": {
    "0001": ["CS", "LabelUsingInformationExtractedFromInstances"],
    "0002": ["UT", "LabelText"],
    "0003": ["CS", "LabelStyleSelection"],
    "0004": ["LT", "MediaDisposition"],
    "0005": ["LT", "BarcodeValue"],
    "0006": ["CS", "BarcodeSymbology"],
    "0007": ["CS", "AllowMediaSplitting"],
    "0008": ["CS", "IncludeNonDICOMObjects"],
    "0009": ["CS", "IncludeDisplayApplication"],
    "000A": ["CS", "PreserveCompositeInstancesAfterMediaCreation"],
    "000B": ["US", "TotalNumberOfPiecesOfMediaCreated"],
    "000C": ["LO", "RequestedMediaApplicationProfile"],
    "000D": ["SQ", "ReferencedStorageMediaSequence"],
    "000E": ["AT", "FailureAttributes"],
    "000F": ["CS", "AllowLossyCompression"],
    "0020": ["CS", "RequestPriority"]
  },
  "3002": {
    "0002": ["SH", "RTImageLabel"],
    "0003": ["LO", "RTImageName"],
    "0004": ["ST", "RTImageDescription"],
    "000A": ["CS", "ReportedValuesOrigin"],
    "000C": ["CS", "RTImagePlane"],
    "000D": ["DS", "XRayImageReceptorTranslation"],
    "000E": ["DS", "XRayImageReceptorAngle"],
    "0010": ["DS", "RTImageOrientation"],
    "0011": ["DS", "ImagePlanePixelSpacing"],
    "0012": ["DS", "RTImagePosition"],
    "0020": ["SH", "RadiationMachineName"],
    "0022": ["DS", "RadiationMachineSAD"],
    "0024": ["DS", "RadiationMachineSSD"],
    "0026": ["DS", "RTImageSID"],
    "0028": ["DS", "SourceToReferenceObjectDistance"],
    "0029": ["IS", "FractionNumber"],
    "0030": ["SQ", "ExposureSequence"],
    "0032": ["DS", "MetersetExposure"],
    "0034": ["DS", "DiaphragmPosition"],
    "0040": ["SQ", "FluenceMapSequence"],
    "0041": ["CS", "FluenceDataSource"],
    "0042": ["DS", "FluenceDataScale"],
    "0050": ["SQ", "PrimaryFluenceModeSequence"],
    "0051": ["CS", "FluenceMode"],
    "0052": ["SH", "FluenceModeID"]
  },
  "3004": {
    "0001": ["CS", "DVHType"],
    "0002": ["CS", "DoseUnits"],
    "0004": ["CS", "DoseType"],
    "0006": ["LO", "DoseComment"],
    "0008": ["DS", "NormalizationPoint"],
    "000A": ["CS", "DoseSummationType"],
    "000C": ["DS", "GridFrameOffsetVector"],
    "000E": ["DS", "DoseGridScaling"],
    "0010": ["SQ", "RTDoseROISequence"],
    "0012": ["DS", "DoseValue"],
    "0014": ["CS", "TissueHeterogeneityCorrection"],
    "0040": ["DS", "DVHNormalizationPoint"],
    "0042": ["DS", "DVHNormalizationDoseValue"],
    "0050": ["SQ", "DVHSequence"],
    "0052": ["DS", "DVHDoseScaling"],
    "0054": ["CS", "DVHVolumeUnits"],
    "0056": ["IS", "DVHNumberOfBins"],
    "0058": ["DS", "DVHData"],
    "0060": ["SQ", "DVHReferencedROISequence"],
    "0062": ["CS", "DVHROIContributionType"],
    "0070": ["DS", "DVHMinimumDose"],
    "0072": ["DS", "DVHMaximumDose"],
    "0074": ["DS", "DVHMeanDose"]
  },
  "3006": {
    "0002": ["SH", "StructureSetLabel"],
    "0004": ["LO", "StructureSetName"],
    "0006": ["ST", "StructureSetDescription"],
    "0008": ["DA", "StructureSetDate"],
    "0009": ["TM", "StructureSetTime"],
    "0010": ["SQ", "ReferencedFrameOfReferenceSequence"],
    "0012": ["SQ", "RTReferencedStudySequence"],
    "0014": ["SQ", "RTReferencedSeriesSequence"],
    "0016": ["SQ", "ContourImageSequence"],
    "0020": ["SQ", "StructureSetROISequence"],
    "0022": ["IS", "ROINumber"],
    "0024": ["UI", "ReferencedFrameOfReferenceUID"],
    "0026": ["LO", "ROIName"],
    "0028": ["ST", "ROIDescription"],
    "002A": ["IS", "ROIDisplayColor"],
    "002C": ["DS", "ROIVolume"],
    "0030": ["SQ", "RTRelatedROISequence"],
    "0033": ["CS", "RTROIRelationship"],
    "0036": ["CS", "ROIGenerationAlgorithm"],
    "0038": ["LO", "ROIGenerationDescription"],
    "0039": ["SQ", "ROIContourSequence"],
    "0040": ["SQ", "ContourSequence"],
    "0042": ["CS", "ContourGeometricType"],
    "0044": ["DS", "ContourSlabThickness"],
    "0045": ["DS", "ContourOffsetVector"],
    "0046": ["IS", "NumberOfContourPoints"],
    "0048": ["IS", "ContourNumber"],
    "0049": ["IS", "AttachedContours"],
    "0050": ["DS", "ContourData"],
    "0080": ["SQ", "RTROIObservationsSequence"],
    "0082": ["IS", "ObservationNumber"],
    "0084": ["IS", "ReferencedROINumber"],
    "0085": ["SH", "ROIObservationLabel"],
    "0086": ["SQ", "RTROIIdentificationCodeSequence"],
    "0088": ["ST", "ROIObservationDescription"],
    "00A0": ["SQ", "RelatedRTROIObservationsSequence"],
    "00A4": ["CS", "RTROIInterpretedType"],
    "00A6": ["PN", "ROIInterpreter"],
    "00B0": ["SQ", "ROIPhysicalPropertiesSequence"],
    "00B2": ["CS", "ROIPhysicalProperty"],
    "00B4": ["DS", "ROIPhysicalPropertyValue"],
    "00B6": ["SQ", "ROIElementalCompositionSequence"],
    "00B7": ["US", "ROIElementalCompositionAtomicNumber"],
    "00B8": ["FL", "ROIElementalCompositionAtomicMassFraction"],
    "00C0": ["SQ", "FrameOfReferenceRelationshipSequence"],
    "00C2": ["UI", "RelatedFrameOfReferenceUID"],
    "00C4": ["CS", "FrameOfReferenceTransformationType"],
    "00C6": ["DS", "FrameOfReferenceTransformationMatrix"],
    "00C8": ["LO", "FrameOfReferenceTransformationComment"]
  },
  "3008": {
    "0010": ["SQ", "MeasuredDoseReferenceSequence"],
    "0012": ["ST", "MeasuredDoseDescription"],
    "0014": ["CS", "MeasuredDoseType"],
    "0016": ["DS", "MeasuredDoseValue"],
    "0020": ["SQ", "TreatmentSessionBeamSequence"],
    "0021": ["SQ", "TreatmentSessionIonBeamSequence"],
    "0022": ["IS", "CurrentFractionNumber"],
    "0024": ["DA", "TreatmentControlPointDate"],
    "0025": ["TM", "TreatmentControlPointTime"],
    "002A": ["CS", "TreatmentTerminationStatus"],
    "002B": ["SH", "TreatmentTerminationCode"],
    "002C": ["CS", "TreatmentVerificationStatus"],
    "0030": ["SQ", "ReferencedTreatmentRecordSequence"],
    "0032": ["DS", "SpecifiedPrimaryMeterset"],
    "0033": ["DS", "SpecifiedSecondaryMeterset"],
    "0036": ["DS", "DeliveredPrimaryMeterset"],
    "0037": ["DS", "DeliveredSecondaryMeterset"],
    "003A": ["DS", "SpecifiedTreatmentTime"],
    "003B": ["DS", "DeliveredTreatmentTime"],
    "0040": ["SQ", "ControlPointDeliverySequence"],
    "0041": ["SQ", "IonControlPointDeliverySequence"],
    "0042": ["DS", "SpecifiedMeterset"],
    "0044": ["DS", "DeliveredMeterset"],
    "0045": ["FL", "MetersetRateSet"],
    "0046": ["FL", "MetersetRateDelivered"],
    "0047": ["FL", "ScanSpotMetersetsDelivered"],
    "0048": ["DS", "DoseRateDelivered"],
    "0050": ["SQ", "TreatmentSummaryCalculatedDoseReferenceSequence"],
    "0052": ["DS", "CumulativeDoseToDoseReference"],
    "0054": ["DA", "FirstTreatmentDate"],
    "0056": ["DA", "MostRecentTreatmentDate"],
    "005A": ["IS", "NumberOfFractionsDelivered"],
    "0060": ["SQ", "OverrideSequence"],
    "0061": ["AT", "ParameterSequencePointer"],
    "0062": ["AT", "OverrideParameterPointer"],
    "0063": ["IS", "ParameterItemIndex"],
    "0064": ["IS", "MeasuredDoseReferenceNumber"],
    "0065": ["AT", "ParameterPointer"],
    "0066": ["ST", "OverrideReason"],
    "0068": ["SQ", "CorrectedParameterSequence"],
    "006A": ["FL", "CorrectionValue"],
    "0070": ["SQ", "CalculatedDoseReferenceSequence"],
    "0072": ["IS", "CalculatedDoseReferenceNumber"],
    "0074": ["ST", "CalculatedDoseReferenceDescription"],
    "0076": ["DS", "CalculatedDoseReferenceDoseValue"],
    "0078": ["DS", "StartMeterset"],
    "007A": ["DS", "EndMeterset"],
    "0080": ["SQ", "ReferencedMeasuredDoseReferenceSequence"],
    "0082": ["IS", "ReferencedMeasuredDoseReferenceNumber"],
    "0090": ["SQ", "ReferencedCalculatedDoseReferenceSequence"],
    "0092": ["IS", "ReferencedCalculatedDoseReferenceNumber"],
    "00A0": ["SQ", "BeamLimitingDeviceLeafPairsSequence"],
    "00B0": ["SQ", "RecordedWedgeSequence"],
    "00C0": ["SQ", "RecordedCompensatorSequence"],
    "00D0": ["SQ", "RecordedBlockSequence"],
    "00E0": ["SQ", "TreatmentSummaryMeasuredDoseReferenceSequence"],
    "00F0": ["SQ", "RecordedSnoutSequence"],
    "00F2": ["SQ", "RecordedRangeShifterSequence"],
    "00F4": ["SQ", "RecordedLateralSpreadingDeviceSequence"],
    "00F6": ["SQ", "RecordedRangeModulatorSequence"],
    "0100": ["SQ", "RecordedSourceSequence"],
    "0105": ["LO", "SourceSerialNumber"],
    "0110": ["SQ", "TreatmentSessionApplicationSetupSequence"],
    "0116": ["CS", "ApplicationSetupCheck"],
    "0120": ["SQ", "RecordedBrachyAccessoryDeviceSequence"],
    "0122": ["IS", "ReferencedBrachyAccessoryDeviceNumber"],
    "0130": ["SQ", "RecordedChannelSequence"],
    "0132": ["DS", "SpecifiedChannelTotalTime"],
    "0134": ["DS", "DeliveredChannelTotalTime"],
    "0136": ["IS", "SpecifiedNumberOfPulses"],
    "0138": ["IS", "DeliveredNumberOfPulses"],
    "013A": ["DS", "SpecifiedPulseRepetitionInterval"],
    "013C": ["DS", "DeliveredPulseRepetitionInterval"],
    "0140": ["SQ", "RecordedSourceApplicatorSequence"],
    "0142": ["IS", "ReferencedSourceApplicatorNumber"],
    "0150": ["SQ", "RecordedChannelShieldSequence"],
    "0152": ["IS", "ReferencedChannelShieldNumber"],
    "0160": ["SQ", "BrachyControlPointDeliveredSequence"],
    "0162": ["DA", "SafePositionExitDate"],
    "0164": ["TM", "SafePositionExitTime"],
    "0166": ["DA", "SafePositionReturnDate"],
    "0168": ["TM", "SafePositionReturnTime"],
    "0200": ["CS", "CurrentTreatmentStatus"],
    "0202": ["ST", "TreatmentStatusComment"],
    "0220": ["SQ", "FractionGroupSummarySequence"],
    "0223": ["IS", "ReferencedFractionNumber"],
    "0224": ["CS", "FractionGroupType"],
    "0230": ["CS", "BeamStopperPosition"],
    "0240": ["SQ", "FractionStatusSummarySequence"],
    "0250": ["DA", "TreatmentDate"],
    "0251": ["TM", "TreatmentTime"]
  },
  "300A": {
    "0002": ["SH", "RTPlanLabel"],
    "0003": ["LO", "RTPlanName"],
    "0004": ["ST", "RTPlanDescription"],
    "0006": ["DA", "RTPlanDate"],
    "0007": ["TM", "RTPlanTime"],
    "0009": ["LO", "TreatmentProtocols"],
    "000A": ["CS", "PlanIntent"],
    "000B": ["LO", "TreatmentSites"],
    "000C": ["CS", "RTPlanGeometry"],
    "000E": ["ST", "PrescriptionDescription"],
    "0010": ["SQ", "DoseReferenceSequence"],
    "0012": ["IS", "DoseReferenceNumber"],
    "0013": ["UI", "DoseReferenceUID"],
    "0014": ["CS", "DoseReferenceStructureType"],
    "0015": ["CS", "NominalBeamEnergyUnit"],
    "0016": ["LO", "DoseReferenceDescription"],
    "0018": ["DS", "DoseReferencePointCoordinates"],
    "001A": ["DS", "NominalPriorDose"],
    "0020": ["CS", "DoseReferenceType"],
    "0021": ["DS", "ConstraintWeight"],
    "0022": ["DS", "DeliveryWarningDose"],
    "0023": ["DS", "DeliveryMaximumDose"],
    "0025": ["DS", "TargetMinimumDose"],
    "0026": ["DS", "TargetPrescriptionDose"],
    "0027": ["DS", "TargetMaximumDose"],
    "0028": ["DS", "TargetUnderdoseVolumeFraction"],
    "002A": ["DS", "OrganAtRiskFullVolumeDose"],
    "002B": ["DS", "OrganAtRiskLimitDose"],
    "002C": ["DS", "OrganAtRiskMaximumDose"],
    "002D": ["DS", "OrganAtRiskOverdoseVolumeFraction"],
    "0040": ["SQ", "ToleranceTableSequence"],
    "0042": ["IS", "ToleranceTableNumber"],
    "0043": ["SH", "ToleranceTableLabel"],
    "0044": ["DS", "GantryAngleTolerance"],
    "0046": ["DS", "BeamLimitingDeviceAngleTolerance"],
    "0048": ["SQ", "BeamLimitingDeviceToleranceSequence"],
    "004A": ["DS", "BeamLimitingDevicePositionTolerance"],
    "004B": ["FL", "SnoutPositionTolerance"],
    "004C": ["DS", "PatientSupportAngleTolerance"],
    "004E": ["DS", "TableTopEccentricAngleTolerance"],
    "004F": ["FL", "TableTopPitchAngleTolerance"],
    "0050": ["FL", "TableTopRollAngleTolerance"],
    "0051": ["DS", "TableTopVerticalPositionTolerance"],
    "0052": ["DS", "TableTopLongitudinalPositionTolerance"],
    "0053": ["DS", "TableTopLateralPositionTolerance"],
    "0055": ["CS", "RTPlanRelationship"],
    "0070": ["SQ", "FractionGroupSequence"],
    "0071": ["IS", "FractionGroupNumber"],
    "0072": ["LO", "FractionGroupDescription"],
    "0078": ["IS", "NumberOfFractionsPlanned"],
    "0079": ["IS", "NumberOfFractionPatternDigitsPerDay"],
    "007A": ["IS", "RepeatFractionCycleLength"],
    "007B": ["LT", "FractionPattern"],
    "0080": ["IS", "NumberOfBeams"],
    "0082": ["DS", "BeamDoseSpecificationPoint"],
    "0084": ["DS", "BeamDose"],
    "0086": ["DS", "BeamMeterset"],
    "0088": ["FL", "BeamDosePointDepth"],
    "0089": ["FL", "BeamDosePointEquivalentDepth"],
    "008A": ["FL", "BeamDosePointSSD"],
    "00A0": ["IS", "NumberOfBrachyApplicationSetups"],
    "00A2": ["DS", "BrachyApplicationSetupDoseSpecificationPoint"],
    "00A4": ["DS", "BrachyApplicationSetupDose"],
    "00B0": ["SQ", "BeamSequence"],
    "00B2": ["SH", "TreatmentMachineName"],
    "00B3": ["CS", "PrimaryDosimeterUnit"],
    "00B4": ["DS", "SourceAxisDistance"],
    "00B6": ["SQ", "BeamLimitingDeviceSequence"],
    "00B8": ["CS", "RTBeamLimitingDeviceType"],
    "00BA": ["DS", "SourceToBeamLimitingDeviceDistance"],
    "00BB": ["FL", "IsocenterToBeamLimitingDeviceDistance"],
    "00BC": ["IS", "NumberOfLeafJawPairs"],
    "00BE": ["DS", "LeafPositionBoundaries"],
    "00C0": ["IS", "BeamNumber"],
    "00C2": ["LO", "BeamName"],
    "00C3": ["ST", "BeamDescription"],
    "00C4": ["CS", "BeamType"],
    "00C6": ["CS", "RadiationType"],
    "00C7": ["CS", "HighDoseTechniqueType"],
    "00C8": ["IS", "ReferenceImageNumber"],
    "00CA": ["SQ", "PlannedVerificationImageSequence"],
    "00CC": ["LO", "ImagingDeviceSpecificAcquisitionParameters"],
    "00CE": ["CS", "TreatmentDeliveryType"],
    "00D0": ["IS", "NumberOfWedges"],
    "00D1": ["SQ", "WedgeSequence"],
    "00D2": ["IS", "WedgeNumber"],
    "00D3": ["CS", "WedgeType"],
    "00D4": ["SH", "WedgeID"],
    "00D5": ["IS", "WedgeAngle"],
    "00D6": ["DS", "WedgeFactor"],
    "00D7": ["FL", "TotalWedgeTrayWaterEquivalentThickness"],
    "00D8": ["DS", "WedgeOrientation"],
    "00D9": ["FL", "IsocenterToWedgeTrayDistance"],
    "00DA": ["DS", "SourceToWedgeTrayDistance"],
    "00DB": ["FL", "WedgeThinEdgePosition"],
    "00DC": ["SH", "BolusID"],
    "00DD": ["ST", "BolusDescription"],
    "00E0": ["IS", "NumberOfCompensators"],
    "00E1": ["SH", "MaterialID"],
    "00E2": ["DS", "TotalCompensatorTrayFactor"],
    "00E3": ["SQ", "CompensatorSequence"],
    "00E4": ["IS", "CompensatorNumber"],
    "00E5": ["SH", "CompensatorID"],
    "00E6": ["DS", "SourceToCompensatorTrayDistance"],
    "00E7": ["IS", "CompensatorRows"],
    "00E8": ["IS", "CompensatorColumns"],
    "00E9": ["DS", "CompensatorPixelSpacing"],
    "00EA": ["DS", "CompensatorPosition"],
    "00EB": ["DS", "CompensatorTransmissionData"],
    "00EC": ["DS", "CompensatorThicknessData"],
    "00ED": ["IS", "NumberOfBoli"],
    "00EE": ["CS", "CompensatorType"],
    "00F0": ["IS", "NumberOfBlocks"],
    "00F2": ["DS", "TotalBlockTrayFactor"],
    "00F3": ["FL", "TotalBlockTrayWaterEquivalentThickness"],
    "00F4": ["SQ", "BlockSequence"],
    "00F5": ["SH", "BlockTrayID"],
    "00F6": ["DS", "SourceToBlockTrayDistance"],
    "00F7": ["FL", "IsocenterToBlockTrayDistance"],
    "00F8": ["CS", "BlockType"],
    "00F9": ["LO", "AccessoryCode"],
    "00FA": ["CS", "BlockDivergence"],
    "00FB": ["CS", "BlockMountingPosition"],
    "00FC": ["IS", "BlockNumber"],
    "00FE": ["LO", "BlockName"],
    "0100": ["DS", "BlockThickness"],
    "0102": ["DS", "BlockTransmission"],
    "0104": ["IS", "BlockNumberOfPoints"],
    "0106": ["DS", "BlockData"],
    "0107": ["SQ", "ApplicatorSequence"],
    "0108": ["SH", "ApplicatorID"],
    "0109": ["CS", "ApplicatorType"],
    "010A": ["LO", "ApplicatorDescription"],
    "010C": ["DS", "CumulativeDoseReferenceCoefficient"],
    "010E": ["DS", "FinalCumulativeMetersetWeight"],
    "0110": ["IS", "NumberOfControlPoints"],
    "0111": ["SQ", "ControlPointSequence"],
    "0112": ["IS", "ControlPointIndex"],
    "0114": ["DS", "NominalBeamEnergy"],
    "0115": ["DS", "DoseRateSet"],
    "0116": ["SQ", "WedgePositionSequence"],
    "0118": ["CS", "WedgePosition"],
    "011A": ["SQ", "BeamLimitingDevicePositionSequence"],
    "011C": ["DS", "LeafJawPositions"],
    "011E": ["DS", "GantryAngle"],
    "011F": ["CS", "GantryRotationDirection"],
    "0120": ["DS", "BeamLimitingDeviceAngle"],
    "0121": ["CS", "BeamLimitingDeviceRotationDirection"],
    "0122": ["DS", "PatientSupportAngle"],
    "0123": ["CS", "PatientSupportRotationDirection"],
    "0124": ["DS", "TableTopEccentricAxisDistance"],
    "0125": ["DS", "TableTopEccentricAngle"],
    "0126": ["CS", "TableTopEccentricRotationDirection"],
    "0128": ["DS", "TableTopVerticalPosition"],
    "0129": ["DS", "TableTopLongitudinalPosition"],
    "012A": ["DS", "TableTopLateralPosition"],
    "012C": ["DS", "IsocenterPosition"],
    "012E": ["DS", "SurfaceEntryPoint"],
    "0130": ["DS", "SourceToSurfaceDistance"],
    "0134": ["DS", "CumulativeMetersetWeight"],
    "0140": ["FL", "TableTopPitchAngle"],
    "0142": ["CS", "TableTopPitchRotationDirection"],
    "0144": ["FL", "TableTopRollAngle"],
    "0146": ["CS", "TableTopRollRotationDirection"],
    "0148": ["FL", "HeadFixationAngle"],
    "014A": ["FL", "GantryPitchAngle"],
    "014C": ["CS", "GantryPitchRotationDirection"],
    "014E": ["FL", "GantryPitchAngleTolerance"],
    "0180": ["SQ", "PatientSetupSequence"],
    "0182": ["IS", "PatientSetupNumber"],
    "0183": ["LO", "PatientSetupLabel"],
    "0184": ["LO", "PatientAdditionalPosition"],
    "0190": ["SQ", "FixationDeviceSequence"],
    "0192": ["CS", "FixationDeviceType"],
    "0194": ["SH", "FixationDeviceLabel"],
    "0196": ["ST", "FixationDeviceDescription"],
    "0198": ["SH", "FixationDevicePosition"],
    "0199": ["FL", "FixationDevicePitchAngle"],
    "019A": ["FL", "FixationDeviceRollAngle"],
    "01A0": ["SQ", "ShieldingDeviceSequence"],
    "01A2": ["CS", "ShieldingDeviceType"],
    "01A4": ["SH", "ShieldingDeviceLabel"],
    "01A6": ["ST", "ShieldingDeviceDescription"],
    "01A8": ["SH", "ShieldingDevicePosition"],
    "01B0": ["CS", "SetupTechnique"],
    "01B2": ["ST", "SetupTechniqueDescription"],
    "01B4": ["SQ", "SetupDeviceSequence"],
    "01B6": ["CS", "SetupDeviceType"],
    "01B8": ["SH", "SetupDeviceLabel"],
    "01BA": ["ST", "SetupDeviceDescription"],
    "01BC": ["DS", "SetupDeviceParameter"],
    "01D0": ["ST", "SetupReferenceDescription"],
    "01D2": ["DS", "TableTopVerticalSetupDisplacement"],
    "01D4": ["DS", "TableTopLongitudinalSetupDisplacement"],
    "01D6": ["DS", "TableTopLateralSetupDisplacement"],
    "0200": ["CS", "BrachyTreatmentTechnique"],
    "0202": ["CS", "BrachyTreatmentType"],
    "0206": ["SQ", "TreatmentMachineSequence"],
    "0210": ["SQ", "SourceSequence"],
    "0212": ["IS", "SourceNumber"],
    "0214": ["CS", "SourceType"],
    "0216": ["LO", "SourceManufacturer"],
    "0218": ["DS", "ActiveSourceDiameter"],
    "021A": ["DS", "ActiveSourceLength"],
    "0222": ["DS", "SourceEncapsulationNominalThickness"],
    "0224": ["DS", "SourceEncapsulationNominalTransmission"],
    "0226": ["LO", "SourceIsotopeName"],
    "0228": ["DS", "SourceIsotopeHalfLife"],
    "0229": ["CS", "SourceStrengthUnits"],
    "022A": ["DS", "ReferenceAirKermaRate"],
    "022B": ["DS", "SourceStrength"],
    "022C": ["DA", "SourceStrengthReferenceDate"],
    "022E": ["TM", "SourceStrengthReferenceTime"],
    "0230": ["SQ", "ApplicationSetupSequence"],
    "0232": ["CS", "ApplicationSetupType"],
    "0234": ["IS", "ApplicationSetupNumber"],
    "0236": ["LO", "ApplicationSetupName"],
    "0238": ["LO", "ApplicationSetupManufacturer"],
    "0240": ["IS", "TemplateNumber"],
    "0242": ["SH", "TemplateType"],
    "0244": ["LO", "TemplateName"],
    "0250": ["DS", "TotalReferenceAirKerma"],
    "0260": ["SQ", "BrachyAccessoryDeviceSequence"],
    "0262": ["IS", "BrachyAccessoryDeviceNumber"],
    "0263": ["SH", "BrachyAccessoryDeviceID"],
    "0264": ["CS", "BrachyAccessoryDeviceType"],
    "0266": ["LO", "BrachyAccessoryDeviceName"],
    "026A": ["DS", "BrachyAccessoryDeviceNominalThickness"],
    "026C": ["DS", "BrachyAccessoryDeviceNominalTransmission"],
    "0280": ["SQ", "ChannelSequence"],
    "0282": ["IS", "ChannelNumber"],
    "0284": ["DS", "ChannelLength"],
    "0286": ["DS", "ChannelTotalTime"],
    "0288": ["CS", "SourceMovementType"],
    "028A": ["IS", "NumberOfPulses"],
    "028C": ["DS", "PulseRepetitionInterval"],
    "0290": ["IS", "SourceApplicatorNumber"],
    "0291": ["SH", "SourceApplicatorID"],
    "0292": ["CS", "SourceApplicatorType"],
    "0294": ["LO", "SourceApplicatorName"],
    "0296": ["DS", "SourceApplicatorLength"],
    "0298": ["LO", "SourceApplicatorManufacturer"],
    "029C": ["DS", "SourceApplicatorWallNominalThickness"],
    "029E": ["DS", "SourceApplicatorWallNominalTransmission"],
    "02A0": ["DS", "SourceApplicatorStepSize"],
    "02A2": ["IS", "TransferTubeNumber"],
    "02A4": ["DS", "TransferTubeLength"],
    "02B0": ["SQ", "ChannelShieldSequence"],
    "02B2": ["IS", "ChannelShieldNumber"],
    "02B3": ["SH", "ChannelShieldID"],
    "02B4": ["LO", "ChannelShieldName"],
    "02B8": ["DS", "ChannelShieldNominalThickness"],
    "02BA": ["DS", "ChannelShieldNominalTransmission"],
    "02C8": ["DS", "FinalCumulativeTimeWeight"],
    "02D0": ["SQ", "BrachyControlPointSequence"],
    "02D2": ["DS", "ControlPointRelativePosition"],
    "02D4": ["DS", "ControlPoint3DPosition"],
    "02D6": ["DS", "CumulativeTimeWeight"],
    "02E0": ["CS", "CompensatorDivergence"],
    "02E1": ["CS", "CompensatorMountingPosition"],
    "02E2": ["DS", "SourceToCompensatorDistance"],
    "02E3": ["FL", "TotalCompensatorTrayWaterEquivalentThickness"],
    "02E4": ["FL", "IsocenterToCompensatorTrayDistance"],
    "02E5": ["FL", "CompensatorColumnOffset"],
    "02E6": ["FL", "IsocenterToCompensatorDistances"],
    "02E7": ["FL", "CompensatorRelativeStoppingPowerRatio"],
    "02E8": ["FL", "CompensatorMillingToolDiameter"],
    "02EA": ["SQ", "IonRangeCompensatorSequence"],
    "02EB": ["LT", "CompensatorDescription"],
    "0302": ["IS", "RadiationMassNumber"],
    "0304": ["IS", "RadiationAtomicNumber"],
    "0306": ["SS", "RadiationChargeState"],
    "0308": ["CS", "ScanMode"],
    "030A": ["FL", "VirtualSourceAxisDistances"],
    "030C": ["SQ", "SnoutSequence"],
    "030D": ["FL", "SnoutPosition"],
    "030F": ["SH", "SnoutID"],
    "0312": ["IS", "NumberOfRangeShifters"],
    "0314": ["SQ", "RangeShifterSequence"],
    "0316": ["IS", "RangeShifterNumber"],
    "0318": ["SH", "RangeShifterID"],
    "0320": ["CS", "RangeShifterType"],
    "0322": ["LO", "RangeShifterDescription"],
    "0330": ["IS", "NumberOfLateralSpreadingDevices"],
    "0332": ["SQ", "LateralSpreadingDeviceSequence"],
    "0334": ["IS", "LateralSpreadingDeviceNumber"],
    "0336": ["SH", "LateralSpreadingDeviceID"],
    "0338": ["CS", "LateralSpreadingDeviceType"],
    "033A": ["LO", "LateralSpreadingDeviceDescription"],
    "033C": ["FL", "LateralSpreadingDeviceWaterEquivalentThickness"],
    "0340": ["IS", "NumberOfRangeModulators"],
    "0342": ["SQ", "RangeModulatorSequence"],
    "0344": ["IS", "RangeModulatorNumber"],
    "0346": ["SH", "RangeModulatorID"],
    "0348": ["CS", "RangeModulatorType"],
    "034A": ["LO", "RangeModulatorDescription"],
    "034C": ["SH", "BeamCurrentModulationID"],
    "0350": ["CS", "PatientSupportType"],
    "0352": ["SH", "PatientSupportID"],
    "0354": ["LO", "PatientSupportAccessoryCode"],
    "0356": ["FL", "FixationLightAzimuthalAngle"],
    "0358": ["FL", "FixationLightPolarAngle"],
    "035A": ["FL", "MetersetRate"],
    "0360": ["SQ", "RangeShifterSettingsSequence"],
    "0362": ["LO", "RangeShifterSetting"],
    "0364": ["FL", "IsocenterToRangeShifterDistance"],
    "0366": ["FL", "RangeShifterWaterEquivalentThickness"],
    "0370": ["SQ", "LateralSpreadingDeviceSettingsSequence"],
    "0372": ["LO", "LateralSpreadingDeviceSetting"],
    "0374": ["FL", "IsocenterToLateralSpreadingDeviceDistance"],
    "0380": ["SQ", "RangeModulatorSettingsSequence"],
    "0382": ["FL", "RangeModulatorGatingStartValue"],
    "0384": ["FL", "RangeModulatorGatingStopValue"],
    "0386": ["FL", "RangeModulatorGatingStartWaterEquivalentThickness"],
    "0388": ["FL", "RangeModulatorGatingStopWaterEquivalentThickness"],
    "038A": ["FL", "IsocenterToRangeModulatorDistance"],
    "0390": ["SH", "ScanSpotTuneID"],
    "0392": ["IS", "NumberOfScanSpotPositions"],
    "0394": ["FL", "ScanSpotPositionMap"],
    "0396": ["FL", "ScanSpotMetersetWeights"],
    "0398": ["FL", "ScanningSpotSize"],
    "039A": ["IS", "NumberOfPaintings"],
    "03A0": ["SQ", "IonToleranceTableSequence"],
    "03A2": ["SQ", "IonBeamSequence"],
    "03A4": ["SQ", "IonBeamLimitingDeviceSequence"],
    "03A6": ["SQ", "IonBlockSequence"],
    "03A8": ["SQ", "IonControlPointSequence"],
    "03AA": ["SQ", "IonWedgeSequence"],
    "03AC": ["SQ", "IonWedgePositionSequence"],
    "0401": ["SQ", "ReferencedSetupImageSequence"],
    "0402": ["ST", "SetupImageComment"],
    "0410": ["SQ", "MotionSynchronizationSequence"],
    "0412": ["FL", "ControlPointOrientation"],
    "0420": ["SQ", "GeneralAccessorySequence"],
    "0421": ["SH", "GeneralAccessoryID"],
    "0422": ["ST", "GeneralAccessoryDescription"],
    "0423": ["CS", "GeneralAccessoryType"],
    "0424": ["IS", "GeneralAccessoryNumber"],
    "0431": ["SQ", "ApplicatorGeometrySequence"],
    "0432": ["CS", "ApplicatorApertureShape"],
    "0433": ["FL", "ApplicatorOpening"],
    "0434": ["FL", "ApplicatorOpeningX"],
    "0435": ["FL", "ApplicatorOpeningY"],
    "0436": ["FL", "SourceToApplicatorMountingPositionDistance"]
  },
  "300C": {
    "0002": ["SQ", "ReferencedRTPlanSequence"],
    "0004": ["SQ", "ReferencedBeamSequence"],
    "0006": ["IS", "ReferencedBeamNumber"],
    "0007": ["IS", "ReferencedReferenceImageNumber"],
    "0008": ["DS", "StartCumulativeMetersetWeight"],
    "0009": ["DS", "EndCumulativeMetersetWeight"],
    "000A": ["SQ", "ReferencedBrachyApplicationSetupSequence"],
    "000C": ["IS", "ReferencedBrachyApplicationSetupNumber"],
    "000E": ["IS", "ReferencedSourceNumber"],
    "0020": ["SQ", "ReferencedFractionGroupSequence"],
    "0022": ["IS", "ReferencedFractionGroupNumber"],
    "0040": ["SQ", "ReferencedVerificationImageSequence"],
    "0042": ["SQ", "ReferencedReferenceImageSequence"],
    "0050": ["SQ", "ReferencedDoseReferenceSequence"],
    "0051": ["IS", "ReferencedDoseReferenceNumber"],
    "0055": ["SQ", "BrachyReferencedDoseReferenceSequence"],
    "0060": ["SQ", "ReferencedStructureSetSequence"],
    "006A": ["IS", "ReferencedPatientSetupNumber"],
    "0080": ["SQ", "ReferencedDoseSequence"],
    "00A0": ["IS", "ReferencedToleranceTableNumber"],
    "00B0": ["SQ", "ReferencedBolusSequence"],
    "00C0": ["IS", "ReferencedWedgeNumber"],
    "00D0": ["IS", "ReferencedCompensatorNumber"],
    "00E0": ["IS", "ReferencedBlockNumber"],
    "00F0": ["IS", "ReferencedControlPointIndex"],
    "00F2": ["SQ", "ReferencedControlPointSequence"],
    "00F4": ["IS", "ReferencedStartControlPointIndex"],
    "00F6": ["IS", "ReferencedStopControlPointIndex"],
    "0100": ["IS", "ReferencedRangeShifterNumber"],
    "0102": ["IS", "ReferencedLateralSpreadingDeviceNumber"],
    "0104": ["IS", "ReferencedRangeModulatorNumber"]
  },
  "300E": {
    "0002": ["CS", "ApprovalStatus"],
    "0004": ["DA", "ReviewDate"],
    "0005": ["TM", "ReviewTime"],
    "0008": ["PN", "ReviewerName"]
  },
  "4000": {
    "0010": ["LT", "Arbitrary"],
    "4000": ["LT", "TextComments"]
  },
  "4008": {
    "0040": ["SH", "ResultsID"],
    "0042": ["LO", "ResultsIDIssuer"],
    "0050": ["SQ", "ReferencedInterpretationSequence"],
    "00FF": ["CS", "ReportProductionStatusTrial"],
    "0100": ["DA", "InterpretationRecordedDate"],
    "0101": ["TM", "InterpretationRecordedTime"],
    "0102": ["PN", "InterpretationRecorder"],
    "0103": ["LO", "ReferenceToRecordedSound"],
    "0108": ["DA", "InterpretationTranscriptionDate"],
    "0109": ["TM", "InterpretationTranscriptionTime"],
    "010A": ["PN", "InterpretationTranscriber"],
    "010B": ["ST", "InterpretationText"],
    "010C": ["PN", "InterpretationAuthor"],
    "0111": ["SQ", "InterpretationApproverSequence"],
    "0112": ["DA", "InterpretationApprovalDate"],
    "0113": ["TM", "InterpretationApprovalTime"],
    "0114": ["PN", "PhysicianApprovingInterpretation"],
    "0115": ["LT", "InterpretationDiagnosisDescription"],
    "0117": ["SQ", "InterpretationDiagnosisCodeSequence"],
    "0118": ["SQ", "ResultsDistributionListSequence"],
    "0119": ["PN", "DistributionName"],
    "011A": ["LO", "DistributionAddress"],
    "0200": ["SH", "InterpretationID"],
    "0202": ["LO", "InterpretationIDIssuer"],
    "0210": ["CS", "InterpretationTypeID"],
    "0212": ["CS", "InterpretationStatusID"],
    "0300": ["ST", "Impressions"],
    "4000": ["ST", "ResultsComments"]
  },
  "4010": {
    "0001": ["CS", "LowEnergyDetectors"],
    "0002": ["CS", "HighEnergyDetectors"],
    "0004": ["SQ", "DetectorGeometrySequence"],
    "1001": ["SQ", "ThreatROIVoxelSequence"],
    "1004": ["FL", "ThreatROIBase"],
    "1005": ["FL", "ThreatROIExtents"],
    "1006": ["OB", "ThreatROIBitmap"],
    "1007": ["SH", "RouteSegmentID"],
    "1008": ["CS", "GantryType"],
    "1009": ["CS", "OOIOwnerType"],
    "100A": ["SQ", "RouteSegmentSequence"],
    "1010": ["US", "PotentialThreatObjectID"],
    "1011": ["SQ", "ThreatSequence"],
    "1012": ["CS", "ThreatCategory"],
    "1013": ["LT", "ThreatCategoryDescription"],
    "1014": ["CS", "ATDAbilityAssessment"],
    "1015": ["CS", "ATDAssessmentFlag"],
    "1016": ["FL", "ATDAssessmentProbability"],
    "1017": ["FL", "Mass"],
    "1018": ["FL", "Density"],
    "1019": ["FL", "ZEffective"],
    "101A": ["SH", "BoardingPassID"],
    "101B": ["FL", "CenterOfMass"],
    "101C": ["FL", "CenterOfPTO"],
    "101D": ["FL", "BoundingPolygon"],
    "101E": ["SH", "RouteSegmentStartLocationID"],
    "101F": ["SH", "RouteSegmentEndLocationID"],
    "1020": ["CS", "RouteSegmentLocationIDType"],
    "1021": ["CS", "AbortReason"],
    "1023": ["FL", "VolumeOfPTO"],
    "1024": ["CS", "AbortFlag"],
    "1025": ["DT", "RouteSegmentStartTime"],
    "1026": ["DT", "RouteSegmentEndTime"],
    "1027": ["CS", "TDRType"],
    "1028": ["CS", "InternationalRouteSegment"],
    "1029": ["LO", "ThreatDetectionAlgorithmandVersion"],
    "102A": ["SH", "AssignedLocation"],
    "102B": ["DT", "AlarmDecisionTime"],
    "1031": ["CS", "AlarmDecision"],
    "1033": ["US", "NumberOfTotalObjects"],
    "1034": ["US", "NumberOfAlarmObjects"],
    "1037": ["SQ", "PTORepresentationSequence"],
    "1038": ["SQ", "ATDAssessmentSequence"],
    "1039": ["CS", "TIPType"],
    "103A": ["CS", "DICOSVersion"],
    "1041": ["DT", "OOIOwnerCreationTime"],
    "1042": ["CS", "OOIType"],
    "1043": ["FL", "OOISize"],
    "1044": ["CS", "AcquisitionStatus"],
    "1045": ["SQ", "BasisMaterialsCodeSequence"],
    "1046": ["CS", "PhantomType"],
    "1047": ["SQ", "OOIOwnerSequence"],
    "1048": ["CS", "ScanType"],
    "1051": ["LO", "ItineraryID"],
    "1052": ["SH", "ItineraryIDType"],
    "1053": ["LO", "ItineraryIDAssigningAuthority"],
    "1054": ["SH", "RouteID"],
    "1055": ["SH", "RouteIDAssigningAuthority"],
    "1056": ["CS", "InboundArrivalType"],
    "1058": ["SH", "CarrierID"],
    "1059": ["CS", "CarrierIDAssigningAuthority"],
    "1060": ["FL", "SourceOrientation"],
    "1061": ["FL", "SourcePosition"],
    "1062": ["FL", "BeltHeight"],
    "1064": ["SQ", "AlgorithmRoutingCodeSequence"],
    "1067": ["CS", "TransportClassification"],
    "1068": ["LT", "OOITypeDescriptor"],
    "1069": ["FL", "TotalProcessingTime"],
    "106C": ["OB", "DetectorCalibrationData"]
  }
};
const getVR = (group, element) => {
  let vr;
  let elementData;
  let groupData;
  groupData = dict[dec2hex$1(group)];
  if (groupData) {
    elementData = groupData[dec2hex$1(element)];
    if (elementData) {
      [vr] = elementData;
    } else if (element === 0) {
      vr = "UL";
    }
  }
  if (!vr) {
    groupData = dictPrivate[dec2hex$1(group)];
    if (groupData) {
      elementData = groupData[dec2hex$1(element)];
      if (elementData) {
        [vr] = elementData;
      }
    }
  }
  if (!vr) {
    vr = "OB";
  }
  return vr;
};
const getDescription = (group, element) => {
  let des;
  let elementData;
  let groupData;
  groupData = dict[dec2hex$1(group)];
  if (groupData) {
    elementData = groupData[dec2hex$1(element)];
    if (elementData) {
      [, des] = elementData;
    } else if (element === 0) {
      des = `Group ${dec2hex$1(group)} Length`;
    }
  }
  if (!des) {
    groupData = dictPrivate[dec2hex$1(group)];
    if (groupData) {
      elementData = groupData[dec2hex$1(element)];
      if (elementData) {
        [, des] = elementData;
      }
    }
  }
  if (!des) {
    des = "PrivateData";
  }
  return des;
};
var Dictionary = {
  getVR,
  getDescription
};
const CSA2_MAGIC_NUMBER = [83, 86, 49, 48];
const NAME_LENGTH = 64;
const ELEMENT_CSA1 = 4112;
const ELEMENT_CSA2 = 4128;
const GROUP_CSA = 41;
class Siemens {
  constructor(buffer) {
    this.canRead = (group, element) => group === GROUP_CSA && (element === ELEMENT_CSA1 || element === ELEMENT_CSA2);
    this.output = "";
    this.data = new DataView(buffer, 0);
  }
  readHeader() {
    let match;
    try {
      if (this.data.byteLength > CSA2_MAGIC_NUMBER.length) {
        match = true;
        const {
          data
        } = this;
        for (let ctr = 0; ctr < CSA2_MAGIC_NUMBER.length; ctr += 1) {
          match = match && data.getUint8(ctr) === CSA2_MAGIC_NUMBER[ctr];
        }
        if (match) {
          this.readHeaderAtOffset(CSA2_MAGIC_NUMBER.length + 4);
        } else {
          this.readHeaderAtOffset(0);
        }
      }
    } catch (error) {
      console.log(error);
    }
    return this.output;
  }
  readHeaderAtOffset(offset) {
    this.output += "\n";
    const numTags = swap32(this.data.getUint32(offset));
    if (numTags < 1 || numTags > 128) {
      return this.output;
    }
    let newOffset = offset + 4;
    newOffset += 4;
    for (let ctr = 0; ctr < numTags; ctr += 1) {
      newOffset = this.readTag(newOffset);
      if (offset === -1) {
        break;
      }
    }
    return this.output;
  }
  readTag(offset) {
    const name = this.readString(offset, NAME_LENGTH);
    let newOffset = offset + NAME_LENGTH;
    newOffset += 4;
    newOffset += 4;
    newOffset += 4;
    const numItems = swap32(this.data.getUint32(offset));
    newOffset += 4;
    newOffset += 4;
    this.output += `    ${name}=`;
    for (let ctr = 0; ctr < numItems; ctr += 1) {
      newOffset = this.readItem(newOffset);
      if (newOffset === -1) {
        break;
      } else if (newOffset % 4 !== 0) {
        newOffset += 4 - newOffset % 4;
      }
    }
    this.output += "\n";
    return offset;
  }
  readString(offset, length) {
    let str = "";
    for (let ctr = 0; ctr < length; ctr += 1) {
      const char2 = this.data.getUint8(offset + ctr);
      if (char2 === 0) {
        break;
      }
      str += String.fromCharCode(char2);
    }
    return str;
  }
  readItem(offset) {
    const itemLength = swap32(this.data.getUint32(offset));
    if (offset + itemLength > this.data.byteLength) {
      return -1;
    }
    const newOffset = offset + 16;
    if (itemLength > 0) {
      this.output += `${this.readString(newOffset, itemLength)} `;
    }
    return newOffset + itemLength;
  }
}
const PRIVATE_DATA_READERS = [Siemens];
const TagIds = {
  TransferSyntax: [2, 16],
  MetaLength: [2, 0],
  SublistItem: [65534, 57344],
  SublistItemDelim: [65534, 57357],
  SequenceDelim: [65534, 57565],
  Rows: [40, 16],
  Cols: [40, 17],
  AcquisitionMatrix: [24, 4880],
  NumberOfFrames: [40, 8],
  NumberTemporalPositions: [32, 261],
  PixelSpacing: [40, 48],
  SliceThickness: [24, 80],
  SliceGap: [24, 136],
  Tr: [24, 128],
  FrameTime: [24, 4195],
  BitsAllocated: [40, 256],
  BitsStored: [40, 257],
  PixelRepresentation: [40, 259],
  PixelPaddingValue: [40, 288],
  HighBit: [40, 258],
  PhotometricInterpretation: [40, 4],
  SamplesPerPixel: [40, 2],
  PlanarConfig: [40, 6],
  PaletteRedDescriptor: [40, 4353],
  PaletteRed: [40, 4609],
  PaletteGreen: [40, 4610],
  PaletteBlue: [40, 4611],
  DataScaleSlope: [40, 4179],
  DataScaleIntercept: [40, 4178],
  DataScaleElscint: [519, 4127],
  PixelBandwidth: [24, 149],
  VoiLutSequence: [40, 12304],
  VoiLutDescriptor: [40, 12290],
  VoiLutData: [40, 12294],
  ImageMin: [40, 262],
  ImageMax: [40, 263],
  WindowCenter: [40, 4176],
  WindowWidth: [40, 4177],
  Charset: [8, 5],
  PatientName: [16, 16],
  PatientId: [16, 32],
  StudyDate: [8, 32],
  StudyTime: [8, 48],
  StudyDes: [8, 4144],
  ImageType: [8, 8],
  ImageComments: [32, 16384],
  SequenceName: [24, 36],
  Modality: [8, 96],
  FrameOfRefUid: [32, 82],
  StudyUid: [32, 13],
  SeriesDescription: [8, 4158],
  SeriesInstanceUid: [32, 14],
  SeriesNumber: [32, 17],
  EchoNumber: [24, 134],
  TemporalPosition: [32, 256],
  ImageNum: [32, 19],
  SliceLocation: [32, 4161],
  ImageOrientation: [32, 55],
  ImagePosition: [32, 50],
  SliceLocationVector: [24, 8197],
  LutShape: [8272, 32],
  PixelData: [32736, 16]
};
const createTagId = (group, element) => {
  const groupStr = dec2hex(group);
  const elemStr = dec2hex(element);
  return groupStr + elemStr;
};
const VRMaxLength = {
  AE: 16,
  AS: 4,
  AT: 4,
  CS: 16,
  DA: 8,
  DS: 16,
  DT: 26,
  FL: 4,
  FD: 8,
  IS: 12,
  LO: 64,
  LT: 10240,
  OB: -1,
  OD: -1,
  OF: -1,
  OW: -1,
  PN: 64 * 5,
  SH: 16,
  SL: 4,
  SS: 2,
  ST: 1024,
  TM: 16,
  UI: 64,
  UL: 4,
  UN: -1,
  US: 2,
  UT: -1
};
const createTagIdWithTag = ([group, element]) => {
  const groupStr = dec2hex(group);
  const elemStr = dec2hex(element);
  return groupStr + elemStr;
};
const getUnsignedInteger16 = (rawData, littleEndian) => {
  const data = [];
  const mul = rawData.byteLength / 2;
  for (let ctr = 0; ctr < mul; ctr += 1) {
    data[ctr] = rawData.getUint16(ctr * 2, littleEndian);
  }
  return data;
};
const getSignedInteger16 = (rawData, littleEndian) => {
  const data = [];
  const mul = rawData.byteLength / 2;
  for (let ctr = 0; ctr < mul; ctr += 1) {
    data[ctr] = rawData.getInt16(ctr * 2, littleEndian);
  }
  return data;
};
const getFloat32 = (rawData, littleEndian) => {
  const data = [];
  const mul = rawData.byteLength / 4;
  for (let ctr = 0; ctr < mul; ctr += 1) {
    data[ctr] = rawData.getFloat32(ctr * 4, littleEndian);
  }
  return data;
};
const getSignedInteger32 = (rawData, littleEndian) => {
  const data = [];
  const mul = rawData.byteLength / 4;
  for (let ctr = 0; ctr < mul; ctr += 1) {
    data[ctr] = rawData.getInt32(ctr * 4, littleEndian);
  }
  return data;
};
const getUnsignedInteger32 = (rawData, littleEndian) => {
  const data = [];
  const mul = rawData.byteLength / 4;
  for (let ctr = 0; ctr < mul; ctr += 1) {
    data[ctr] = rawData.getUint32(ctr * 4, littleEndian);
  }
  return data;
};
const getFloat64 = (rawData, littleEndian) => {
  if (rawData.byteLength < 8) {
    return [0];
  }
  const data = [];
  const mul = rawData.byteLength / 8;
  for (let ctr = 0; ctr < mul; ctr += 1) {
    data[ctr] = rawData.getFloat64(ctr * 8, littleEndian);
  }
  return data;
};
const getDoubleElscint = (rawData, littleEndian) => {
  const data = Array(8);
  if (littleEndian) {
    for (let ctr = 0; ctr < 8; ctr += 1) {
      data[ctr] = rawData.getUint8(ctr);
    }
  } else {
    for (let ctr = 0; ctr < 8; ctr += 1) {
      data[ctr] = rawData.getUint8(7 - ctr);
    }
  }
  const reordered = [data[3], data[2], data[1], data[0], data[7], data[6], data[5], data[4]];
  return [bytesToDouble(reordered)];
};
const getFixedLengthStringValue = (rawData, maxLength, charset, vr) => {
  const mul = Math.floor(rawData.byteLength / maxLength);
  const data = Array(mul);
  for (let ctr = 0; ctr < mul; ctr += 1) {
    data[ctr] = getStringAt(rawData, ctr * maxLength, maxLength, charset, vr);
  }
  return data;
};
const getStringValue = (rawData, charset, vr) => {
  const data = getStringAt(rawData, 0, rawData.byteLength, charset, vr).split("\\");
  for (let ctr = 0; ctr < data.length; ctr += 1) {
    data[ctr] = data[ctr].trim();
  }
  return data;
};
const getSingleStringValue = (rawData, maxLength = 0, charset, vr) => {
  const len = Math.min(rawData.byteLength, maxLength);
  return [getStringAt(rawData, 0, len, charset, vr).trim()];
};
const getDateStringValue = (rawData) => {
  const dotFormat = getSingleStringValue(rawData)[0].indexOf(".") !== -1;
  const stringData = getFixedLengthStringValue(rawData, dotFormat ? 10 : VRMaxLength.DA);
  let parts = null;
  const data = [];
  for (let ctr = 0; ctr < stringData.length; ctr += 1) {
    if (dotFormat) {
      parts = stringData[ctr].split(".");
      if (parts.length === 3) {
        data[ctr] = new Date(safeParseInt(parts[0]), safeParseInt(parts[1]) - 1, safeParseInt(parts[2]));
      } else {
        data[ctr] = new Date();
      }
    } else if (stringData[ctr].length === 8) {
      data[ctr] = new Date(safeParseInt(stringData[ctr].substring(0, 4)), safeParseInt(stringData[ctr].substring(4, 6)) - 1, safeParseInt(stringData[ctr].substring(6, 8)));
    } else {
      data[ctr] = Date.parse(stringData[ctr]);
    }
    if (!isValidDate(data[ctr])) {
      data[ctr] = stringData[ctr];
    }
  }
  return data;
};
const getDateTimeStringValue = (rawData) => {
  const stringData = getStringValue(rawData);
  const data = [];
  let year = 0;
  let month = 0;
  let date = 0;
  let hours = 0;
  let minutes = 0;
  let seconds = 0;
  for (let ctr = 0; ctr < stringData.length; ctr += 1) {
    const str = stringData[ctr];
    const strLen = str.length;
    if (strLen >= 4) {
      year = parseInt(str.substring(0, 4), 10);
      if (strLen >= 6) {
        month = safeParseInt(str.substring(4, 6)) - 1;
      }
      if (strLen >= 8) {
        date = safeParseInt(str.substring(6, 8));
      }
      if (strLen >= 10) {
        hours = safeParseInt(str.substring(8, 10));
      }
      if (strLen >= 12) {
        minutes = safeParseInt(str.substring(10, 12));
      }
      if (strLen >= 14) {
        seconds = safeParseInt(str.substring(12, 14));
      }
      data[ctr] = new Date(year, month, date, hours, minutes, seconds);
    } else {
      data[ctr] = Date.parse(str);
    }
    if (!isValidDate(data[ctr])) {
      data[ctr] = str;
    }
  }
  return data;
};
const getTimeStringValue = (rawData, ms = false) => {
  const stringData = getStringValue(rawData);
  const data = [];
  if (ms) {
    let parts = null;
    let hours = 0;
    let minutes = 0;
    let seconds = 0;
    for (let ctr = 0; ctr < stringData.length; ctr += 1) {
      if (stringData[ctr].indexOf(":") !== -1) {
        parts = stringData[ctr].split(":");
        hours = safeParseInt(parts[0]);
        if (parts.length > 1) {
          minutes = safeParseInt(parts[1]);
        }
        if (parts.length > 2) {
          seconds = safeParseFloat(parts[2]);
        }
      } else {
        if (stringData[ctr].length >= 2) {
          hours = safeParseInt(stringData[ctr].substring(0, 2));
        }
        if (stringData[ctr].length >= 4) {
          minutes = safeParseInt(stringData[ctr].substring(2, 4));
        }
        if (stringData[ctr].length >= 6) {
          seconds = safeParseFloat(stringData[ctr].substring(4));
        }
      }
      data[ctr] = Math.round(hours * 60 * 60 * 1e3 + minutes * 60 * 1e3 + seconds * 1e3);
    }
    return data;
  }
  return stringData;
};
const getDoubleStringValue = (rawData) => {
  const stringData = getStringValue(rawData);
  const data = [];
  for (let ctr = 0; ctr < stringData.length; ctr += 1) {
    data[ctr] = parseFloat(stringData[ctr]);
  }
  return data;
};
const getIntegerStringValue = (rawData) => {
  const stringData = getStringValue(rawData);
  const data = [];
  for (let ctr = 0; ctr < stringData.length; ctr += 1) {
    data[ctr] = parseInt(stringData[ctr], 10);
  }
  return data;
};
const getPersonNameStringValue = (rawData, charset, vr) => {
  const stringData = getStringValue(rawData, charset, vr);
  const data = Array(stringData.length);
  for (let ctr = 0; ctr < stringData.length; ctr += 1) {
    data[ctr] = stringData[ctr].replace("^", " ");
  }
  return data;
};
const convertPrivateValue = (group, element, rawData) => {
  let privReader;
  for (let ctr = 0; ctr < PRIVATE_DATA_READERS.length; ctr += 1) {
    privReader = new PRIVATE_DATA_READERS[ctr](rawData.buffer);
    if (privReader.canRead(group, element)) {
      return privReader.readHeader();
    }
  }
  return rawData;
};
const convertValue = (vr, rawData, littleEndian, charset) => {
  let data = null;
  switch (vr) {
    case "AE":
      data = getSingleStringValue(rawData, VRMaxLength.AE);
      break;
    case "AS":
      data = getFixedLengthStringValue(rawData, VRMaxLength.AS);
      break;
    case "AT":
      data = getUnsignedInteger16(rawData, littleEndian);
      break;
    case "CS":
      data = getStringValue(rawData);
      break;
    case "DA":
      data = getDateStringValue(rawData);
      break;
    case "DS":
      data = getDoubleStringValue(rawData);
      break;
    case "DT":
      data = getDateTimeStringValue(rawData);
      break;
    case "FL":
      data = getFloat32(rawData, littleEndian);
      break;
    case "FD":
      data = getFloat64(rawData, littleEndian);
      break;
    case "FE":
      data = getDoubleElscint(rawData, littleEndian);
      break;
    case "IS":
      data = getIntegerStringValue(rawData);
      break;
    case "LO":
      data = getStringValue(rawData, charset, vr);
      break;
    case "LT":
      data = getSingleStringValue(rawData, VRMaxLength.AT);
      break;
    case "OB":
    case "OD":
    case "OF":
    case "OW":
      data = rawData;
      break;
    case "PN":
      data = getPersonNameStringValue(rawData, charset, vr);
      break;
    case "SH":
      data = getStringValue(rawData, charset, vr);
      break;
    case "SL":
      data = getSignedInteger32(rawData, littleEndian);
      break;
    case "SQ":
      data = null;
      break;
    case "SS":
      data = getSignedInteger16(rawData, littleEndian);
      break;
    case "ST":
      data = getSingleStringValue(rawData, VRMaxLength.ST);
      break;
    case "TM":
      data = getTimeStringValue(rawData);
      break;
    case "UI":
      data = getStringValue(rawData);
      break;
    case "UL":
      data = getUnsignedInteger32(rawData, littleEndian);
      break;
    case "UN":
      data = rawData;
      break;
    case "US":
      data = getUnsignedInteger16(rawData, littleEndian);
      break;
    case "UT":
      data = getSingleStringValue(rawData, Number.MAX_SAFE_INTEGER, charset, vr);
      break;
  }
  return data;
};
class Tag {
  constructor({
    group,
    element,
    vr = null,
    value = null,
    offsetStart = null,
    offsetValue = null,
    offsetEnd = null,
    littleEndian = true,
    charset = null
  }) {
    this.group = group;
    this.element = element;
    this.vr = vr;
    this.offsetStart = offsetStart;
    this.offsetValue = offsetValue;
    this.offsetEnd = offsetEnd;
    this.sublist = false;
    this.preformatted = false;
    this.id = createTagId(group, element);
    this.littleEndian = littleEndian;
    this.charset = charset;
    this.rawValue = value;
    if (value instanceof Array) {
      this.sublist = true;
      this.rawValue = value;
      this.convertedValue = value;
    }
  }
  static isEqual({
    group,
    element
  }, tagId) {
    return group === tagId[0] && element === tagId[1];
  }
  hasValue() {
    return this.rawValue !== null;
  }
  get value() {
    return this.convertedValue || this.getConvertedValue();
  }
  getConvertedValue() {
    if (this.rawValue === null) {
      return null;
    }
    const {
      rawValue,
      vr,
      littleEndian,
      charset,
      group,
      element
    } = this;
    const dv = rawValue;
    let convertedValue = convertValue(vr, dv, littleEndian, charset);
    if (convertedValue === dv && this.isPrivateData()) {
      convertedValue = convertPrivateValue(group, element, dv);
      this.preformatted = convertedValue !== dv;
    }
    this.convertedValue = convertedValue;
    return convertedValue;
  }
  is([group, element]) {
    return this.group === group && this.element === element;
  }
  isPrivateData() {
    return (this.group & 1) === 1;
  }
  hasInterpretedPrivateData() {
    return this.isPrivateData() && isString(this.value);
  }
  toString(level = 0, html = false) {
    let valueStr = "";
    const groupStr = dec2hex(this.group);
    const elemStr = dec2hex(this.element);
    let tagStr = `(${groupStr},${elemStr})`;
    let des = "";
    let padding;
    padding = "";
    for (let ctr = 0; ctr < level; ctr += 1) {
      if (html) {
        padding += "&nbsp;&nbsp;";
      } else {
        padding += "  ";
      }
    }
    if (this.sublist) {
      const value = this.value;
      for (let ctr = 0; ctr < value.length; ctr += 1) {
        const tag = value[ctr];
        valueStr += `
${tag.toString(level + 1, html)}`;
      }
    } else if (this.vr === "SQ" || this.is(TagIds.PixelData) || !this.value) {
      valueStr = "";
    } else if (html && this.preformatted) {
      valueStr = `[<pre>${this.value}</pre>]`;
    } else {
      valueStr = `[${this.value}]`;
    }
    if (this.is(TagIds.SublistItem)) {
      tagStr = "Sequence Item";
    } else if (this.is(TagIds.SublistItemDelim)) {
      tagStr = "Sequence Item Delimiter";
    } else if (this.is(TagIds.SequenceDelim)) {
      tagStr = "Sequence Delimiter";
    } else if (this.is(TagIds.PixelData)) {
      tagStr = "Pixel Data";
    } else {
      des = convertCamcelCaseToTitleCase(Dictionary.getDescription(this.group, this.element));
    }
    if (html) {
      return `${padding}<span style='color:#B5CBD3'>${tagStr}</span>&nbsp;&nbsp;&nbsp;${des}&nbsp;&nbsp;&nbsp;${valueStr}`;
    }
    return `${padding} ${tagStr} ${des} ${valueStr}`;
  }
  toHTMLString(level = 0) {
    return this.toString(level, true);
  }
  toObject() {
    const {
      id,
      group,
      element,
      vr,
      value,
      offsetStart,
      offsetValue,
      offsetEnd,
      sublist,
      preformatted
    } = this;
    return {
      id,
      group,
      element,
      vr,
      value,
      offsetStart,
      offsetValue,
      offsetEnd,
      sublist,
      preformatted
    };
  }
}
const lutInfoFromImage = (image) => {
  const lutDescriptor = image.getTagValue(TagIds.VoiLutDescriptor);
  if ((lutDescriptor === null || lutDescriptor === void 0 ? void 0 : lutDescriptor.length) !== 3) {
    return null;
  }
  const [nEntries, firstValue, bitsStored] = lutDescriptor;
  if (nEntries === 0 || nEntries >= 2 ** bitsStored - 1) {
    return null;
  }
  let ArrayType = Uint8Array;
  if (bitsStored > 8) {
    ArrayType = Uint16Array;
  }
  const lutDataTagValue = image.getTagValue(TagIds.VoiLutData);
  if (!lutDataTagValue) {
    return null;
  }
  const data = new ArrayType(lutDataTagValue, 0, Math.min(lutDescriptor[0] || 2 ** 16, lutDataTagValue.length));
  return {
    nEntries,
    firstValue,
    bitsStored,
    data
  };
};
const paletteInfoFromImage = (info) => {
  const {
    image
  } = info;
  const reds = image.getTagValue(TagIds.PaletteRed);
  const greens = image.getTagValue(TagIds.PaletteGreen);
  const blues = image.getTagValue(TagIds.PaletteBlue);
  if ((reds === null || reds === void 0 ? void 0 : reds.byteLength) > 0 && (greens === null || greens === void 0 ? void 0 : greens.byteLength) > 0 && (blues === null || blues === void 0 ? void 0 : blues.byteLength) > 0) {
    const paletteInfo = image.getTagValue(TagIds.PaletteRedDescriptor);
    const [nEntries, , bitsAllocated] = paletteInfo;
    return {
      nEntries,
      bitsAllocated,
      r: reds,
      g: greens,
      b: blues
    };
  }
  return null;
};
const displayInfoFromDecoderInfo = (info) => {
  const {
    image
  } = info;
  let invert = image.getTagValueIndexed(TagIds.LutShape) === "inverse";
  invert = invert || image.photometricInterpretation === "MONOCHROME1";
  const displayInfo = {
    ...info,
    nFrames: image.numberOfFrames || 1,
    pixelPaddingVal: image.pixelPaddingValue,
    lut: lutInfoFromImage(info.image),
    palette: paletteInfoFromImage(info),
    minPixVal: image.imageMin,
    maxPixVal: image.imageMax,
    windowCenter: image.windowCenter,
    windowWidth: image.windowWidth,
    slope: image.dataScaleSlope || 1,
    intercept: image.dataScaleIntercept || 0,
    invert
  };
  return displayInfo;
};
class FrameInfo {
  constructor(info) {
    this.imageInfo = info.imageInfo;
    this.frameNo = info.frameNo;
    this.texture = info.texture;
    this.gl = info.gl;
  }
  destroy() {
    this.gl.deleteTexture(this.texture);
  }
}
class Decoder {
  constructor(image) {
    this.image = displayInfoFromDecoderInfo(image);
    this.outputSize = image.size;
  }
  getFrame(gl, frameNo) {
    try {
      const _this = this;
      return Promise.resolve(_this.createTexture(gl, frameNo)).then(function(texture) {
        return new FrameInfo({
          imageInfo: _this.image,
          frameNo,
          gl,
          texture
        });
      });
    } catch (e) {
      return Promise.reject(e);
    }
  }
  decode(frameNo) {
    const {
      data,
      nFrames
    } = this.image;
    const bytesPerFrame = data.byteLength / nFrames;
    const dv = new DataView(data.buffer, data.byteOffset + bytesPerFrame * frameNo, bytesPerFrame);
    return Promise.resolve(dv);
  }
  createTexture(gl, frameNo) {
    try {
      const _this2 = this;
      return Promise.resolve(_this2.decode(frameNo)).then(function(pixelData) {
        const buffer = new Uint8Array(pixelData.buffer, pixelData.byteOffset, pixelData.byteLength);
        let {
          height
        } = _this2.outputSize;
        const {
          width
        } = _this2.outputSize;
        const {
          image
        } = _this2;
        let format = gl.LUMINANCE_ALPHA;
        let internalFormat = gl.LUMINANCE_ALPHA;
        if (image.rgb && !image.planar && !image.palette) {
          format = gl.RGB;
          internalFormat = gl.RGB;
        } else if (image.bytesAllocated === 1) {
          format = gl.LUMINANCE;
          internalFormat = gl.LUMINANCE;
        }
        if (image.planar) {
          height *= image.samples;
        }
        return Promise.resolve(createTexture(gl, {
          src: buffer,
          width,
          height,
          format,
          internalFormat,
          type: gl.UNSIGNED_BYTE,
          min: gl.NEAREST,
          mag: gl.NEAREST,
          wrap: gl.CLAMP_TO_EDGE
        }));
      });
    } catch (e) {
      return Promise.reject(e);
    }
  }
}
function decode8(frameInfo, dataView) {
  const {
    samples,
    size
  } = frameInfo;
  const nPixels = size.numberOfPixels;
  const decoded = new ArrayBuffer(nPixels * samples);
  const data = new Uint8Array(dataView.buffer, dataView.byteOffset, dataView.byteLength);
  const out = new Uint8Array(decoded);
  let outIndex = 0;
  const numSegments = dataView.getInt32(0, true);
  const endOfSegment = nPixels * numSegments;
  for (let s = 0; s < numSegments; ++s) {
    outIndex = s;
    let inIndex = dataView.getInt32((s + 1) * 4, true);
    let maxIndex = dataView.getInt32((s + 2) * 4, true);
    if (maxIndex === 0) {
      maxIndex = dataView.byteLength;
    }
    let maxI;
    let value;
    let n;
    while (inIndex < maxIndex) {
      n = data[inIndex++];
      if (n < 128) {
        maxI = Math.min((n + 1) * samples + outIndex, endOfSegment);
        for (; outIndex < maxI; outIndex += samples) {
          out[outIndex] = data[inIndex++];
        }
      } else if (n > 128) {
        value = data[inIndex++];
        maxI = Math.min((129 - (n ^ 128)) * samples + outIndex, endOfSegment);
        for (; outIndex < maxI; outIndex += samples) {
          out[outIndex] = value;
        }
      }
    }
  }
  return new DataView(decoded, 0, nPixels * samples);
}
function decode16(frameInfo, dataView) {
  const {
    samples,
    size
  } = frameInfo;
  const outBytes = size.numberOfPixels * 2;
  const decoded = new ArrayBuffer(outBytes * samples);
  const data = new Uint8Array(dataView.buffer, dataView.byteOffset, dataView.byteLength);
  const out = new Uint8Array(decoded);
  const numSegments = dataView.getInt32(0, true);
  let maxIndex = 0;
  for (let s = 0; s < numSegments; ++s) {
    const highByte = s === 0 ? 1 : 0;
    let outIndex = highByte;
    let inIndex = dataView.getInt32((s + 1) * 4, true);
    maxIndex = dataView.getInt32((s + 2) * 4, true);
    if (maxIndex === 0) {
      maxIndex = dataView.byteLength;
    }
    let maxI;
    let value;
    let n;
    while (inIndex < maxIndex) {
      n = data[inIndex++];
      if (n < 128) {
        maxI = Math.min((n + 1) * 2 + outIndex, outBytes);
        for (; outIndex < maxI; outIndex += 2) {
          out[outIndex] = data[inIndex++];
        }
      } else if (n > 128) {
        value = data[inIndex++];
        maxI = Math.min((129 - (n ^ 128)) * 2 + outIndex, outBytes);
        for (; outIndex < maxI; outIndex += 2) {
          out[outIndex] = value;
        }
      }
    }
  }
  return new DataView(decoded, 0, outBytes * samples);
}
function decode(frameInfo, pixelDataView) {
  const {
    bytesAllocated
  } = frameInfo;
  console.log(777,bytesAllocated,frameInfo,pixelDataView)
  if (bytesAllocated === 1) {
    return decode8(frameInfo, pixelDataView);
  }
  if (bytesAllocated === 2) {
    return decode16(frameInfo, pixelDataView);
  }
  throw new Error("Unsupported data format for RLE");
}
const getSingleValueSafely = (tag, index) => {
  var _tag$value;
  return (tag === null || tag === void 0 ? void 0 : (_tag$value = tag.value) === null || _tag$value === void 0 ? void 0 : _tag$value[index]) || null;
};
const getValueSafely = (tag) => {
  var _tag$value2;
  return (_tag$value2 = tag === null || tag === void 0 ? void 0 : tag.value) !== null && _tag$value2 !== void 0 ? _tag$value2 : null;
};
var Axis;
(function(Axis2) {
  Axis2["R"] = "R";
  Axis2["L"] = "L";
  Axis2["A"] = "A";
  Axis2["P"] = "P";
  Axis2["F"] = "F";
  Axis2["H"] = "H";
})(Axis || (Axis = {}));
const ObliquityThresholdCosineValue = 0.8;
const getMajorAxisFromPatientRelativeDirectionCosine = (x, y, z) => {
  const absX = Math.abs(x);
  const absY = Math.abs(y);
  const absZ = Math.abs(z);
  let axis = null;
  if (absX > ObliquityThresholdCosineValue && absX > absY && absX > absZ) {
    const orientationX = x < 0 ? Axis.R : Axis.L;
    axis = orientationX;
  } else if (absY > ObliquityThresholdCosineValue && absY > absX && absY > absZ) {
    const orientationY = y < 0 ? Axis.A : Axis.P;
    axis = orientationY;
  } else if (absZ > ObliquityThresholdCosineValue && absZ > absX && absZ > absY) {
    const orientationZ = z < 0 ? Axis.F : Axis.H;
    axis = orientationZ;
  }
  return axis;
};
class DCMImage {
  constructor() {
    this.tags = {};
    this.tagsFlat = {};
    this.littleEndian = false;
    this.index = -1;
    this.decompressed = false;
    this.privateDataAll = null;
    this.bytesAllocated = null;
  }
  getTag(tag) {
    var _this$tags$tagId;
    const [group, element] = tag;
    const tagId = createTagId(group, element);
    return (_this$tags$tagId = this.tags[tagId]) !== null && _this$tags$tagId !== void 0 ? _this$tags$tagId : this.tagsFlat[tagId];
  }
  getTopLevelTag(tag) {
    const [group, element] = tag;
    const tagId = createTagId(group, element);
    return this.tags[tagId];
  }
  getTagValue(tag) {
    return getValueSafely(this.getTag(tag));
  }
  getTagValueIndexed(tag, index = 0) {
    return getSingleValueSafely(this.getTag(tag), index);
  }
  get pixelData() {
    return this.tags[createTagIdWithTag(TagIds.PixelData)];
  }
  get columns() {
    return this.getTagValueIndexed(TagIds.Cols);
  }
  get rows() {
    return this.getTagValueIndexed(TagIds.Rows);
  }
  get seriesDescription() {
    return this.getTagValueIndexed(TagIds.SeriesDescription);
  }
  get seriesInstanceUID() {
    return this.getTagValueIndexed(TagIds.SeriesInstanceUid);
  }
  get seriesNumber() {
    return this.getTagValueIndexed(TagIds.SeriesNumber);
  }
  get echoNumber() {
    return this.getTagValueIndexed(TagIds.EchoNumber);
  }
  get imagePosition() {
    return this.getTagValue(TagIds.ImagePosition);
  }
  get imageDirections() {
    return this.getTagValue(TagIds.ImageOrientation);
  }
  getImagePositionSliceDir(sliceDir) {
    const imagePos = this.imagePosition;
    if (imagePos && sliceDir >= 0) {
      return imagePos[sliceDir];
    }
    return 0;
  }
  get modality() {
    return this.getTagValueIndexed(TagIds.Modality);
  }
  get sliceLocation() {
    return this.getTagValueIndexed(TagIds.SliceLocation);
  }
  get sliceLocationVector() {
    return this.getTagValue(TagIds.SliceLocationVector);
  }
  get imageNumber() {
    return this.getTagValueIndexed(TagIds.ImageNum);
  }
  get temporalPosition() {
    return this.getTagValueIndexed(TagIds.TemporalPosition);
  }
  get temporalNumber() {
    return this.getTagValueIndexed(TagIds.NumberTemporalPositions);
  }
  get sliceGap() {
    return this.getTagValueIndexed(TagIds.SliceGap);
  }
  get sliceThickness() {
    return this.getTagValueIndexed(TagIds.SliceThickness);
  }
  get imageMax() {
    return this.getTagValueIndexed(TagIds.ImageMax);
  }
  get imageMin() {
    return this.getTagValueIndexed(TagIds.ImageMin);
  }
  get dataScaleSlope() {
    return this.getTagValueIndexed(TagIds.DataScaleSlope);
  }
  get dataScaleIntercept() {
    return this.getTagValueIndexed(TagIds.DataScaleIntercept);
  }
  get dataScaleElscint() {
    let scale = this.getTagValueIndexed(TagIds.DataScaleElscint) || 1;
    const bandwidth = this.pixelBandwidth;
    scale = Math.sqrt(bandwidth) / (10 * scale);
    if (scale <= 0) {
      scale = 1;
    }
    return scale;
  }
  get windowWidth() {
    var _this$getTopLevelTag;
    const tagVal = (_this$getTopLevelTag = this.getTopLevelTag(TagIds.WindowWidth)) === null || _this$getTopLevelTag === void 0 ? void 0 : _this$getTopLevelTag.value;
    return tagVal === null || tagVal === void 0 ? void 0 : tagVal[0];
  }
  get windowCenter() {
    var _this$getTopLevelTag2;
    const tagVal = (_this$getTopLevelTag2 = this.getTopLevelTag(TagIds.WindowCenter)) === null || _this$getTopLevelTag2 === void 0 ? void 0 : _this$getTopLevelTag2.value;
    return tagVal === null || tagVal === void 0 ? void 0 : tagVal[0];
  }
  get pixelBandwidth() {
    return this.getTagValueIndexed(TagIds.PixelBandwidth);
  }
  get seriesId() {
    const ids = [this.seriesDescription, this.seriesInstanceUID, this.seriesNumber, this.echoNumber, this.orientation].filter((id) => id != null);
    const {
      columns,
      rows
    } = this;
    return `${ids.join(",")} (${columns} x ${rows})`;
  }
  get pixelSpacing() {
    return this.getTagValue(TagIds.PixelSpacing);
  }
  get imageType() {
    return this.getTagValue(TagIds.ImageType);
  }
  get bitsStored() {
    return this.getTagValueIndexed(TagIds.BitsStored);
  }
  get bitsAllocated() {
    return this.getTagValueIndexed(TagIds.BitsAllocated);
  }
  getFrameTime() {
    return this.getTagValueIndexed(TagIds.FrameTime);
  }
  getAcquisitionMatrix() {
    var _this$privateDataAll;
    const mat = [0, 0];
    mat[0] = this.getTagValueIndexed(TagIds.AcquisitionMatrix);
    if (this.privateDataAll === null) {
      this.privateDataAll = this.allInterpretedPrivateData;
    }
    if (((_this$privateDataAll = this.privateDataAll) === null || _this$privateDataAll === void 0 ? void 0 : _this$privateDataAll.length) > 0) {
      const start = this.privateDataAll.indexOf("AcquisitionMatrixText");
      if (start !== -1) {
        const end = this.privateDataAll.indexOf("\n", start);
        if (end !== -1) {
          var _matPrivate$length;
          const str = this.privateDataAll.substring(start, end);
          const matPrivate = str.match(/\d+/g);
          if ((_matPrivate$length = matPrivate === null || matPrivate === void 0 ? void 0 : matPrivate.length) !== null && _matPrivate$length !== void 0 ? _matPrivate$length : 0 >= 1) {
            mat[0] = parseFloat(matPrivate[0]);
            if ((matPrivate === null || matPrivate === void 0 ? void 0 : matPrivate.length) === 2) {
              mat[1] = parseFloat(matPrivate[1]);
            }
          }
        }
      }
    }
    if (mat[1] === 0) {
      [mat[1]] = mat;
    }
    return mat;
  }
  getTR() {
    return this.getTagValueIndexed(TagIds.Tr);
  }
  putTag(tag) {
    this.tags[tag.id] = tag;
    this.putFlattenedTag(this.tagsFlat, tag);
  }
  putFlattenedTag(tags, tag) {
    if (tag.sublist) {
      const value = tag.value;
      for (let ctr = 0; ctr < value.length; ctr += 1) {
        this.putFlattenedTag(tags, value[ctr]);
      }
    } else if (!tags[tag.id]) {
      tags[tag.id] = tag;
    }
  }
  hasPixelData() {
    return this.tags[createTagIdWithTag(TagIds.PixelData)] !== void 0;
  }
  get orientation() {
    let orientation = null;
    const dirCos = this.getTagValue(TagIds.ImageOrientation);
    let bigRow = 0;
    let bigCol = 0;
    if ((dirCos === null || dirCos === void 0 ? void 0 : dirCos.length) !== 6) {
      return null;
    }
    const spacing = this.pixelSpacing;
    if (!spacing) {
      return null;
    }
    const [rowSpacing] = spacing;
    let biggest = 0;
    let ctr = 0;
    for (; ctr < 3; ctr += 1) {
      if (Math.abs(dirCos[ctr]) > biggest) {
        biggest = Math.abs(dirCos[ctr]);
        bigRow = ctr;
      }
    }
    biggest = 0;
    for (; ctr < 6; ctr += 1) {
      if (Math.abs(dirCos[ctr]) > biggest) {
        biggest = Math.abs(dirCos[ctr]);
        bigCol = ctr;
      }
    }
    let orient = "";
    switch (bigRow) {
      case 0:
        orient += "X";
        if (bigCol === 4) {
          orient += "YZ";
        } else {
          orient += "ZY";
        }
        break;
      case 1:
        orient += "Y";
        if (bigCol === 3) {
          orient += "XZ";
        } else {
          orient += "ZX";
        }
        break;
      case 2:
        orient += "Z";
        if (bigCol === 3) {
          orient += "XY";
        } else {
          orient += "YX";
        }
        break;
    }
    switch (bigRow) {
      case 0:
        if (dirCos[bigRow] > 0) {
          orient += "-";
        } else {
          orient += "+";
        }
        if (bigCol === 4) {
          if (dirCos[bigCol] > 0) {
            orient += "-";
          } else {
            orient += "+";
          }
        } else if (dirCos[bigCol] > 0) {
          orient += "+";
        } else {
          orient += "-";
        }
        break;
      case 1:
        if (dirCos[bigRow] > 0) {
          orient += "-";
        } else {
          orient += "+";
        }
        if (bigCol === 3) {
          if (dirCos[bigCol] > 0) {
            orient += "-";
          } else {
            orient += "+";
          }
        } else if (dirCos[bigCol] > 0) {
          orient += "+";
        } else {
          orient += "-";
        }
        break;
      case 2:
        if (dirCos[bigRow] > 0) {
          orient += "+";
        } else {
          orient += "-";
        }
        if (dirCos[bigCol] > 0) {
          orient += "-";
        } else {
          orient += "+";
        }
        break;
    }
    if (rowSpacing === 0) {
      orient += "+";
      orientation = orient;
    } else {
      {
        switch (orient.charAt(2)) {
          case "X":
            if (rowSpacing > 0) {
              orient += "-";
            } else {
              orient += "+";
            }
            break;
          case "Y":
          case "Z":
            if (rowSpacing > 0) {
              orient += "+";
            } else {
              orient += "-";
            }
            break;
        }
      }
      orientation = orient;
    }
    return orientation;
  }
  isMosaic() {
    const {
      imageType
    } = this;
    let labeledAsMosaic = false;
    if (imageType !== null) {
      for (let ctr = 0; ctr < imageType.length; ctr += 1) {
        if (imageType[ctr].toUpperCase().indexOf("MOSAIC") !== -1) {
          labeledAsMosaic = true;
          break;
        }
      }
    }
    if (!labeledAsMosaic) {
      return false;
    }
    const [matHeight, matWidth] = this.getAcquisitionMatrix();
    const canReadAsMosaic = matHeight > 0 && (matHeight < this.rows || matWidth < this.columns);
    return canReadAsMosaic;
  }
  isPalette() {
    const value = this.getTagValueIndexed(TagIds.PhotometricInterpretation);
    return value != null && value.toLowerCase().indexOf("palette") !== -1;
  }
  get mosaicCols() {
    return this.columns / this.getAcquisitionMatrix()[1];
  }
  get mosaicRows() {
    return this.rows / this.getAcquisitionMatrix()[0];
  }
  isElscint() {
    const tag = this.getTag(TagIds.DataScaleElscint);
    return tag !== void 0;
  }
  isCompressed() {
    const {
      transferSyntax
    } = this;
    if (transferSyntax) {
      if (transferSyntax.indexOf(TransferSyntax.CompressionJpeg) !== -1) {
        return true;
      }
      if (transferSyntax.indexOf(TransferSyntax.CompressionRLE) !== -1) {
        return true;
      }
    }
    return false;
  }
  isCompressedJPEG() {
    const {
      transferSyntax
    } = this;
    if (transferSyntax) {
      if (transferSyntax.indexOf(TransferSyntax.CompressionJpeg) !== -1) {
        return true;
      }
    }
    return false;
  }
  isCompressedJPEGLossless() {
    const {
      transferSyntax
    } = this;
    if (transferSyntax) {
      if (transferSyntax.indexOf(TransferSyntax.CompressionJpegLossless) !== -1 || transferSyntax.indexOf(TransferSyntax.CompressionJpegLosslessSel1) !== -1) {
        return true;
      }
    }
    return false;
  }
  isCompressedJPEGBaseline() {
    const {
      transferSyntax
    } = this;
    if (transferSyntax) {
      if (transferSyntax.indexOf(TransferSyntax.CompressionJpegBaseline8bit) !== -1 || transferSyntax.indexOf(TransferSyntax.CompressionJpegBaseline12bit) !== -1) {
        return true;
      }
    }
    return false;
  }
  isCompressedJPEG2000() {
    const {
      transferSyntax
    } = this;
    if (transferSyntax) {
      if (transferSyntax.indexOf(TransferSyntax.CompressionJpeg2000) !== -1 || transferSyntax.indexOf(TransferSyntax.CompressionJpeg2000Lossless) !== -1) {
        return true;
      }
    }
    return false;
  }
  isCompressedJPEGLS() {
    const {
      transferSyntax
    } = this;
    if (transferSyntax) {
      if (transferSyntax.indexOf(TransferSyntax.CompressionJpegLs) !== -1 || transferSyntax.indexOf(TransferSyntax.CompressionJpegLsLossless) !== -1) {
        return true;
      }
    }
    return false;
  }
  isCompressedRLE() {
    const {
      transferSyntax
    } = this;
    if (transferSyntax) {
      if (transferSyntax.indexOf(TransferSyntax.CompressionRLE) !== -1) {
        return true;
      }
    }
    return false;
  }
  get numberOfFrames() {
    const value = this.getTagValueIndexed(TagIds.NumberOfFrames);
    return value !== null && value !== void 0 ? value : 1;
  }
  get samplesPerPixel() {
    const value = this.getTagValueIndexed(TagIds.SamplesPerPixel);
    return value !== null && value !== void 0 ? value : 1;
  }
  getNumberOfImplicitFrames() {
    if (this.isCompressed()) {
      return 1;
    }
    const {
      pixelData
    } = this;
    const length = pixelData.offsetEnd - pixelData.offsetValue;
    const size = this.columns * this.rows * Math.round(this.bitsAllocated / 8);
    return Math.floor(length / size);
  }
  get pixelRepresentation() {
    return this.getTagValueIndexed(TagIds.PixelRepresentation);
  }
  get pixelPaddingValue() {
    return this.getTagValueIndexed(TagIds.PixelPaddingValue);
  }
  get photometricInterpretation() {
    return this.getTagValueIndexed(TagIds.PhotometricInterpretation);
  }
  get patientName() {
    return this.getTagValueIndexed(TagIds.PatientName);
  }
  get patientID() {
    return this.getTagValueIndexed(TagIds.PatientId);
  }
  get studyTime() {
    return this.getTagValueIndexed(TagIds.StudyTime);
  }
  get transferSyntax() {
    return this.getTagValueIndexed(TagIds.TransferSyntax);
  }
  get studyDate() {
    return this.getTagValueIndexed(TagIds.StudyDate);
  }
  get planarConfig() {
    return this.getTagValueIndexed(TagIds.PlanarConfig);
  }
  get imageDescription() {
    const values = [this.getTagValueIndexed(TagIds.StudyDes), this.getTagValueIndexed(TagIds.SeriesDescription), this.getTagValueIndexed(TagIds.ImageComments)].filter((el) => el !== null);
    return values.join(" ").trim();
  }
  get dataType() {
    var _this$photometricInte;
    const dataType = this.pixelRepresentation;
    if (dataType === null) {
      return ByteType.Unkown;
    }
    const interp = ((_this$photometricInte = this.photometricInterpretation) === null || _this$photometricInte === void 0 ? void 0 : _this$photometricInte.trim()) || null;
    if (interp && (interp.indexOf("RGB") !== -1 || interp.indexOf("YBR") !== -1 || interp.toLowerCase().indexOf("palette") !== -1)) {
      return ByteType.Rgb;
    }
    if (dataType === 0) {
      return ByteType.IntegerUnsigned;
    }
    if (dataType === 1) {
      return ByteType.Integer;
    }
    return ByteType.Unkown;
  }
  get acquiredSliceDirection() {
    const dirCos = this.getTagValue(TagIds.ImageOrientation);
    if ((dirCos === null || dirCos === void 0 ? void 0 : dirCos.length) !== 6) {
      return SliceDirection.Unknown;
    }
    const rowAxis = getMajorAxisFromPatientRelativeDirectionCosine(dirCos[0], dirCos[1], dirCos[2]);
    const colAxis = getMajorAxisFromPatientRelativeDirectionCosine(dirCos[3], dirCos[4], dirCos[5]);
    if (rowAxis !== null && colAxis !== null) {
      if ((rowAxis === "R" || rowAxis === "L") && (colAxis === "A" || colAxis === "P")) {
        return SliceDirection.Axial;
      }
      if ((colAxis === "R" || colAxis === "L") && (rowAxis === "A" || rowAxis === "P")) {
        return SliceDirection.Axial;
      }
      if ((rowAxis === "R" || rowAxis === "L") && (colAxis === "H" || colAxis === "F")) {
        return SliceDirection.Coronal;
      }
      if ((colAxis === "R" || colAxis === "L") && (rowAxis === "H" || rowAxis === "F")) {
        return SliceDirection.Coronal;
      }
      if ((rowAxis === "A" || rowAxis === "P") && (colAxis === "H" || colAxis === "F")) {
        return SliceDirection.Sagittal;
      }
      if ((colAxis === "A" || colAxis === "P") && (rowAxis === "H" || rowAxis === "F")) {
        return SliceDirection.Sagittal;
      }
    }
    return SliceDirection.Oblique;
  }
  get allInterpretedPrivateData() {
    let str = "";
    const sortedKeys = Object.keys(this.tags).sort();
    for (let ctr = 0; ctr < sortedKeys.length; ctr += 1) {
      const key = sortedKeys[ctr];
      if (this.tags.hasOwnProperty(key)) {
        const tag = this.tags[key];
        if (tag.hasInterpretedPrivateData()) {
          str += tag.value;
        }
      }
    }
    return str;
  }
  toString() {
    let str = "";
    const sortedKeys = Object.keys(this.tags).sort();
    for (let ctr = 0; ctr < sortedKeys.length; ctr += 1) {
      const key = sortedKeys[ctr];
      const tag = this.tags[key];
      if (tag) {
        str += `${tag.toHTMLString()}<br />`;
      }
    }
    str = str.replace(/\n\s*\n/g, "\n");
    str = str.replace(/(?:\r\n|\r|\n)/g, "<br />");
    return str;
  }
}
DCMImage.skipPaletteConversion = false;
const MAGIC_COOKIE_OFFSET = 128;
const MAGIC_COOKIE = [68, 73, 67, 77];
const isMagicCookieFound = (data) => {
  const offset = MAGIC_COOKIE_OFFSET;
  const magicCookieLength = MAGIC_COOKIE.length;
  for (let ctr = 0; ctr < magicCookieLength; ctr += 1) {
    if (data.getUint8(offset + ctr) !== MAGIC_COOKIE[ctr]) {
      return false;
    }
  }
  return true;
};
const findFirstTagOffset = (data) => {
  const magicCookieLength = MAGIC_COOKIE.length;
  if (isMagicCookieFound(data)) {
    return MAGIC_COOKIE_OFFSET + magicCookieLength;
  }
  const searchOffsetMax = MAGIC_COOKIE_OFFSET * 5;
  let found = false;
  let offset = 0;
  for (let ctr = 0; ctr < searchOffsetMax; ctr += 1) {
    const ch = data.getUint8(ctr);
    if (ch === MAGIC_COOKIE[0]) {
      found = true;
      for (let ctrIn = 1; ctrIn < magicCookieLength; ctrIn += 1) {
        if (data.getUint8(ctr + ctrIn) !== MAGIC_COOKIE[ctrIn]) {
          found = false;
        }
      }
      if (found) {
        offset = ctr + magicCookieLength;
        break;
      }
    }
  }
  return offset;
};
class Parser {
  constructor() {
    this.littleEndian = true;
    this.explicit = true;
    this.metaFound = false;
    this.metaFinished = false;
    this.metaFinishedOffset = -1;
    this.needsDeflate = false;
    this.inflated = null;
    this.encapsulation = false;
    this.level = 0;
    this.error = null;
    this.charset = null;
  }
  parse(dataIn) {
    let image = null;
    let data = dataIn;
    try {
      image = new DCMImage();
      const offset = findFirstTagOffset(data);
      let tag = this.getNextTag(data, offset);
      while (tag !== null) {
        if (Parser.verbose) {
          console.log(tag.toString());
        }
        image.putTag(tag);
        if (tag.is(TagIds.PixelData)) {
          break;
        }
        if (this.needsDeflate && tag.offsetEnd >= this.metaFinishedOffset) {
          this.needsDeflate = false;
          const copyMeta = data.buffer.slice(0, tag.offsetEnd);
          const copyDeflated = data.buffer.slice(tag.offsetEnd);
          this.inflated = concatArrayBuffers(copyMeta, pako2.inflateRaw(copyDeflated));
          data = new DataView(this.inflated);
        }
        tag = this.getNextTag(data, tag.offsetEnd);
      }
    } catch (err) {
      this.error = err;
    }
    if (image !== null) {
      image.littleEndian = this.littleEndian;
    }
    return image;
  }
  parseEncapsulated(data) {
    this.encapsulation = true;
    const tags = [];
    try {
      let tag = this.getNextTag(data, 0);
      while (tag !== null) {
        if (tag.is(TagIds.SublistItem)) {
          tags.push(tag);
        }
        if (Parser.verbose) {
          console.log(tag.toString());
        }
        tag = this.getNextTag(data, tag.offsetEnd);
      }
    } catch (err) {
      this.error = err;
    }
    return tags;
  }
  testForValidTag(data) {
    let tag = null;
    try {
      const offset = findFirstTagOffset(data);
      tag = this.getNextTag(data, offset, false);
    } catch (err) {
      this.error = err;
    }
    return tag;
  }
  getNextTag(data, offsetStart, testForTag = false) {
    let group = 0;
    let value = null;
    let offset = offsetStart;
    let length = 0;
    let little = true;
    let vr = null;
    if (offset >= data.byteLength) {
      return null;
    }
    if (this.metaFinished) {
      little = this.littleEndian;
      group = data.getUint16(offset, little);
    } else {
      group = data.getUint16(offset, true);
      if (this.metaFinishedOffset !== -1 && offset >= this.metaFinishedOffset || group !== 2) {
        this.metaFinished = true;
        little = this.littleEndian;
        group = data.getUint16(offset, little);
      }
    }
    if (!this.metaFound && group === 2) {
      this.metaFound = true;
    }
    offset += 2;
    const element = data.getUint16(offset, little);
    offset += 2;
    if (this.explicit || !this.metaFinished) {
      vr = String.fromCharCode(data.getUint8(offset)) + String.fromCharCode(data.getUint8(offset + 1));
      if (!this.metaFound && this.metaFinished && Parser.VRS.indexOf(vr) === -1) {
        vr = Dictionary.getVR(group, element);
        length = data.getUint32(offset, little);
        offset += 4;
        this.explicit = false;
      } else {
        offset += 2;
        if (Parser.DATA_VRS.indexOf(vr) !== -1) {
          offset += 2;
          length = data.getUint32(offset, little);
          offset += 4;
        } else {
          length = data.getUint16(offset, little);
          offset += 2;
        }
      }
    } else {
      vr = Dictionary.getVR(group, element);
      length = data.getUint32(offset, little);
      if (length === Parser.UNDEFINED_LENGTH) {
        vr = "SQ";
      }
      offset += 4;
    }
    const offsetValue = offset;
    const isPixelData = Tag.isEqual({
      group,
      element
    }, TagIds.PixelData);
    if (vr === "SQ" || this.level > 0 && Parser.DATA_VRS.indexOf(vr) !== -1) {
      value = this.parseSublist(data, offset, length, vr !== "SQ");
      if (length === Parser.UNDEFINED_LENGTH) {
        const tag2 = value[value.length - 1];
        length = tag2.offsetEnd - offset;
      }
    } else if (length > 0 && !testForTag) {
      if (length === Parser.UNDEFINED_LENGTH) {
        if (isPixelData) {
          length = data.byteLength - offset;
        }
      }
      if (length > 0) {
        value = new DataView(data.buffer, data.byteOffset + offset, length);
      }
    }
    offset += length;
    const tag = new Tag({
      group,
      element,
      vr,
      value,
      offsetStart,
      offsetValue,
      offsetEnd: offset,
      littleEndian: little,
      charset: this.charset
    });
    if (tag.hasValue()) {
      if (tag.is(TagIds.TransferSyntax)) {
        const [val] = tag.value;
        this.explicit = true;
        this.littleEndian = true;
        if (val === TransferSyntax.ImplicitLittle) {
          this.explicit = false;
        } else if (val === TransferSyntax.ExplicitBig) {
          this.littleEndian = false;
        } else if (val === TransferSyntax.CompressionDeflate) {
          this.needsDeflate = true;
        }
      } else if (tag.is(TagIds.MetaLength)) {
        const [val] = tag.value;
        this.metaFinishedOffset = val + offset;
      } else if (tag.is(TagIds.Charset)) {
        const charsetValue = tag.value;
        let charset = DefaultCharset;
        if (charsetValue.length === 2) {
          charset = `${charsetValue[0] || DefaultCharset}\\${charsetValue[1]}`;
        } else if (charsetValue.length === 1) {
          [charset] = charsetValue;
        }
        this.charset = charset;
      }
    }
    return tag;
  }
  parseSublist(data, offsetStart, length, raw) {
    const tags = [];
    let offset = offsetStart;
    const offsetEnd = offsetStart + length;
    this.level += 1;
    if (length === Parser.UNDEFINED_LENGTH) {
      let sublistItem = this.parseSublistItem(data, offset, raw);
      while (!sublistItem.is(TagIds.SequenceDelim)) {
        tags.push(sublistItem);
        offset = sublistItem.offsetEnd || 0;
        sublistItem = this.parseSublistItem(data, offset, raw);
      }
      tags.push(sublistItem);
    } else {
      while (offset < offsetEnd) {
        const sublistItem = this.parseSublistItem(data, offset, raw);
        tags.push(sublistItem);
        offset = sublistItem.offsetEnd || 0;
      }
    }
    this.level -= 1;
    return tags;
  }
  parseSublistItem(data, offsetStart, raw) {
    var _value;
    let offset = offsetStart;
    let value = null;
    const tags = [];
    const group = data.getUint16(offset, this.littleEndian);
    offset += 2;
    const element = data.getUint16(offset, this.littleEndian);
    offset += 2;
    let length = data.getUint32(offset, this.littleEndian);
    offset += 4;
    const offsetValue = offset;
    if (length === Parser.UNDEFINED_LENGTH) {
      let tag = this.getNextTag(data, offset);
      while (!tag.is(TagIds.SublistItemDelim)) {
        tags.push(tag);
        offset = tag.offsetEnd;
        tag = this.getNextTag(data, offset);
      }
      tags.push(tag);
      offset = tag.offsetEnd;
    } else if (raw) {
      length = Math.min(data.byteLength - offset - data.byteOffset, length);
      value = new DataView(data.buffer, offset + data.byteOffset, length);
      offset += length;
    } else {
      const offsetEnd = offset + length;
      let tag;
      while (offset < offsetEnd) {
        tag = this.getNextTag(data, offset);
        tags.push(tag);
        offset = tag.offsetEnd;
      }
    }
    const sublistItemTag = new Tag({
      group,
      element,
      value: (_value = value) !== null && _value !== void 0 ? _value : tags,
      offsetStart,
      offsetValue,
      offsetEnd: offset,
      littleEndian: this.littleEndian
    });
    return sublistItemTag;
  }
  hasError() {
    return this.error !== null;
  }
}
Parser.verbose = false;
Parser.VRS = ["AE", "AS", "AT", "CS", "DA", "DS", "DT", "FL", "FD", "IS", "LO", "LT", "OB", "OD", "OF", "OW", "PN", "SH", "SL", "SS", "ST", "TM", "UI", "UL", "UN", "US", "UT"];
Parser.DATA_VRS = ["OB", "OW", "OF", "SQ", "UT", "UN"];
Parser.RAW_DATA_VRS = ["OB", "OD", "OF", "OW", "UN"];
Parser.UNDEFINED_LENGTH = 4294967295;
class OrderedMapIterator {
  constructor(orderedMap) {
    this.orderedMap = orderedMap;
    this.index = 0;
  }
  hasNext() {
    return this.index < this.orderedMap.orderedKeys.length;
  }
  next() {
    const item = this.orderedMap.get(this.orderedMap.orderedKeys[this.index]);
    this.index += 1;
    return item;
  }
  length() {
    return this.orderedMap.orderedKeys.length;
  }
}
class OrderedMap {
  constructor() {
    this.orderedKeys = [];
    this.map = new Map();
    this.index = 0;
  }
  put(key, value) {
    if (!this.map.get(key)) {
      this.orderedKeys.push(key);
      this.orderedKeys.sort((a, b) => parseFloat(a) - parseFloat(b));
    }
    this.map.set(key, value);
  }
  remove(key) {
    const index = this.orderedKeys.indexOf(key);
    if (index === -1) {
      throw new Error("key does not exist");
    }
    this.orderedKeys.splice(index, 1);
    this.map.delete(key);
  }
  get(key) {
    return this.map.get(key);
  }
  iterator() {
    return new OrderedMapIterator(this);
  }
  getOrderedValues() {
    const it = this.iterator();
    const orderedValues = Array(it.length());
    while (it.hasNext()) {
      orderedValues.push(it.next());
    }
    return orderedValues;
  }
}
const getMosaicOffset = (mosaicCols, mosaicColWidth, mosaicRowHeight, mosaicWidth, xLocVal, yLocVal, zLocVal) => {
  let xLoc = xLocVal;
  let yLoc = yLocVal;
  const zLoc = zLocVal;
  xLoc = zLoc % mosaicCols * mosaicColWidth + xLoc;
  yLoc = (Math.floor(zLoc / mosaicCols) * mosaicRowHeight + yLoc) * mosaicWidth;
  return xLoc + yLoc;
};
const orderByImagePosition = (images, sliceDir) => {
  const dicomMap = new OrderedMap();
  for (let ctr = 0; ctr < images.length; ctr += 1) {
    dicomMap.put(images[ctr].getImagePositionSliceDir(sliceDir), images[ctr]);
  }
  return dicomMap.getOrderedValues();
};
const orderBySliceLocation = (images) => {
  const dicomMap = new OrderedMap();
  for (let ctr = 0; ctr < images.length; ctr += 1) {
    dicomMap.put(images[ctr].sliceLocation, images[ctr]);
  }
  return dicomMap.getOrderedValues();
};
const orderByImageNumber = (images) => {
  const dicomMap = new OrderedMap();
  for (let ctr = 0; ctr < images.length; ctr += 1) {
    dicomMap.put(images[ctr].imageNumber, images[ctr]);
  }
  return dicomMap.getOrderedValues();
};
const hasMatchingSlice = (dg, image, sliceDir, doImagePos, doSliceLoc) => {
  let matchingNum = 0;
  if (doImagePos) {
    matchingNum = image.getImagePositionSliceDir(sliceDir);
  } else if (doSliceLoc) {
    matchingNum = image.sliceLocation;
  } else {
    matchingNum = image.imageNumber;
  }
  for (let ctr = 0; ctr < dg.length; ctr += 1) {
    const current = dg[ctr];
    if (doImagePos) {
      const imagePos = current.getImagePositionSliceDir(sliceDir);
      if (imagePos === matchingNum) {
        return true;
      }
    } else if (doSliceLoc) {
      const sliceLoc = current.sliceLocation;
      if (sliceLoc === matchingNum) {
        return true;
      }
    } else {
      const imageNum = current.imageNumber;
      if (imageNum === matchingNum) {
        return true;
      }
    }
  }
  return false;
};
const orderByTime = (images, numFrames, sliceDir, hasImagePosition, hasSliceLocation) => {
  const dicomMap = new OrderedMap();
  const hasTemporalPosition = numFrames > 1 && images[0].temporalPosition !== null;
  const hasTemporalNumber = numFrames > 1 && images[0].temporalNumber !== null && images[0].temporalNumber === numFrames;
  if (hasTemporalPosition && hasTemporalNumber) {
    for (let ctr = 0; ctr < images.length; ctr += 1) {
      const image = images[ctr];
      const tempPos = image.temporalPosition;
      let dg = dicomMap.get(tempPos);
      if (!dg) {
        dg = [];
        dicomMap.put(tempPos, dg);
      }
      dg.push(image);
    }
  } else {
    const timeBySliceMap = new OrderedMap();
    for (let ctr = 0; ctr < images.length; ctr += 1) {
      if (images[ctr] !== null) {
        let sliceMarker = ctr;
        if (hasImagePosition) {
          sliceMarker = images[ctr].getImagePositionSliceDir(sliceDir);
        } else if (hasSliceLocation) {
          sliceMarker = images[ctr].sliceLocation;
        }
        let slice = timeBySliceMap.get(sliceMarker);
        if (slice === null) {
          slice = new OrderedMap();
          timeBySliceMap.put(sliceMarker, slice);
        }
        slice.put(ctr, images[ctr]);
      }
    }
    const dicomsCopy = [];
    let dicomsCopyIndex = 0;
    const sliceIt = timeBySliceMap.iterator();
    while (sliceIt.hasNext()) {
      const slice = sliceIt.next();
      const timeIt = slice.iterator();
      while (timeIt.hasNext()) {
        dicomsCopy[dicomsCopyIndex] = timeIt.next();
        dicomsCopyIndex += 1;
      }
    }
    for (let ctr = 0; ctr < dicomsCopy.length; ctr += 1) {
      if (dicomsCopy[ctr] !== null) {
        let dgFound;
        const it = dicomMap.iterator();
        while (it.hasNext()) {
          const dg = it.next();
          if (!hasMatchingSlice(dg, dicomsCopy[ctr], sliceDir, hasImagePosition, hasSliceLocation)) {
            dgFound = dg;
            break;
          }
        }
        if (dgFound === null) {
          dgFound = [];
          dicomMap.put(dicomMap.orderedKeys.length, dgFound);
        }
        dgFound.push(dicomsCopy[ctr]);
      }
    }
  }
  return dicomMap;
};
const orderDicoms = (images, numFrames, sliceDir) => {
  const hasImagePosition = images[0].imagePosition !== null;
  const hasSliceLocation = images[0].sliceLocation !== null;
  const hasImageNumber = images[0].imageNumber !== null;
  const timeMap = orderByTime(images, numFrames, sliceDir, hasImagePosition, hasSliceLocation);
  const timeIt = timeMap.orderedKeys;
  const imagesOrderedByTimeAndSpace = [];
  for (let ctr = 0; ctr < timeIt.length; ctr += 1) {
    const dg = timeMap.get(timeIt[ctr]);
    let ordered;
    if (hasImagePosition) {
      ordered = orderByImagePosition(dg, sliceDir);
    } else if (hasSliceLocation) {
      ordered = orderBySliceLocation(dg);
    } else if (hasImageNumber) {
      ordered = orderByImageNumber(dg);
    } else {
      ordered = dg;
    }
    for (let ctrIn = 0; ctrIn < ordered.length; ctrIn += 1) {
      imagesOrderedByTimeAndSpace.push(ordered[ctrIn]);
    }
  }
  for (let ctrIn = 0; ctrIn < imagesOrderedByTimeAndSpace.length; ctrIn += 1) {
    imagesOrderedByTimeAndSpace[ctrIn].index = ctrIn;
  }
  return imagesOrderedByTimeAndSpace;
};
class Series {
  constructor() {
    this.images = [];
    this.imagesOriginalOrder = null;
    this.isMosaic = false;
    this.isElscint = false;
    this.isCompressed = false;
    this.numberOfFrames = 0;
    this.numberOfFramesInFile = 0;
    this.isMultiFrame = false;
    this.isMultiFrameVolume = false;
    this.isMultiFrameTimeseries = false;
    this.isImplicitTimeseries = false;
    this.sliceSense = false;
    this.sliceDir = SliceDirection.Unknown;
    this.error = null;
  }
  getOrder() {
    const order = [];
    for (let ctr = 0; ctr < this.imagesOriginalOrder.length; ctr += 1) {
      order[ctr] = this.imagesOriginalOrder[ctr].index;
    }
    return order;
  }
  toString() {
    return this.images[0].seriesId;
  }
  getName() {
    const des = this.images[0].seriesDescription;
    const uid = this.images[0].seriesInstanceUID;
    if (des !== null) {
      return des;
    }
    if (uid !== null) {
      return uid;
    }
    return null;
  }
  addImage(image) {
    this.images.push(image);
  }
  matchesSeries(image) {
    if (this.images.length === 0) {
      return true;
    }
    return this.images[0].seriesId === image.seriesId;
  }
  buildSeries() {
    const [image0] = this.images;
    this.isMosaic = image0.isMosaic();
    this.isElscint = image0.isElscint();
    this.isCompressed = image0.isCompressed();
    this.numberOfFrames = image0.numberOfFrames;
    this.numberOfFramesInFile = image0.getNumberOfImplicitFrames();
    this.isMultiFrame = this.numberOfFrames > 1 || this.isMosaic && image0.mosaicCols * image0.mosaicRows > 1;
    this.isMultiFrameVolume = false;
    this.isMultiFrameTimeseries = false;
    this.isImplicitTimeseries = false;
    if (this.isMultiFrame) {
      const hasFrameTime = image0.getFrameTime() > 0;
      if (this.isMosaic) {
        this.isMultiFrameTimeseries = true;
      } else if (hasFrameTime) {
        this.isMultiFrameTimeseries = true;
      } else if (this.numberOfFramesInFile > 1) {
        this.isMultiFrameTimeseries = true;
        this.numberOfFrames = this.images.length;
      } else {
        this.isMultiFrameVolume = true;
      }
    }
    if (!this.isMosaic && this.numberOfFrames <= 1) {
      let imagePos = image0.imagePosition || [];
      const sliceLoc = imagePos.toString();
      this.numberOfFrames = 0;
      for (let ctr = 0; ctr < this.images.length; ctr += 1) {
        imagePos = this.images[ctr].imagePosition || [];
        if (imagePos.toString() === sliceLoc) {
          this.numberOfFrames += 1;
        }
      }
      if (this.numberOfFrames > 1) {
        this.isImplicitTimeseries = true;
      }
    }
    this.sliceDir = image0.acquiredSliceDirection;
    let orderedImages;
    if (Series.useExplicitOrdering) {
      orderedImages = this.images.slice();
    } else {
      orderedImages = orderDicoms(this.images, this.numberOfFrames, this.sliceDir);
    }
    const sliceLocationFirst = orderedImages[0].getImagePositionSliceDir(this.sliceDir);
    const sliceLocationLast = orderedImages[orderedImages.length - 1].getImagePositionSliceDir(this.sliceDir);
    const sliceLocDiff = sliceLocationLast - sliceLocationFirst;
    if (Series.useExplicitOrdering) {
      this.sliceSense = false;
    } else if (this.isMosaic) {
      this.sliceSense = true;
    } else if (this.isMultiFrame) {
      const sliceLocations = orderedImages[0].sliceLocationVector;
      if (sliceLocations !== null) {
        const {
          orientation
        } = orderedImages[0];
        if ((orientation === null || orientation === void 0 ? void 0 : orientation.charAt(2)) === "Z") {
          this.sliceSense = sliceLocations[0] - sliceLocations[sliceLocations.length - 1] < 0;
        } else {
          this.sliceSense = sliceLocations[0] - sliceLocations[sliceLocations.length - 1] > 0;
        }
      } else {
        this.sliceSense = sliceLocationFirst >= 0;
      }
    } else if (this.sliceDir === SliceDirection.Sagittal || this.sliceDir === SliceDirection.Coronal) {
      if (sliceLocDiff > 0) {
        this.sliceSense = false;
      } else {
        this.sliceSense = true;
      }
    } else if (sliceLocDiff > 0) {
      this.sliceSense = true;
    } else {
      this.sliceSense = false;
    }
    this.imagesOriginalOrder = this.images;
    this.images = orderedImages;
  }
  getMosaicData(image, data) {
    const [image0] = this.images;
    const mosaicWidth = image0.columns;
    const mosaicHeight = image0.rows;
    const {
      mosaicRows,
      mosaicCols
    } = image0;
    const numBytes = image0.bytesAllocated || 1;
    const numSlices = mosaicWidth * mosaicHeight;
    const numRows = Math.floor(mosaicHeight / mosaicRows);
    const numCols = Math.floor(mosaicWidth / mosaicCols);
    const mosaicRowHeight = Math.floor(mosaicHeight / mosaicRows);
    const mosaicColWidth = Math.floor(mosaicWidth / mosaicCols);
    const buffer = new Uint8Array(new ArrayBuffer(numSlices * numRows * numCols * numBytes));
    const dataTyped = new Uint8Array(data);
    let index = 0;
    for (let ctrS = 0; ctrS < numSlices; ctrS += 1) {
      for (let ctrR = 0; ctrR < numRows; ctrR += 1) {
        for (let ctrC = 0; ctrC < numCols; ctrC += 1) {
          const offset = getMosaicOffset(mosaicCols, mosaicColWidth, mosaicRowHeight, mosaicWidth, ctrC, ctrR, ctrS);
          for (let ctr = 0; ctr < numBytes; ctr += 1) {
            buffer[index] = dataTyped[offset * numBytes + ctr];
            index += 1;
          }
        }
      }
    }
    return buffer.buffer;
  }
}
Series.parserError = null;
Series.useExplicitOrdering = false;
Series.useExplicitSpacing = 0;
const parseImage = (data) => {
  const parser = new Parser();
  const image = parser.parse(data);
  if (parser.hasError()) {
    Series.parserError = parser.error;
    return null;
  }
  if (parser.inflated) {
    image.inflated = parser.inflated;
  }
  return image;
};
const getEncapsulatedData = (data) => {
  const parser = new Parser();
  return parser.parseEncapsulated(data);
};
const concatDataViews = (dataViews) => {
  let length = 0;
  let offset = 0;
  for (let ctr = 0; ctr < dataViews.length; ctr += 1) {
    length += dataViews[ctr].byteLength;
  }
  const tmp = new Uint8Array(length);
  let dataView;
  for (let ctr = 0; ctr < dataViews.length; ctr += 1) {
    dataView = dataViews[ctr];
    tmp.set(new Uint8Array(dataView.buffer, dataView.byteOffset, dataView.byteLength), offset);
    offset += dataViews[ctr].byteLength;
  }
  return new DataView(tmp.buffer);
};
const JPEG_MAGIC_NUMBER = [255, 216];
const JPEG2000_MAGIC_NUMBER = [255, 79, 255, 81];
const isHeaderJPEG = (data) => {
  if (!data) {
    return false;
  }
  if (data.getUint8(0) !== JPEG_MAGIC_NUMBER[0]) {
    return false;
  }
  if (data.getUint8(1) !== JPEG_MAGIC_NUMBER[1]) {
    return false;
  }
  return true;
};
const isHeaderJPEG2000 = (data) => {
  if (!data) {
    return false;
  }
  for (let ctr = 0; ctr < JPEG2000_MAGIC_NUMBER.length; ctr += 1) {
    if (data.getUint8(ctr) !== JPEG2000_MAGIC_NUMBER[ctr]) {
      return false;
    }
  }
  return true;
};
const getJpegData = (inData) => {
  const encapTags = getEncapsulatedData(inData);
  const data = [];
  const dataConcat = [];
  let currentJpeg;
  if (encapTags) {
    const numTags = encapTags.length;
    for (let ctr = 0; ctr < numTags; ctr += 1) {
      const dataView = encapTags[ctr].value;
      if (isHeaderJPEG(dataView) || isHeaderJPEG2000(dataView)) {
        currentJpeg = [];
        currentJpeg.push(dataView);
        data.push(currentJpeg);
      } else if (currentJpeg && dataView) {
        currentJpeg.push(dataView);
      }
    }
  }
  for (let ctr = 0; ctr < data.length; ctr += 1) {
    const buffers = data[ctr];
    if (buffers.length > 1) {
      dataConcat[ctr] = concatDataViews(buffers);
    } else {
      [dataConcat[ctr]] = data[ctr];
    }
    delete data[ctr];
  }
  return dataConcat;
};
class RLEDecoder extends Decoder {
  constructor() {
    super(...arguments);
    this.rleData = null;
  }
  decode(frameNo) {
    const {
      image
    } = this;
    
    if (!this.rleData) {
      const encapTags = getEncapsulatedData(image.data);
      const numTags = (encapTags === null || encapTags === void 0 ? void 0 : encapTags.length) || 0;
      const data = new Array(numTags);
      for (let ctr = 1; ctr < numTags; ctr += 1) {
        const dataView = encapTags[ctr].rawValue;
        data[ctr - 1] = dataView;
      }
      this.rleData = data;
      if (image.planar) {
        image.planar = false;
      }
    }
    const decompressed = decode(image, this.rleData[frameNo]);
  console.log(image,decompressed,this.rleData[frameNo])

    return Promise.resolve(decompressed);
  }
}
class NativeDecoder extends Decoder {
  constructor(image) {
    super(image);
    this.image.rgb = true;
    this.jpegData = getJpegData(image.data);
  }
  createTexture(gl, frameNo) {
    var _this$jpegData;
    const {
      width,
      height
    } = this.outputSize;
    const jpegFrameData = (_this$jpegData = this.jpegData) === null || _this$jpegData === void 0 ? void 0 : _this$jpegData[frameNo];
    if (!jpegFrameData) {
      throw Error("Invalid data");
    }
    const blob = new Blob([jpegFrameData]);
    const src = URL.createObjectURL(blob);
    return new Promise((resolve, reject) => createTexture(gl, {
      src,
      width,
      height,
      type: gl.UNSIGNED_BYTE,
      min: gl.NEAREST,
      mag: gl.NEAREST,
      wrap: gl.CLAMP_TO_EDGE
    }, (error, texture) => {
      URL.revokeObjectURL(src);
      if (error) {
        return reject(error);
      }
      return resolve(texture);
    }));
  }
}
class JPEGLosslessDecoder extends Decoder {
  constructor() {
    super(...arguments);
    this.jpegs = null;
  }
  decode(frameNo) {
    const {
      image
    } = this;
    if (!this.jpegs) {
      this.jpegs = getJpegData(image.data);
    }
    const decoder = new lossless.Decoder();
    const jpeg = this.jpegs[frameNo];
    const buffer = new Uint8Array(jpeg.buffer, jpeg.byteOffset, jpeg.byteLength);
    const temp = decoder.decode(buffer);
    return Promise.resolve(temp);
  }
}
var CharLS = function(opts) {
  var Module = typeof opts !== "undefined" ? opts : {};
  var moduleOverrides = {};
  var key;
  for (key in Module) {
    if (Module.hasOwnProperty(key)) {
      moduleOverrides[key] = Module[key];
    }
  }
  var ENVIRONMENT_IS_WEB = false;
  var ENVIRONMENT_IS_WORKER = false;
  var ENVIRONMENT_IS_NODE = false;
  var ENVIRONMENT_IS_SHELL = false;
  ENVIRONMENT_IS_WEB = typeof window === "object";
  ENVIRONMENT_IS_WORKER = typeof importScripts === "function";
  ENVIRONMENT_IS_NODE = typeof process === "object" && typeof process.versions === "object" && typeof process.versions.node === "string";
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
  var scriptDirectory = "";
  if (ENVIRONMENT_IS_NODE && globalThis && !globalThis.fetch) {
    globalThis.fetch = require("node-fetch");
  }
  function locateFile(path) {
    if (Module["locateFile"]) {
      return Module["locateFile"](path, scriptDirectory);
    }
    return scriptDirectory + path;
  }
  var read_, readBinary;
  var nodeFS;
  var nodePath;
  if (ENVIRONMENT_IS_NODE) {
    if (ENVIRONMENT_IS_WORKER) {
      scriptDirectory = require("path").dirname(scriptDirectory) + "/";
    } else {
      scriptDirectory = __dirname + "/";
    }
    read_ = function shell_read(filename, binary) {
      if (!nodeFS)
        nodeFS = require("fs");
      if (!nodePath)
        nodePath = require("path");
      filename = nodePath["normalize"](filename);
      return nodeFS["readFileSync"](filename, binary ? null : "utf8");
    };
    readBinary = function readBinary2(filename) {
      var ret = read_(filename, true);
      if (!ret.buffer) {
        ret = new Uint8Array(ret);
      }
      assert(ret.buffer);
      return ret;
    };
    if (process["argv"].length > 1) {
      process["argv"][1].replace(/\\/g, "/");
    }
    process["argv"].slice(2);
    if (typeof module !== "undefined") {
      module["exports"] = Module;
    }
    process["on"]("uncaughtException", function(ex) {
      if (!(ex instanceof ExitStatus)) {
        throw ex;
      }
    });
    process["on"]("unhandledRejection", abort);
    Module["inspect"] = function() {
      return "[Emscripten Module object]";
    };
  } else if (ENVIRONMENT_IS_SHELL) {
    if (typeof read != "undefined") {
      read_ = function shell_read(f) {
        return read(f);
      };
    }
    readBinary = function readBinary2(f) {
      var data;
      if (typeof readbuffer === "function") {
        return new Uint8Array(readbuffer(f));
      }
      data = read(f, "binary");
      assert(typeof data === "object");
      return data;
    };
    if (typeof scriptArgs != "undefined") {
      scriptArgs;
    }
    if (typeof print !== "undefined") {
      if (typeof console === "undefined")
        console = {};
      console.log = print;
      console.warn = console.error = typeof printErr !== "undefined" ? printErr : print;
    }
  } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    if (ENVIRONMENT_IS_WORKER) {
      scriptDirectory = self.location.href;
    } else if (document.currentScript) {
      scriptDirectory = document.currentScript.src;
    }
    if (scriptDirectory.indexOf("blob:") !== 0) {
      scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf("/") + 1);
    } else {
      scriptDirectory = "";
    }
    {
      read_ = function shell_read(url) {
        var xhr = new XMLHttpRequest();
        xhr.open("GET", url, false);
        xhr.send(null);
        return xhr.responseText;
      };
      if (ENVIRONMENT_IS_WORKER) {
        readBinary = function readBinary2(url) {
          var xhr = new XMLHttpRequest();
          xhr.open("GET", url, false);
          xhr.responseType = "arraybuffer";
          xhr.send(null);
          return new Uint8Array(xhr.response);
        };
      }
    }
  }
  var out = Module["print"] || console.log.bind(console);
  var err = Module["printErr"] || console.warn.bind(console);
  for (key in moduleOverrides) {
    if (moduleOverrides.hasOwnProperty(key)) {
      Module[key] = moduleOverrides[key];
    }
  }
  moduleOverrides = null;
  if (Module["arguments"])
    Module["arguments"];
  if (Module["thisProgram"])
    Module["thisProgram"];
  var wasmBinary;
  if (Module["wasmBinary"])
    wasmBinary = Module["wasmBinary"];
  if (typeof WebAssembly !== "object") {
    err("no native wasm support detected");
  }
  var wasmMemory;
  var wasmTable = new WebAssembly.Table({
    initial: 247,
    maximum: 247 + 0,
    element: "anyfunc"
  });
  var ABORT = false;
  function assert(condition, text) {
    if (!condition) {
      abort("Assertion failed: " + text);
    }
  }
  function getCFunc(ident) {
    var func = Module["_" + ident];
    assert(func, "Cannot call unknown function " + ident + ", make sure it is exported");
    return func;
  }
  function ccall(ident, returnType, argTypes, args, opts2) {
    var toC = {
      string: function(str) {
        var ret2 = 0;
        if (str !== null && str !== void 0 && str !== 0) {
          var len = (str.length << 2) + 1;
          ret2 = stackAlloc(len);
          stringToUTF8(str, ret2, len);
        }
        return ret2;
      },
      array: function(arr) {
        var ret2 = stackAlloc(arr.length);
        writeArrayToMemory(arr, ret2);
        return ret2;
      }
    };
    function convertReturnValue(ret2) {
      if (returnType === "string")
        return UTF8ToString(ret2);
      if (returnType === "boolean")
        return Boolean(ret2);
      return ret2;
    }
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0)
            stack = stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    ret = convertReturnValue(ret);
    if (stack !== 0)
      stackRestore(stack);
    return ret;
  }
  var UTF8Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf8") : void 0;
  function UTF8ArrayToString(heap, idx, maxBytesToRead) {
    var endIdx = idx + maxBytesToRead;
    var endPtr = idx;
    while (heap[endPtr] && !(endPtr >= endIdx))
      ++endPtr;
    if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
      return UTF8Decoder.decode(heap.subarray(idx, endPtr));
    } else {
      var str = "";
      while (idx < endPtr) {
        var u0 = heap[idx++];
        if (!(u0 & 128)) {
          str += String.fromCharCode(u0);
          continue;
        }
        var u1 = heap[idx++] & 63;
        if ((u0 & 224) == 192) {
          str += String.fromCharCode((u0 & 31) << 6 | u1);
          continue;
        }
        var u2 = heap[idx++] & 63;
        if ((u0 & 240) == 224) {
          u0 = (u0 & 15) << 12 | u1 << 6 | u2;
        } else {
          u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heap[idx++] & 63;
        }
        if (u0 < 65536) {
          str += String.fromCharCode(u0);
        } else {
          var ch = u0 - 65536;
          str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
        }
      }
    }
    return str;
  }
  function UTF8ToString(ptr, maxBytesToRead) {
    return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
  }
  function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
    if (!(maxBytesToWrite > 0))
      return 0;
    var startIdx = outIdx;
    var endIdx = outIdx + maxBytesToWrite - 1;
    for (var i = 0; i < str.length; ++i) {
      var u = str.charCodeAt(i);
      if (u >= 55296 && u <= 57343) {
        var u1 = str.charCodeAt(++i);
        u = 65536 + ((u & 1023) << 10) | u1 & 1023;
      }
      if (u <= 127) {
        if (outIdx >= endIdx)
          break;
        heap[outIdx++] = u;
      } else if (u <= 2047) {
        if (outIdx + 1 >= endIdx)
          break;
        heap[outIdx++] = 192 | u >> 6;
        heap[outIdx++] = 128 | u & 63;
      } else if (u <= 65535) {
        if (outIdx + 2 >= endIdx)
          break;
        heap[outIdx++] = 224 | u >> 12;
        heap[outIdx++] = 128 | u >> 6 & 63;
        heap[outIdx++] = 128 | u & 63;
      } else {
        if (outIdx + 3 >= endIdx)
          break;
        heap[outIdx++] = 240 | u >> 18;
        heap[outIdx++] = 128 | u >> 12 & 63;
        heap[outIdx++] = 128 | u >> 6 & 63;
        heap[outIdx++] = 128 | u & 63;
      }
    }
    heap[outIdx] = 0;
    return outIdx - startIdx;
  }
  function stringToUTF8(str, outPtr, maxBytesToWrite) {
    return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
  }
  function lengthBytesUTF8(str) {
    var len = 0;
    for (var i = 0; i < str.length; ++i) {
      var u = str.charCodeAt(i);
      if (u >= 55296 && u <= 57343)
        u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
      if (u <= 127)
        ++len;
      else if (u <= 2047)
        len += 2;
      else if (u <= 65535)
        len += 3;
      else
        len += 4;
    }
    return len;
  }
  var UTF16Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-16le") : void 0;
  function UTF16ToString(ptr, maxBytesToRead) {
    var endPtr = ptr;
    var idx = endPtr >> 1;
    var maxIdx = idx + maxBytesToRead / 2;
    while (!(idx >= maxIdx) && HEAPU16[idx])
      ++idx;
    endPtr = idx << 1;
    if (endPtr - ptr > 32 && UTF16Decoder) {
      return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
    } else {
      var i = 0;
      var str = "";
      while (1) {
        var codeUnit = HEAP16[ptr + i * 2 >> 1];
        if (codeUnit == 0 || i == maxBytesToRead / 2)
          return str;
        ++i;
        str += String.fromCharCode(codeUnit);
      }
    }
  }
  function stringToUTF16(str, outPtr, maxBytesToWrite) {
    if (maxBytesToWrite === void 0) {
      maxBytesToWrite = 2147483647;
    }
    if (maxBytesToWrite < 2)
      return 0;
    maxBytesToWrite -= 2;
    var startPtr = outPtr;
    var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;
    for (var i = 0; i < numCharsToWrite; ++i) {
      var codeUnit = str.charCodeAt(i);
      HEAP16[outPtr >> 1] = codeUnit;
      outPtr += 2;
    }
    HEAP16[outPtr >> 1] = 0;
    return outPtr - startPtr;
  }
  function lengthBytesUTF16(str) {
    return str.length * 2;
  }
  function UTF32ToString(ptr, maxBytesToRead) {
    var i = 0;
    var str = "";
    while (!(i >= maxBytesToRead / 4)) {
      var utf32 = HEAP32[ptr + i * 4 >> 2];
      if (utf32 == 0)
        break;
      ++i;
      if (utf32 >= 65536) {
        var ch = utf32 - 65536;
        str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
      } else {
        str += String.fromCharCode(utf32);
      }
    }
    return str;
  }
  function stringToUTF32(str, outPtr, maxBytesToWrite) {
    if (maxBytesToWrite === void 0) {
      maxBytesToWrite = 2147483647;
    }
    if (maxBytesToWrite < 4)
      return 0;
    var startPtr = outPtr;
    var endPtr = startPtr + maxBytesToWrite - 4;
    for (var i = 0; i < str.length; ++i) {
      var codeUnit = str.charCodeAt(i);
      if (codeUnit >= 55296 && codeUnit <= 57343) {
        var trailSurrogate = str.charCodeAt(++i);
        codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023;
      }
      HEAP32[outPtr >> 2] = codeUnit;
      outPtr += 4;
      if (outPtr + 4 > endPtr)
        break;
    }
    HEAP32[outPtr >> 2] = 0;
    return outPtr - startPtr;
  }
  function lengthBytesUTF32(str) {
    var len = 0;
    for (var i = 0; i < str.length; ++i) {
      var codeUnit = str.charCodeAt(i);
      if (codeUnit >= 55296 && codeUnit <= 57343)
        ++i;
      len += 4;
    }
    return len;
  }
  function writeArrayToMemory(array, buffer2) {
    HEAP8.set(array, buffer2);
  }
  var WASM_PAGE_SIZE = 65536;
  function alignUp(x, multiple) {
    if (x % multiple > 0) {
      x += multiple - x % multiple;
    }
    return x;
  }
  var buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
  function updateGlobalBufferAndViews(buf) {
    buffer = buf;
    Module["HEAP8"] = HEAP8 = new Int8Array(buf);
    Module["HEAP16"] = HEAP16 = new Int16Array(buf);
    Module["HEAP32"] = HEAP32 = new Int32Array(buf);
    Module["HEAPU8"] = HEAPU8 = new Uint8Array(buf);
    Module["HEAPU16"] = HEAPU16 = new Uint16Array(buf);
    Module["HEAPU32"] = HEAPU32 = new Uint32Array(buf);
    Module["HEAPF32"] = HEAPF32 = new Float32Array(buf);
    Module["HEAPF64"] = HEAPF64 = new Float64Array(buf);
  }
  var DYNAMIC_BASE = 5288688, DYNAMICTOP_PTR = 45648;
  var INITIAL_INITIAL_MEMORY = Module["INITIAL_MEMORY"] || 1073741824;
  if (Module["wasmMemory"]) {
    wasmMemory = Module["wasmMemory"];
  } else {
    wasmMemory = new WebAssembly.Memory({
      initial: INITIAL_INITIAL_MEMORY / WASM_PAGE_SIZE,
      maximum: 2147483648 / WASM_PAGE_SIZE
    });
  }
  if (wasmMemory) {
    buffer = wasmMemory.buffer;
  }
  INITIAL_INITIAL_MEMORY = buffer.byteLength;
  updateGlobalBufferAndViews(buffer);
  HEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;
  function callRuntimeCallbacks(callbacks) {
    while (callbacks.length > 0) {
      var callback = callbacks.shift();
      if (typeof callback == "function") {
        callback(Module);
        continue;
      }
      var func = callback.func;
      if (typeof func === "number") {
        if (callback.arg === void 0) {
          Module["dynCall_v"](func);
        } else {
          Module["dynCall_vi"](func, callback.arg);
        }
      } else {
        func(callback.arg === void 0 ? null : callback.arg);
      }
    }
  }
  var __ATPRERUN__ = [];
  var __ATINIT__ = [];
  var __ATMAIN__ = [];
  var __ATPOSTRUN__ = [];
  function preRun() {
    if (Module["preRun"]) {
      if (typeof Module["preRun"] == "function")
        Module["preRun"] = [Module["preRun"]];
      while (Module["preRun"].length) {
        addOnPreRun(Module["preRun"].shift());
      }
    }
    callRuntimeCallbacks(__ATPRERUN__);
  }
  function initRuntime() {
    callRuntimeCallbacks(__ATINIT__);
  }
  function preMain() {
    callRuntimeCallbacks(__ATMAIN__);
  }
  function postRun() {
    if (Module["postRun"]) {
      if (typeof Module["postRun"] == "function")
        Module["postRun"] = [Module["postRun"]];
      while (Module["postRun"].length) {
        addOnPostRun(Module["postRun"].shift());
      }
    }
    callRuntimeCallbacks(__ATPOSTRUN__);
  }
  function addOnPreRun(cb) {
    __ATPRERUN__.unshift(cb);
  }
  function addOnPostRun(cb) {
    __ATPOSTRUN__.unshift(cb);
  }
  var runDependencies = 0;
  var dependenciesFulfilled = null;
  function addRunDependency(id) {
    runDependencies++;
    if (Module["monitorRunDependencies"]) {
      Module["monitorRunDependencies"](runDependencies);
    }
  }
  function removeRunDependency(id) {
    runDependencies--;
    if (Module["monitorRunDependencies"]) {
      Module["monitorRunDependencies"](runDependencies);
    }
    if (runDependencies == 0) {
      if (dependenciesFulfilled) {
        var callback = dependenciesFulfilled;
        dependenciesFulfilled = null;
        callback();
      }
    }
  }
  Module["preloadedImages"] = {};
  Module["preloadedAudios"] = {};
  function abort(what) {
    if (Module["onAbort"]) {
      Module["onAbort"](what);
    }
    what += "";
    out(what);
    err(what);
    ABORT = true;
    what = "abort(" + what + "). Build with -s ASSERTIONS=1 for more info.";
    throw new WebAssembly.RuntimeError(what);
  }
  function hasPrefix(str, prefix) {
    return String.prototype.startsWith ? str.startsWith(prefix) : str.indexOf(prefix) === 0;
  }
  var dataURIPrefix = "data:application/octet-stream;base64,";
  function isDataURI(filename) {
    return hasPrefix(filename, dataURIPrefix);
  }
  var fileURIPrefix = "file://";
  function isFileURI(filename) {
    return hasPrefix(filename, fileURIPrefix);
  }
  var wasmBinaryFile = ENVIRONMENT_IS_NODE && "charlsjs.wasm" || "data:application/octet-stream;base64,\n";
  if (!isDataURI(wasmBinaryFile)) {
    wasmBinaryFile = locateFile(wasmBinaryFile);
  }
  function getBinary() {
    try {
      if (wasmBinary) {
        return new Uint8Array(wasmBinary);
      }
      if (readBinary) {
        return readBinary(wasmBinaryFile);
      } else {
        throw "both async and sync fetching of the wasm failed";
      }
    } catch (err2) {
      abort(err2);
    }
  }
  function getBinaryPromise() {
    if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === "function" && !isFileURI(wasmBinaryFile)) {
      return fetch(wasmBinaryFile, {
        credentials: "same-origin"
      }).then(function(response) {
        if (!response["ok"]) {
          throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
        }
        return response["arrayBuffer"]();
      }).catch(function() {
        return getBinary();
      });
    }
    return new Promise(function(resolve, reject) {
      resolve(getBinary());
    });
  }
  function createWasm() {
    var info = {
      env: asmLibraryArg,
      wasi_snapshot_preview1: asmLibraryArg
    };
    function receiveInstance(instance, module2) {
      var exports2 = instance.exports;
      Module["asm"] = exports2;
      removeRunDependency();
    }
    addRunDependency();
    function receiveInstantiatedSource(output) {
      receiveInstance(output["instance"]);
    }
    function instantiateArrayBuffer(receiver) {
      return getBinaryPromise().then(function(binary) {
        return WebAssembly.instantiate(binary, info);
      }).then(receiver, function(reason) {
        err("failed to asynchronously prepare wasm: " + reason);
        abort(reason);
      });
    }
    function instantiateAsync() {
      if (!wasmBinary && typeof WebAssembly.instantiateStreaming === "function" && !isDataURI(wasmBinaryFile) && !isFileURI(wasmBinaryFile) && typeof fetch === "function") {
        fetch(wasmBinaryFile, {
          credentials: "same-origin"
        }).then(function(response) {
          var result = WebAssembly.instantiateStreaming(response, info);
          return result.then(receiveInstantiatedSource, function(reason) {
            err("wasm streaming compile failed: " + reason);
            err("falling back to ArrayBuffer instantiation");
            return instantiateArrayBuffer(receiveInstantiatedSource);
          });
        });
      } else {
        return instantiateArrayBuffer(receiveInstantiatedSource);
      }
    }
    if (Module["instantiateWasm"]) {
      try {
        var exports = Module["instantiateWasm"](info, receiveInstance);
        return exports;
      } catch (e) {
        err("Module.instantiateWasm callback failed with error: " + e);
        return false;
      }
    }
    instantiateAsync();
    return {};
  }
  __ATINIT__.push({
    func: function() {
      ___wasm_call_ctors();
    }
  });
  function ___cxa_allocate_exception(size) {
    return _malloc(size);
  }
  function _atexit(func, arg) {
  }
  function ___cxa_atexit(a0, a1) {
    return _atexit();
  }
  function ___cxa_throw(ptr, type, destructor) {
    throw ptr;
  }
  var structRegistrations = {};
  function runDestructors(destructors) {
    while (destructors.length) {
      var ptr = destructors.pop();
      var del = destructors.pop();
      del(ptr);
    }
  }
  function simpleReadValueFromPointer(pointer) {
    return this["fromWireType"](HEAPU32[pointer >> 2]);
  }
  var awaitingDependencies = {};
  var registeredTypes = {};
  var typeDependencies = {};
  var char_0 = 48;
  var char_9 = 57;
  function makeLegalFunctionName(name) {
    if (name === void 0) {
      return "_unknown";
    }
    name = name.replace(/[^a-zA-Z0-9_]/g, "$");
    var f = name.charCodeAt(0);
    if (f >= char_0 && f <= char_9) {
      return "_" + name;
    } else {
      return name;
    }
  }
  function createNamedFunction(name, body) {
    name = makeLegalFunctionName(name);
    return new Function("body", "return function " + name + '() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(body);
  }
  function extendError(baseErrorType, errorName) {
    var errorClass = createNamedFunction(errorName, function(message) {
      this.name = errorName;
      this.message = message;
      var stack = new Error(message).stack;
      if (stack !== void 0) {
        this.stack = this.toString() + "\n" + stack.replace(/^Error(:[^\n]*)?\n/, "");
      }
    });
    errorClass.prototype = Object.create(baseErrorType.prototype);
    errorClass.prototype.constructor = errorClass;
    errorClass.prototype.toString = function() {
      if (this.message === void 0) {
        return this.name;
      } else {
        return this.name + ": " + this.message;
      }
    };
    return errorClass;
  }
  var InternalError = void 0;
  function throwInternalError(message) {
    throw new InternalError(message);
  }
  function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
    myTypes.forEach(function(type) {
      typeDependencies[type] = dependentTypes;
    });
    function onComplete(typeConverters2) {
      var myTypeConverters = getTypeConverters(typeConverters2);
      if (myTypeConverters.length !== myTypes.length) {
        throwInternalError("Mismatched type converter count");
      }
      for (var i = 0; i < myTypes.length; ++i) {
        registerType(myTypes[i], myTypeConverters[i]);
      }
    }
    var typeConverters = new Array(dependentTypes.length);
    var unregisteredTypes = [];
    var registered = 0;
    dependentTypes.forEach(function(dt, i) {
      if (registeredTypes.hasOwnProperty(dt)) {
        typeConverters[i] = registeredTypes[dt];
      } else {
        unregisteredTypes.push(dt);
        if (!awaitingDependencies.hasOwnProperty(dt)) {
          awaitingDependencies[dt] = [];
        }
        awaitingDependencies[dt].push(function() {
          typeConverters[i] = registeredTypes[dt];
          ++registered;
          if (registered === unregisteredTypes.length) {
            onComplete(typeConverters);
          }
        });
      }
    });
    if (unregisteredTypes.length === 0) {
      onComplete(typeConverters);
    }
  }
  function __embind_finalize_value_object(structType) {
    var reg = structRegistrations[structType];
    delete structRegistrations[structType];
    var rawConstructor = reg.rawConstructor;
    var rawDestructor = reg.rawDestructor;
    var fieldRecords = reg.fields;
    var fieldTypes = fieldRecords.map(function(field) {
      return field.getterReturnType;
    }).concat(fieldRecords.map(function(field) {
      return field.setterArgumentType;
    }));
    whenDependentTypesAreResolved([structType], fieldTypes, function(fieldTypes2) {
      var fields = {};
      fieldRecords.forEach(function(field, i) {
        var fieldName = field.fieldName;
        var getterReturnType = fieldTypes2[i];
        var getter = field.getter;
        var getterContext = field.getterContext;
        var setterArgumentType = fieldTypes2[i + fieldRecords.length];
        var setter = field.setter;
        var setterContext = field.setterContext;
        fields[fieldName] = {
          read: function(ptr) {
            return getterReturnType["fromWireType"](getter(getterContext, ptr));
          },
          write: function(ptr, o) {
            var destructors = [];
            setter(setterContext, ptr, setterArgumentType["toWireType"](destructors, o));
            runDestructors(destructors);
          }
        };
      });
      return [{
        name: reg.name,
        fromWireType: function(ptr) {
          var rv = {};
          for (var i in fields) {
            rv[i] = fields[i].read(ptr);
          }
          rawDestructor(ptr);
          return rv;
        },
        toWireType: function(destructors, o) {
          for (var fieldName in fields) {
            if (!(fieldName in o)) {
              throw new TypeError('Missing field:  "' + fieldName + '"');
            }
          }
          var ptr = rawConstructor();
          for (fieldName in fields) {
            fields[fieldName].write(ptr, o[fieldName]);
          }
          if (destructors !== null) {
            destructors.push(rawDestructor, ptr);
          }
          return ptr;
        },
        argPackAdvance: 8,
        readValueFromPointer: simpleReadValueFromPointer,
        destructorFunction: rawDestructor
      }];
    });
  }
  function getShiftFromSize(size) {
    switch (size) {
      case 1:
        return 0;
      case 2:
        return 1;
      case 4:
        return 2;
      case 8:
        return 3;
      default:
        throw new TypeError("Unknown type size: " + size);
    }
  }
  function embind_init_charCodes() {
    var codes = new Array(256);
    for (var i = 0; i < 256; ++i) {
      codes[i] = String.fromCharCode(i);
    }
    embind_charCodes = codes;
  }
  var embind_charCodes = void 0;
  function readLatin1String(ptr) {
    var ret = "";
    var c = ptr;
    while (HEAPU8[c]) {
      ret += embind_charCodes[HEAPU8[c++]];
    }
    return ret;
  }
  var BindingError = void 0;
  function throwBindingError(message) {
    throw new BindingError(message);
  }
  function registerType(rawType, registeredInstance, options) {
    options = options || {};
    if (!("argPackAdvance" in registeredInstance)) {
      throw new TypeError("registerType registeredInstance requires argPackAdvance");
    }
    var name = registeredInstance.name;
    if (!rawType) {
      throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
    }
    if (registeredTypes.hasOwnProperty(rawType)) {
      if (options.ignoreDuplicateRegistrations) {
        return;
      } else {
        throwBindingError("Cannot register type '" + name + "' twice");
      }
    }
    registeredTypes[rawType] = registeredInstance;
    delete typeDependencies[rawType];
    if (awaitingDependencies.hasOwnProperty(rawType)) {
      var callbacks = awaitingDependencies[rawType];
      delete awaitingDependencies[rawType];
      callbacks.forEach(function(cb) {
        cb();
      });
    }
  }
  function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
    var shift = getShiftFromSize(size);
    name = readLatin1String(name);
    registerType(rawType, {
      name,
      fromWireType: function(wt) {
        return !!wt;
      },
      toWireType: function(destructors, o) {
        return o ? trueValue : falseValue;
      },
      argPackAdvance: 8,
      readValueFromPointer: function(pointer) {
        var heap;
        if (size === 1) {
          heap = HEAP8;
        } else if (size === 2) {
          heap = HEAP16;
        } else if (size === 4) {
          heap = HEAP32;
        } else {
          throw new TypeError("Unknown boolean type size: " + name);
        }
        return this["fromWireType"](heap[pointer >> shift]);
      },
      destructorFunction: null
    });
  }
  function ClassHandle_isAliasOf(other) {
    if (!(this instanceof ClassHandle)) {
      return false;
    }
    if (!(other instanceof ClassHandle)) {
      return false;
    }
    var leftClass = this.$$.ptrType.registeredClass;
    var left = this.$$.ptr;
    var rightClass = other.$$.ptrType.registeredClass;
    var right = other.$$.ptr;
    while (leftClass.baseClass) {
      left = leftClass.upcast(left);
      leftClass = leftClass.baseClass;
    }
    while (rightClass.baseClass) {
      right = rightClass.upcast(right);
      rightClass = rightClass.baseClass;
    }
    return leftClass === rightClass && left === right;
  }
  function shallowCopyInternalPointer(o) {
    return {
      count: o.count,
      deleteScheduled: o.deleteScheduled,
      preservePointerOnDelete: o.preservePointerOnDelete,
      ptr: o.ptr,
      ptrType: o.ptrType,
      smartPtr: o.smartPtr,
      smartPtrType: o.smartPtrType
    };
  }
  function throwInstanceAlreadyDeleted(obj) {
    function getInstanceTypeName(handle) {
      return handle.$$.ptrType.registeredClass.name;
    }
    throwBindingError(getInstanceTypeName(obj) + " instance already deleted");
  }
  var finalizationGroup = false;
  function detachFinalizer(handle) {
  }
  function runDestructor($$) {
    if ($$.smartPtr) {
      $$.smartPtrType.rawDestructor($$.smartPtr);
    } else {
      $$.ptrType.registeredClass.rawDestructor($$.ptr);
    }
  }
  function releaseClassHandle($$) {
    $$.count.value -= 1;
    var toDelete = $$.count.value === 0;
    if (toDelete) {
      runDestructor($$);
    }
  }
  function attachFinalizer(handle) {
    if (typeof FinalizationGroup === "undefined") {
      attachFinalizer = function(handle2) {
        return handle2;
      };
      return handle;
    }
    finalizationGroup = new FinalizationGroup(function(iter) {
      for (var result = iter.next(); !result.done; result = iter.next()) {
        var $$ = result.value;
        if (!$$.ptr) {
          console.warn("object already deleted: " + $$.ptr);
        } else {
          releaseClassHandle($$);
        }
      }
    });
    attachFinalizer = function(handle2) {
      finalizationGroup.register(handle2, handle2.$$, handle2.$$);
      return handle2;
    };
    detachFinalizer = function(handle2) {
      finalizationGroup.unregister(handle2.$$);
    };
    return attachFinalizer(handle);
  }
  function ClassHandle_clone() {
    if (!this.$$.ptr) {
      throwInstanceAlreadyDeleted(this);
    }
    if (this.$$.preservePointerOnDelete) {
      this.$$.count.value += 1;
      return this;
    } else {
      var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), {
        $$: {
          value: shallowCopyInternalPointer(this.$$)
        }
      }));
      clone.$$.count.value += 1;
      clone.$$.deleteScheduled = false;
      return clone;
    }
  }
  function ClassHandle_delete() {
    if (!this.$$.ptr) {
      throwInstanceAlreadyDeleted(this);
    }
    if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
      throwBindingError("Object already scheduled for deletion");
    }
    detachFinalizer(this);
    releaseClassHandle(this.$$);
    if (!this.$$.preservePointerOnDelete) {
      this.$$.smartPtr = void 0;
      this.$$.ptr = void 0;
    }
  }
  function ClassHandle_isDeleted() {
    return !this.$$.ptr;
  }
  var delayFunction = void 0;
  var deletionQueue = [];
  function flushPendingDeletes() {
    while (deletionQueue.length) {
      var obj = deletionQueue.pop();
      obj.$$.deleteScheduled = false;
      obj["delete"]();
    }
  }
  function ClassHandle_deleteLater() {
    if (!this.$$.ptr) {
      throwInstanceAlreadyDeleted(this);
    }
    if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
      throwBindingError("Object already scheduled for deletion");
    }
    deletionQueue.push(this);
    if (deletionQueue.length === 1 && delayFunction) {
      delayFunction(flushPendingDeletes);
    }
    this.$$.deleteScheduled = true;
    return this;
  }
  function init_ClassHandle() {
    ClassHandle.prototype["isAliasOf"] = ClassHandle_isAliasOf;
    ClassHandle.prototype["clone"] = ClassHandle_clone;
    ClassHandle.prototype["delete"] = ClassHandle_delete;
    ClassHandle.prototype["isDeleted"] = ClassHandle_isDeleted;
    ClassHandle.prototype["deleteLater"] = ClassHandle_deleteLater;
  }
  function ClassHandle() {
  }
  var registeredPointers = {};
  function ensureOverloadTable(proto, methodName, humanName) {
    if (proto[methodName].overloadTable === void 0) {
      var prevFunc = proto[methodName];
      proto[methodName] = function() {
        if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
          throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
        }
        return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
      };
      proto[methodName].overloadTable = [];
      proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
    }
  }
  function exposePublicSymbol(name, value, numArguments) {
    if (Module.hasOwnProperty(name)) {
      if (numArguments === void 0 || Module[name].overloadTable !== void 0 && Module[name].overloadTable[numArguments] !== void 0) {
        throwBindingError("Cannot register public name '" + name + "' twice");
      }
      ensureOverloadTable(Module, name, name);
      if (Module.hasOwnProperty(numArguments)) {
        throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
      }
      Module[name].overloadTable[numArguments] = value;
    } else {
      Module[name] = value;
      if (numArguments !== void 0) {
        Module[name].numArguments = numArguments;
      }
    }
  }
  function RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast) {
    this.name = name;
    this.constructor = constructor;
    this.instancePrototype = instancePrototype;
    this.rawDestructor = rawDestructor;
    this.baseClass = baseClass;
    this.getActualType = getActualType;
    this.upcast = upcast;
    this.downcast = downcast;
    this.pureVirtualFunctions = [];
  }
  function upcastPointer(ptr, ptrClass, desiredClass) {
    while (ptrClass !== desiredClass) {
      if (!ptrClass.upcast) {
        throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
      }
      ptr = ptrClass.upcast(ptr);
      ptrClass = ptrClass.baseClass;
    }
    return ptr;
  }
  function constNoSmartPtrRawPointerToWireType(destructors, handle) {
    if (handle === null) {
      if (this.isReference) {
        throwBindingError("null is not a valid " + this.name);
      }
      return 0;
    }
    if (!handle.$$) {
      throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
    }
    if (!handle.$$.ptr) {
      throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
    }
    var handleClass = handle.$$.ptrType.registeredClass;
    var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
    return ptr;
  }
  function genericPointerToWireType(destructors, handle) {
    var ptr;
    if (handle === null) {
      if (this.isReference) {
        throwBindingError("null is not a valid " + this.name);
      }
      if (this.isSmartPointer) {
        ptr = this.rawConstructor();
        if (destructors !== null) {
          destructors.push(this.rawDestructor, ptr);
        }
        return ptr;
      } else {
        return 0;
      }
    }
    if (!handle.$$) {
      throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
    }
    if (!handle.$$.ptr) {
      throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
    }
    if (!this.isConst && handle.$$.ptrType.isConst) {
      throwBindingError("Cannot convert argument of type " + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + " to parameter type " + this.name);
    }
    var handleClass = handle.$$.ptrType.registeredClass;
    ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
    if (this.isSmartPointer) {
      if (handle.$$.smartPtr === void 0) {
        throwBindingError("Passing raw pointer to smart pointer is illegal");
      }
      switch (this.sharingPolicy) {
        case 0:
          if (handle.$$.smartPtrType === this) {
            ptr = handle.$$.smartPtr;
          } else {
            throwBindingError("Cannot convert argument of type " + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + " to parameter type " + this.name);
          }
          break;
        case 1:
          ptr = handle.$$.smartPtr;
          break;
        case 2:
          if (handle.$$.smartPtrType === this) {
            ptr = handle.$$.smartPtr;
          } else {
            var clonedHandle = handle["clone"]();
            ptr = this.rawShare(ptr, __emval_register(function() {
              clonedHandle["delete"]();
            }));
            if (destructors !== null) {
              destructors.push(this.rawDestructor, ptr);
            }
          }
          break;
        default:
          throwBindingError("Unsupporting sharing policy");
      }
    }
    return ptr;
  }
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
    if (handle === null) {
      if (this.isReference) {
        throwBindingError("null is not a valid " + this.name);
      }
      return 0;
    }
    if (!handle.$$) {
      throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
    }
    if (!handle.$$.ptr) {
      throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
    }
    if (handle.$$.ptrType.isConst) {
      throwBindingError("Cannot convert argument of type " + handle.$$.ptrType.name + " to parameter type " + this.name);
    }
    var handleClass = handle.$$.ptrType.registeredClass;
    var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
    return ptr;
  }
  function RegisteredPointer_getPointee(ptr) {
    if (this.rawGetPointee) {
      ptr = this.rawGetPointee(ptr);
    }
    return ptr;
  }
  function RegisteredPointer_destructor(ptr) {
    if (this.rawDestructor) {
      this.rawDestructor(ptr);
    }
  }
  function RegisteredPointer_deleteObject(handle) {
    if (handle !== null) {
      handle["delete"]();
    }
  }
  function downcastPointer(ptr, ptrClass, desiredClass) {
    if (ptrClass === desiredClass) {
      return ptr;
    }
    if (desiredClass.baseClass === void 0) {
      return null;
    }
    var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
    if (rv === null) {
      return null;
    }
    return desiredClass.downcast(rv);
  }
  function getInheritedInstanceCount() {
    return Object.keys(registeredInstances).length;
  }
  function getLiveInheritedInstances() {
    var rv = [];
    for (var k in registeredInstances) {
      if (registeredInstances.hasOwnProperty(k)) {
        rv.push(registeredInstances[k]);
      }
    }
    return rv;
  }
  function setDelayFunction(fn) {
    delayFunction = fn;
    if (deletionQueue.length && delayFunction) {
      delayFunction(flushPendingDeletes);
    }
  }
  function init_embind() {
    Module["getInheritedInstanceCount"] = getInheritedInstanceCount;
    Module["getLiveInheritedInstances"] = getLiveInheritedInstances;
    Module["flushPendingDeletes"] = flushPendingDeletes;
    Module["setDelayFunction"] = setDelayFunction;
  }
  var registeredInstances = {};
  function getBasestPointer(class_, ptr) {
    if (ptr === void 0) {
      throwBindingError("ptr should not be undefined");
    }
    while (class_.baseClass) {
      ptr = class_.upcast(ptr);
      class_ = class_.baseClass;
    }
    return ptr;
  }
  function getInheritedInstance(class_, ptr) {
    ptr = getBasestPointer(class_, ptr);
    return registeredInstances[ptr];
  }
  function makeClassHandle(prototype, record) {
    if (!record.ptrType || !record.ptr) {
      throwInternalError("makeClassHandle requires ptr and ptrType");
    }
    var hasSmartPtrType = !!record.smartPtrType;
    var hasSmartPtr = !!record.smartPtr;
    if (hasSmartPtrType !== hasSmartPtr) {
      throwInternalError("Both smartPtrType and smartPtr must be specified");
    }
    record.count = {
      value: 1
    };
    return attachFinalizer(Object.create(prototype, {
      $$: {
        value: record
      }
    }));
  }
  function RegisteredPointer_fromWireType(ptr) {
    var rawPointer = this.getPointee(ptr);
    if (!rawPointer) {
      this.destructor(ptr);
      return null;
    }
    var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
    if (registeredInstance !== void 0) {
      if (registeredInstance.$$.count.value === 0) {
        registeredInstance.$$.ptr = rawPointer;
        registeredInstance.$$.smartPtr = ptr;
        return registeredInstance["clone"]();
      } else {
        var rv = registeredInstance["clone"]();
        this.destructor(ptr);
        return rv;
      }
    }
    function makeDefaultHandle() {
      if (this.isSmartPointer) {
        return makeClassHandle(this.registeredClass.instancePrototype, {
          ptrType: this.pointeeType,
          ptr: rawPointer,
          smartPtrType: this,
          smartPtr: ptr
        });
      } else {
        return makeClassHandle(this.registeredClass.instancePrototype, {
          ptrType: this,
          ptr
        });
      }
    }
    var actualType = this.registeredClass.getActualType(rawPointer);
    var registeredPointerRecord = registeredPointers[actualType];
    if (!registeredPointerRecord) {
      return makeDefaultHandle.call(this);
    }
    var toType;
    if (this.isConst) {
      toType = registeredPointerRecord.constPointerType;
    } else {
      toType = registeredPointerRecord.pointerType;
    }
    var dp = downcastPointer(rawPointer, this.registeredClass, toType.registeredClass);
    if (dp === null) {
      return makeDefaultHandle.call(this);
    }
    if (this.isSmartPointer) {
      return makeClassHandle(toType.registeredClass.instancePrototype, {
        ptrType: toType,
        ptr: dp,
        smartPtrType: this,
        smartPtr: ptr
      });
    } else {
      return makeClassHandle(toType.registeredClass.instancePrototype, {
        ptrType: toType,
        ptr: dp
      });
    }
  }
  function init_RegisteredPointer() {
    RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
    RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
    RegisteredPointer.prototype["argPackAdvance"] = 8;
    RegisteredPointer.prototype["readValueFromPointer"] = simpleReadValueFromPointer;
    RegisteredPointer.prototype["deleteObject"] = RegisteredPointer_deleteObject;
    RegisteredPointer.prototype["fromWireType"] = RegisteredPointer_fromWireType;
  }
  function RegisteredPointer(name, registeredClass, isReference, isConst, isSmartPointer, pointeeType, sharingPolicy, rawGetPointee, rawConstructor, rawShare, rawDestructor) {
    this.name = name;
    this.registeredClass = registeredClass;
    this.isReference = isReference;
    this.isConst = isConst;
    this.isSmartPointer = isSmartPointer;
    this.pointeeType = pointeeType;
    this.sharingPolicy = sharingPolicy;
    this.rawGetPointee = rawGetPointee;
    this.rawConstructor = rawConstructor;
    this.rawShare = rawShare;
    this.rawDestructor = rawDestructor;
    if (!isSmartPointer && registeredClass.baseClass === void 0) {
      if (isConst) {
        this["toWireType"] = constNoSmartPtrRawPointerToWireType;
        this.destructorFunction = null;
      } else {
        this["toWireType"] = nonConstNoSmartPtrRawPointerToWireType;
        this.destructorFunction = null;
      }
    } else {
      this["toWireType"] = genericPointerToWireType;
    }
  }
  function replacePublicSymbol(name, value, numArguments) {
    if (!Module.hasOwnProperty(name)) {
      throwInternalError("Replacing nonexistant public symbol");
    }
    if (Module[name].overloadTable !== void 0 && numArguments !== void 0) {
      Module[name].overloadTable[numArguments] = value;
    } else {
      Module[name] = value;
      Module[name].argCount = numArguments;
    }
  }
  function embind__requireFunction(signature, rawFunction) {
    signature = readLatin1String(signature);
    function makeDynCaller(dynCall) {
      var args = [];
      for (var i = 1; i < signature.length; ++i) {
        args.push("a" + i);
      }
      var name = "dynCall_" + signature + "_" + rawFunction;
      var body = "return function " + name + "(" + args.join(", ") + ") {\n";
      body += "    return dynCall(rawFunction" + (args.length ? ", " : "") + args.join(", ") + ");\n";
      body += "};\n";
      return new Function("dynCall", "rawFunction", body)(dynCall, rawFunction);
    }
    var dc = Module["dynCall_" + signature];
    var fp = makeDynCaller(dc);
    if (typeof fp !== "function") {
      throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
    }
    return fp;
  }
  var UnboundTypeError = void 0;
  function getTypeName(type) {
    var ptr = ___getTypeName(type);
    var rv = readLatin1String(ptr);
    _free(ptr);
    return rv;
  }
  function throwUnboundTypeError(message, types) {
    var unboundTypes = [];
    var seen = {};
    function visit(type) {
      if (seen[type]) {
        return;
      }
      if (registeredTypes[type]) {
        return;
      }
      if (typeDependencies[type]) {
        typeDependencies[type].forEach(visit);
        return;
      }
      unboundTypes.push(type);
      seen[type] = true;
    }
    types.forEach(visit);
    throw new UnboundTypeError(message + ": " + unboundTypes.map(getTypeName).join([", "]));
  }
  function __embind_register_class(rawType, rawPointerType, rawConstPointerType, baseClassRawType, getActualTypeSignature, getActualType, upcastSignature, upcast, downcastSignature, downcast, name, destructorSignature, rawDestructor) {
    name = readLatin1String(name);
    getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
    if (upcast) {
      upcast = embind__requireFunction(upcastSignature, upcast);
    }
    if (downcast) {
      downcast = embind__requireFunction(downcastSignature, downcast);
    }
    rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
    var legalFunctionName = makeLegalFunctionName(name);
    exposePublicSymbol(legalFunctionName, function() {
      throwUnboundTypeError("Cannot construct " + name + " due to unbound types", [baseClassRawType]);
    });
    whenDependentTypesAreResolved([rawType, rawPointerType, rawConstPointerType], baseClassRawType ? [baseClassRawType] : [], function(base) {
      base = base[0];
      var baseClass;
      var basePrototype;
      if (baseClassRawType) {
        baseClass = base.registeredClass;
        basePrototype = baseClass.instancePrototype;
      } else {
        basePrototype = ClassHandle.prototype;
      }
      var constructor = createNamedFunction(legalFunctionName, function() {
        if (Object.getPrototypeOf(this) !== instancePrototype) {
          throw new BindingError("Use 'new' to construct " + name);
        }
        if (registeredClass.constructor_body === void 0) {
          throw new BindingError(name + " has no accessible constructor");
        }
        var body = registeredClass.constructor_body[arguments.length];
        if (body === void 0) {
          throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
        }
        return body.apply(this, arguments);
      });
      var instancePrototype = Object.create(basePrototype, {
        constructor: {
          value: constructor
        }
      });
      constructor.prototype = instancePrototype;
      var registeredClass = new RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast);
      var referenceConverter = new RegisteredPointer(name, registeredClass, true, false, false);
      var pointerConverter = new RegisteredPointer(name + "*", registeredClass, false, false, false);
      var constPointerConverter = new RegisteredPointer(name + " const*", registeredClass, false, true, false);
      registeredPointers[rawType] = {
        pointerType: pointerConverter,
        constPointerType: constPointerConverter
      };
      replacePublicSymbol(legalFunctionName, constructor);
      return [referenceConverter, pointerConverter, constPointerConverter];
    });
  }
  function heap32VectorToArray(count, firstElement) {
    var array = [];
    for (var i = 0; i < count; i++) {
      array.push(HEAP32[(firstElement >> 2) + i]);
    }
    return array;
  }
  function __embind_register_class_constructor(rawClassType, argCount, rawArgTypesAddr, invokerSignature, invoker, rawConstructor) {
    assert(argCount > 0);
    var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    invoker = embind__requireFunction(invokerSignature, invoker);
    var args = [rawConstructor];
    var destructors = [];
    whenDependentTypesAreResolved([], [rawClassType], function(classType) {
      classType = classType[0];
      var humanName = "constructor " + classType.name;
      if (classType.registeredClass.constructor_body === void 0) {
        classType.registeredClass.constructor_body = [];
      }
      if (classType.registeredClass.constructor_body[argCount - 1] !== void 0) {
        throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount - 1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
      }
      classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
        throwUnboundTypeError("Cannot construct " + classType.name + " due to unbound types", rawArgTypes);
      };
      whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
        classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
          if (arguments.length !== argCount - 1) {
            throwBindingError(humanName + " called with " + arguments.length + " arguments, expected " + (argCount - 1));
          }
          destructors.length = 0;
          args.length = argCount;
          for (var i = 1; i < argCount; ++i) {
            args[i] = argTypes[i]["toWireType"](destructors, arguments[i - 1]);
          }
          var ptr = invoker.apply(null, args);
          runDestructors(destructors);
          return argTypes[0]["fromWireType"](ptr);
        };
        return [];
      });
      return [];
    });
  }
  function new_(constructor, argumentList) {
    if (!(constructor instanceof Function)) {
      throw new TypeError("new_ called with constructor type " + typeof constructor + " which is not a function");
    }
    var dummy = createNamedFunction(constructor.name || "unknownFunctionName", function() {
    });
    dummy.prototype = constructor.prototype;
    var obj = new dummy();
    var r = constructor.apply(obj, argumentList);
    return r instanceof Object ? r : obj;
  }
  function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
    var argCount = argTypes.length;
    if (argCount < 2) {
      throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
    }
    var isClassMethodFunc = argTypes[1] !== null && classType !== null;
    var needsDestructorStack = false;
    for (var i = 1; i < argTypes.length; ++i) {
      if (argTypes[i] !== null && argTypes[i].destructorFunction === void 0) {
        needsDestructorStack = true;
        break;
      }
    }
    var returns = argTypes[0].name !== "void";
    var argsList = "";
    var argsListWired = "";
    for (var i = 0; i < argCount - 2; ++i) {
      argsList += (i !== 0 ? ", " : "") + "arg" + i;
      argsListWired += (i !== 0 ? ", " : "") + "arg" + i + "Wired";
    }
    var invokerFnBody = "return function " + makeLegalFunctionName(humanName) + "(" + argsList + ") {\nif (arguments.length !== " + (argCount - 2) + ") {\nthrowBindingError('function " + humanName + " called with ' + arguments.length + ' arguments, expected " + (argCount - 2) + " args!');\n}\n";
    if (needsDestructorStack) {
      invokerFnBody += "var destructors = [];\n";
    }
    var dtorStack = needsDestructorStack ? "destructors" : "null";
    var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
    var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
    if (isClassMethodFunc) {
      invokerFnBody += "var thisWired = classParam.toWireType(" + dtorStack + ", this);\n";
    }
    for (var i = 0; i < argCount - 2; ++i) {
      invokerFnBody += "var arg" + i + "Wired = argType" + i + ".toWireType(" + dtorStack + ", arg" + i + "); // " + argTypes[i + 2].name + "\n";
      args1.push("argType" + i);
      args2.push(argTypes[i + 2]);
    }
    if (isClassMethodFunc) {
      argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
    }
    invokerFnBody += (returns ? "var rv = " : "") + "invoker(fn" + (argsListWired.length > 0 ? ", " : "") + argsListWired + ");\n";
    if (needsDestructorStack) {
      invokerFnBody += "runDestructors(destructors);\n";
    } else {
      for (var i = isClassMethodFunc ? 1 : 2; i < argTypes.length; ++i) {
        var paramName = i === 1 ? "thisWired" : "arg" + (i - 2) + "Wired";
        if (argTypes[i].destructorFunction !== null) {
          invokerFnBody += paramName + "_dtor(" + paramName + "); // " + argTypes[i].name + "\n";
          args1.push(paramName + "_dtor");
          args2.push(argTypes[i].destructorFunction);
        }
      }
    }
    if (returns) {
      invokerFnBody += "var ret = retType.fromWireType(rv);\nreturn ret;\n";
    }
    invokerFnBody += "}\n";
    args1.push(invokerFnBody);
    var invokerFunction = new_(Function, args1).apply(null, args2);
    return invokerFunction;
  }
  function __embind_register_class_function(rawClassType, methodName, argCount, rawArgTypesAddr, invokerSignature, rawInvoker, context, isPureVirtual) {
    var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    methodName = readLatin1String(methodName);
    rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
    whenDependentTypesAreResolved([], [rawClassType], function(classType) {
      classType = classType[0];
      var humanName = classType.name + "." + methodName;
      if (isPureVirtual) {
        classType.registeredClass.pureVirtualFunctions.push(methodName);
      }
      function unboundTypesHandler() {
        throwUnboundTypeError("Cannot call " + humanName + " due to unbound types", rawArgTypes);
      }
      var proto = classType.registeredClass.instancePrototype;
      var method = proto[methodName];
      if (method === void 0 || method.overloadTable === void 0 && method.className !== classType.name && method.argCount === argCount - 2) {
        unboundTypesHandler.argCount = argCount - 2;
        unboundTypesHandler.className = classType.name;
        proto[methodName] = unboundTypesHandler;
      } else {
        ensureOverloadTable(proto, methodName, humanName);
        proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
      }
      whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
        var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
        if (proto[methodName].overloadTable === void 0) {
          memberFunction.argCount = argCount - 2;
          proto[methodName] = memberFunction;
        } else {
          proto[methodName].overloadTable[argCount - 2] = memberFunction;
        }
        return [];
      });
      return [];
    });
  }
  var emval_free_list = [];
  var emval_handle_array = [{}, {
    value: void 0
  }, {
    value: null
  }, {
    value: true
  }, {
    value: false
  }];
  function __emval_decref(handle) {
    if (handle > 4 && --emval_handle_array[handle].refcount === 0) {
      emval_handle_array[handle] = void 0;
      emval_free_list.push(handle);
    }
  }
  function count_emval_handles() {
    var count = 0;
    for (var i = 5; i < emval_handle_array.length; ++i) {
      if (emval_handle_array[i] !== void 0) {
        ++count;
      }
    }
    return count;
  }
  function get_first_emval() {
    for (var i = 5; i < emval_handle_array.length; ++i) {
      if (emval_handle_array[i] !== void 0) {
        return emval_handle_array[i];
      }
    }
    return null;
  }
  function init_emval() {
    Module["count_emval_handles"] = count_emval_handles;
    Module["get_first_emval"] = get_first_emval;
  }
  function __emval_register(value) {
    switch (value) {
      case void 0: {
        return 1;
      }
      case null: {
        return 2;
      }
      case true: {
        return 3;
      }
      case false: {
        return 4;
      }
      default: {
        var handle = emval_free_list.length ? emval_free_list.pop() : emval_handle_array.length;
        emval_handle_array[handle] = {
          refcount: 1,
          value
        };
        return handle;
      }
    }
  }
  function __embind_register_emval(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
      name,
      fromWireType: function(handle) {
        var rv = emval_handle_array[handle].value;
        __emval_decref(handle);
        return rv;
      },
      toWireType: function(destructors, value) {
        return __emval_register(value);
      },
      argPackAdvance: 8,
      readValueFromPointer: simpleReadValueFromPointer,
      destructorFunction: null
    });
  }
  function _embind_repr(v) {
    if (v === null) {
      return "null";
    }
    var t = typeof v;
    if (t === "object" || t === "array" || t === "function") {
      return v.toString();
    } else {
      return "" + v;
    }
  }
  function floatReadValueFromPointer(name, shift) {
    switch (shift) {
      case 2:
        return function(pointer) {
          return this["fromWireType"](HEAPF32[pointer >> 2]);
        };
      case 3:
        return function(pointer) {
          return this["fromWireType"](HEAPF64[pointer >> 3]);
        };
      default:
        throw new TypeError("Unknown float type: " + name);
    }
  }
  function __embind_register_float(rawType, name, size) {
    var shift = getShiftFromSize(size);
    name = readLatin1String(name);
    registerType(rawType, {
      name,
      fromWireType: function(value) {
        return value;
      },
      toWireType: function(destructors, value) {
        if (typeof value !== "number" && typeof value !== "boolean") {
          throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
        }
        return value;
      },
      argPackAdvance: 8,
      readValueFromPointer: floatReadValueFromPointer(name, shift),
      destructorFunction: null
    });
  }
  function integerReadValueFromPointer(name, shift, signed) {
    switch (shift) {
      case 0:
        return signed ? function readS8FromPointer(pointer) {
          return HEAP8[pointer];
        } : function readU8FromPointer(pointer) {
          return HEAPU8[pointer];
        };
      case 1:
        return signed ? function readS16FromPointer(pointer) {
          return HEAP16[pointer >> 1];
        } : function readU16FromPointer(pointer) {
          return HEAPU16[pointer >> 1];
        };
      case 2:
        return signed ? function readS32FromPointer(pointer) {
          return HEAP32[pointer >> 2];
        } : function readU32FromPointer(pointer) {
          return HEAPU32[pointer >> 2];
        };
      default:
        throw new TypeError("Unknown integer type: " + name);
    }
  }
  function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
    name = readLatin1String(name);
    if (maxRange === -1) {
      maxRange = 4294967295;
    }
    var shift = getShiftFromSize(size);
    var fromWireType = function(value) {
      return value;
    };
    if (minRange === 0) {
      var bitshift = 32 - 8 * size;
      fromWireType = function(value) {
        return value << bitshift >>> bitshift;
      };
    }
    var isUnsignedType = name.indexOf("unsigned") != -1;
    registerType(primitiveType, {
      name,
      fromWireType,
      toWireType: function(destructors, value) {
        if (typeof value !== "number" && typeof value !== "boolean") {
          throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
        }
        if (value < minRange || value > maxRange) {
          throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ", " + maxRange + "]!");
        }
        return isUnsignedType ? value >>> 0 : value | 0;
      },
      argPackAdvance: 8,
      readValueFromPointer: integerReadValueFromPointer(name, shift, minRange !== 0),
      destructorFunction: null
    });
  }
  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
    var typeMapping = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array];
    var TA = typeMapping[dataTypeIndex];
    function decodeMemoryView(handle) {
      handle = handle >> 2;
      var heap = HEAPU32;
      var size = heap[handle];
      var data = heap[handle + 1];
      return new TA(buffer, data, size);
    }
    name = readLatin1String(name);
    registerType(rawType, {
      name,
      fromWireType: decodeMemoryView,
      argPackAdvance: 8,
      readValueFromPointer: decodeMemoryView
    }, {
      ignoreDuplicateRegistrations: true
    });
  }
  function __embind_register_std_string(rawType, name) {
    name = readLatin1String(name);
    var stdStringIsUTF8 = name === "std::string";
    registerType(rawType, {
      name,
      fromWireType: function(value) {
        var length = HEAPU32[value >> 2];
        var str;
        if (stdStringIsUTF8) {
          var decodeStartPtr = value + 4;
          for (var i = 0; i <= length; ++i) {
            var currentBytePtr = value + 4 + i;
            if (HEAPU8[currentBytePtr] == 0 || i == length) {
              var maxRead = currentBytePtr - decodeStartPtr;
              var stringSegment = UTF8ToString(decodeStartPtr, maxRead);
              if (str === void 0) {
                str = stringSegment;
              } else {
                str += String.fromCharCode(0);
                str += stringSegment;
              }
              decodeStartPtr = currentBytePtr + 1;
            }
          }
        } else {
          var a = new Array(length);
          for (var i = 0; i < length; ++i) {
            a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
          }
          str = a.join("");
        }
        _free(value);
        return str;
      },
      toWireType: function(destructors, value) {
        if (value instanceof ArrayBuffer) {
          value = new Uint8Array(value);
        }
        var getLength;
        var valueIsOfTypeString = typeof value === "string";
        if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
          throwBindingError("Cannot pass non-string to std::string");
        }
        if (stdStringIsUTF8 && valueIsOfTypeString) {
          getLength = function() {
            return lengthBytesUTF8(value);
          };
        } else {
          getLength = function() {
            return value.length;
          };
        }
        var length = getLength();
        var ptr = _malloc(4 + length + 1);
        HEAPU32[ptr >> 2] = length;
        if (stdStringIsUTF8 && valueIsOfTypeString) {
          stringToUTF8(value, ptr + 4, length + 1);
        } else {
          if (valueIsOfTypeString) {
            for (var i = 0; i < length; ++i) {
              var charCode = value.charCodeAt(i);
              if (charCode > 255) {
                _free(ptr);
                throwBindingError("String has UTF-16 code units that do not fit in 8 bits");
              }
              HEAPU8[ptr + 4 + i] = charCode;
            }
          } else {
            for (var i = 0; i < length; ++i) {
              HEAPU8[ptr + 4 + i] = value[i];
            }
          }
        }
        if (destructors !== null) {
          destructors.push(_free, ptr);
        }
        return ptr;
      },
      argPackAdvance: 8,
      readValueFromPointer: simpleReadValueFromPointer,
      destructorFunction: function(ptr) {
        _free(ptr);
      }
    });
  }
  function __embind_register_std_wstring(rawType, charSize, name) {
    name = readLatin1String(name);
    var decodeString, encodeString, getHeap, lengthBytesUTF, shift;
    if (charSize === 2) {
      decodeString = UTF16ToString;
      encodeString = stringToUTF16;
      lengthBytesUTF = lengthBytesUTF16;
      getHeap = function() {
        return HEAPU16;
      };
      shift = 1;
    } else if (charSize === 4) {
      decodeString = UTF32ToString;
      encodeString = stringToUTF32;
      lengthBytesUTF = lengthBytesUTF32;
      getHeap = function() {
        return HEAPU32;
      };
      shift = 2;
    }
    registerType(rawType, {
      name,
      fromWireType: function(value) {
        var length = HEAPU32[value >> 2];
        var HEAP = getHeap();
        var str;
        var decodeStartPtr = value + 4;
        for (var i = 0; i <= length; ++i) {
          var currentBytePtr = value + 4 + i * charSize;
          if (HEAP[currentBytePtr >> shift] == 0 || i == length) {
            var maxReadBytes = currentBytePtr - decodeStartPtr;
            var stringSegment = decodeString(decodeStartPtr, maxReadBytes);
            if (str === void 0) {
              str = stringSegment;
            } else {
              str += String.fromCharCode(0);
              str += stringSegment;
            }
            decodeStartPtr = currentBytePtr + charSize;
          }
        }
        _free(value);
        return str;
      },
      toWireType: function(destructors, value) {
        if (!(typeof value === "string")) {
          throwBindingError("Cannot pass non-string to C++ string type " + name);
        }
        var length = lengthBytesUTF(value);
        var ptr = _malloc(4 + length + charSize);
        HEAPU32[ptr >> 2] = length >> shift;
        encodeString(value, ptr + 4, length + charSize);
        if (destructors !== null) {
          destructors.push(_free, ptr);
        }
        return ptr;
      },
      argPackAdvance: 8,
      readValueFromPointer: simpleReadValueFromPointer,
      destructorFunction: function(ptr) {
        _free(ptr);
      }
    });
  }
  function __embind_register_value_object(rawType, name, constructorSignature, rawConstructor, destructorSignature, rawDestructor) {
    structRegistrations[rawType] = {
      name: readLatin1String(name),
      rawConstructor: embind__requireFunction(constructorSignature, rawConstructor),
      rawDestructor: embind__requireFunction(destructorSignature, rawDestructor),
      fields: []
    };
  }
  function __embind_register_value_object_field(structType, fieldName, getterReturnType, getterSignature, getter, getterContext, setterArgumentType, setterSignature, setter, setterContext) {
    structRegistrations[structType].fields.push({
      fieldName: readLatin1String(fieldName),
      getterReturnType,
      getter: embind__requireFunction(getterSignature, getter),
      getterContext,
      setterArgumentType,
      setter: embind__requireFunction(setterSignature, setter),
      setterContext
    });
  }
  function __embind_register_void(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
      isVoid: true,
      name,
      argPackAdvance: 0,
      fromWireType: function() {
        return void 0;
      },
      toWireType: function(destructors, o) {
        return void 0;
      }
    });
  }
  function __emval_incref(handle) {
    if (handle > 4) {
      emval_handle_array[handle].refcount += 1;
    }
  }
  function requireRegisteredType(rawType, humanName) {
    var impl = registeredTypes[rawType];
    if (impl === void 0) {
      throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
    }
    return impl;
  }
  function __emval_take_value(type, argv2) {
    type = requireRegisteredType(type, "_emval_take_value");
    var v = type["readValueFromPointer"](argv2);
    return __emval_register(v);
  }
  function _abort() {
    abort();
  }
  function _emscripten_get_sbrk_ptr() {
    return 45648;
  }
  function _emscripten_memcpy_big(dest, src, num) {
    HEAPU8.copyWithin(dest, src, src + num);
  }
  function _emscripten_get_heap_size() {
    return HEAPU8.length;
  }
  function emscripten_realloc_buffer(size) {
    try {
      wasmMemory.grow(size - buffer.byteLength + 65535 >>> 16);
      updateGlobalBufferAndViews(wasmMemory.buffer);
      return 1;
    } catch (e) {
    }
  }
  function _emscripten_resize_heap(requestedSize) {
    requestedSize = requestedSize >>> 0;
    var oldSize = _emscripten_get_heap_size();
    var PAGE_MULTIPLE = 65536;
    var maxHeapSize = 2147483648;
    if (requestedSize > maxHeapSize) {
      return false;
    }
    var minHeapSize = 16777216;
    for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
      var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown);
      overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);
      var newSize = Math.min(maxHeapSize, alignUp(Math.max(minHeapSize, requestedSize, overGrownHeapSize), PAGE_MULTIPLE));
      var replacement = emscripten_realloc_buffer(newSize);
      if (replacement) {
        return true;
      }
    }
    return false;
  }
  InternalError = Module["InternalError"] = extendError(Error, "InternalError");
  embind_init_charCodes();
  BindingError = Module["BindingError"] = extendError(Error, "BindingError");
  init_ClassHandle();
  init_RegisteredPointer();
  init_embind();
  UnboundTypeError = Module["UnboundTypeError"] = extendError(Error, "UnboundTypeError");
  init_emval();
  var asmLibraryArg = {
    __cxa_allocate_exception: ___cxa_allocate_exception,
    __cxa_atexit: ___cxa_atexit,
    __cxa_throw: ___cxa_throw,
    _embind_finalize_value_object: __embind_finalize_value_object,
    _embind_register_bool: __embind_register_bool,
    _embind_register_class: __embind_register_class,
    _embind_register_class_constructor: __embind_register_class_constructor,
    _embind_register_class_function: __embind_register_class_function,
    _embind_register_emval: __embind_register_emval,
    _embind_register_float: __embind_register_float,
    _embind_register_integer: __embind_register_integer,
    _embind_register_memory_view: __embind_register_memory_view,
    _embind_register_std_string: __embind_register_std_string,
    _embind_register_std_wstring: __embind_register_std_wstring,
    _embind_register_value_object: __embind_register_value_object,
    _embind_register_value_object_field: __embind_register_value_object_field,
    _embind_register_void: __embind_register_void,
    _emval_decref: __emval_decref,
    _emval_incref: __emval_incref,
    _emval_take_value: __emval_take_value,
    abort: _abort,
    emscripten_get_sbrk_ptr: _emscripten_get_sbrk_ptr,
    emscripten_memcpy_big: _emscripten_memcpy_big,
    emscripten_resize_heap: _emscripten_resize_heap,
    memory: wasmMemory,
    table: wasmTable
  };
  var asm = createWasm();
  var ___wasm_call_ctors = Module["___wasm_call_ctors"] = function() {
    return (___wasm_call_ctors = Module["___wasm_call_ctors"] = Module["asm"]["__wasm_call_ctors"]).apply(null, arguments);
  };
  var ___getTypeName = Module["___getTypeName"] = function() {
    return (___getTypeName = Module["___getTypeName"] = Module["asm"]["__getTypeName"]).apply(null, arguments);
  };
  var ___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = function() {
    return (___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = Module["asm"]["__embind_register_native_and_builtin_types"]).apply(null, arguments);
  };
  var ___errno_location = Module["___errno_location"] = function() {
    return (___errno_location = Module["___errno_location"] = Module["asm"]["__errno_location"]).apply(null, arguments);
  };
  var _malloc = Module["_malloc"] = function() {
    return (_malloc = Module["_malloc"] = Module["asm"]["malloc"]).apply(null, arguments);
  };
  var _setThrew = Module["_setThrew"] = function() {
    return (_setThrew = Module["_setThrew"] = Module["asm"]["setThrew"]).apply(null, arguments);
  };
  var stackSave = Module["stackSave"] = function() {
    return (stackSave = Module["stackSave"] = Module["asm"]["stackSave"]).apply(null, arguments);
  };
  var stackRestore = Module["stackRestore"] = function() {
    return (stackRestore = Module["stackRestore"] = Module["asm"]["stackRestore"]).apply(null, arguments);
  };
  var stackAlloc = Module["stackAlloc"] = function() {
    return (stackAlloc = Module["stackAlloc"] = Module["asm"]["stackAlloc"]).apply(null, arguments);
  };
  var _free = Module["_free"] = function() {
    return (_free = Module["_free"] = Module["asm"]["free"]).apply(null, arguments);
  };
  var __growWasmMemory = Module["__growWasmMemory"] = function() {
    return (__growWasmMemory = Module["__growWasmMemory"] = Module["asm"]["__growWasmMemory"]).apply(null, arguments);
  };
  var dynCall_i = Module["dynCall_i"] = function() {
    return (dynCall_i = Module["dynCall_i"] = Module["asm"]["dynCall_i"]).apply(null, arguments);
  };
  var dynCall_vi = Module["dynCall_vi"] = function() {
    return (dynCall_vi = Module["dynCall_vi"] = Module["asm"]["dynCall_vi"]).apply(null, arguments);
  };
  var dynCall_iii = Module["dynCall_iii"] = function() {
    return (dynCall_iii = Module["dynCall_iii"] = Module["asm"]["dynCall_iii"]).apply(null, arguments);
  };
  var dynCall_viii = Module["dynCall_viii"] = function() {
    return (dynCall_viii = Module["dynCall_viii"] = Module["asm"]["dynCall_viii"]).apply(null, arguments);
  };
  var dynCall_ii = Module["dynCall_ii"] = function() {
    return (dynCall_ii = Module["dynCall_ii"] = Module["asm"]["dynCall_ii"]).apply(null, arguments);
  };
  var dynCall_iiii = Module["dynCall_iiii"] = function() {
    return (dynCall_iiii = Module["dynCall_iiii"] = Module["asm"]["dynCall_iiii"]).apply(null, arguments);
  };
  var dynCall_vii = Module["dynCall_vii"] = function() {
    return (dynCall_vii = Module["dynCall_vii"] = Module["asm"]["dynCall_vii"]).apply(null, arguments);
  };
  var dynCall_viiii = Module["dynCall_viiii"] = function() {
    return (dynCall_viiii = Module["dynCall_viiii"] = Module["asm"]["dynCall_viiii"]).apply(null, arguments);
  };
  var dynCall_v = Module["dynCall_v"] = function() {
    return (dynCall_v = Module["dynCall_v"] = Module["asm"]["dynCall_v"]).apply(null, arguments);
  };
  var dynCall_viiiiii = Module["dynCall_viiiiii"] = function() {
    return (dynCall_viiiiii = Module["dynCall_viiiiii"] = Module["asm"]["dynCall_viiiiii"]).apply(null, arguments);
  };
  var dynCall_viiiii = Module["dynCall_viiiii"] = function() {
    return (dynCall_viiiii = Module["dynCall_viiiii"] = Module["asm"]["dynCall_viiiii"]).apply(null, arguments);
  };
  Module["ccall"] = ccall;
  var calledRun;
  function ExitStatus(status) {
    this.name = "ExitStatus";
    this.message = "Program terminated with exit(" + status + ")";
    this.status = status;
  }
  dependenciesFulfilled = function runCaller() {
    if (!calledRun)
      run();
    if (!calledRun)
      dependenciesFulfilled = runCaller;
  };
  function run(args) {
    if (runDependencies > 0) {
      return;
    }
    preRun();
    if (runDependencies > 0)
      return;
    function doRun() {
      if (calledRun)
        return;
      calledRun = true;
      Module["calledRun"] = true;
      if (ABORT)
        return;
      initRuntime();
      preMain();
      if (Module["onRuntimeInitialized"])
        Module["onRuntimeInitialized"](Module);
      postRun();
    }
    if (Module["setStatus"]) {
      Module["setStatus"]("Running...");
      setTimeout(function() {
        setTimeout(function() {
          Module["setStatus"]("");
        }, 1);
        doRun();
      }, 1);
    } else {
      doRun();
    }
  }
  Module["run"] = run;
  if (Module["preInit"]) {
    if (typeof Module["preInit"] == "function")
      Module["preInit"] = [Module["preInit"]];
    while (Module["preInit"].length > 0) {
      Module["preInit"].pop()();
    }
  }
  Module.then = (callback) => {
    Module["onRuntimeInitialized"] = callback;
  };
  run();
  return Module;
};
class JPEGLosslessDecoder$1 extends Decoder {
  constructor() {
    super(...arguments);
    this.jpegs = null;
  }
  decode(frameNo) {
    const {
      image
    } = this;
    if (!this.jpegs) {
      this.jpegs = getJpegData(image.data);
    }
    return new Promise((resolve) => {
      CharLS({}).then((charLS) => {
        const decoder = new charLS.JpegLSDecoder();
        const jpeg = this.jpegs[frameNo];
        const buffer = new Uint8Array(jpeg.buffer, jpeg.byteOffset, jpeg.byteLength);
        const encodedBuffer = decoder.getEncodedBuffer(buffer.length);
        encodedBuffer.set(buffer);
        decoder.decode();
        const decoded = decoder.getDecodedBuffer();
        return resolve(decoded);
      });
    });
  }
}
var OpenJPEGWASM = function() {
  var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;
  _scriptDir = _scriptDir || __filename;
  return function(OpenJPEGWASM2) {
    OpenJPEGWASM2 = OpenJPEGWASM2 || {};
    var Module = typeof OpenJPEGWASM2 !== "undefined" ? OpenJPEGWASM2 : {};
    var moduleOverrides = {};
    var key;
    for (key in Module) {
      if (Module.hasOwnProperty(key)) {
        moduleOverrides[key] = Module[key];
      }
    }
    var thisProgram = "./this.program";
    var ENVIRONMENT_IS_WEB = false;
    var ENVIRONMENT_IS_WORKER = false;
    var ENVIRONMENT_IS_NODE = false;
    var ENVIRONMENT_HAS_NODE = false;
    var ENVIRONMENT_IS_SHELL = false;
    ENVIRONMENT_IS_WEB = typeof window === "object";
    ENVIRONMENT_IS_WORKER = typeof importScripts === "function";
    ENVIRONMENT_HAS_NODE = typeof process === "object" && typeof process.versions === "object" && typeof process.versions.node === "string";
    ENVIRONMENT_IS_NODE = ENVIRONMENT_HAS_NODE && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
    ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
    if (ENVIRONMENT_IS_NODE && globalThis && !globalThis.fetch) {
      globalThis.fetch = require("node-fetch");
    }
    var scriptDirectory = "";
    function locateFile(path) {
      if (Module["locateFile"]) {
        return Module["locateFile"](path, scriptDirectory);
      }
      return scriptDirectory + path;
    }
    var read_, readBinary;
    var nodeFS;
    var nodePath;
    if (ENVIRONMENT_HAS_NODE) {
      scriptDirectory = __dirname + "/";
      read_ = function shell_read(filename, binary) {
        if (!nodeFS)
          nodeFS = require("fs");
        if (!nodePath)
          nodePath = require("path");
        filename = nodePath["normalize"](filename);
        return nodeFS["readFileSync"](filename, binary ? null : "utf8");
      };
      readBinary = function readBinary2(filename) {
        var ret = read_(filename, true);
        if (!ret.buffer) {
          ret = new Uint8Array(ret);
        }
        assert(ret.buffer);
        return ret;
      };
      if (process["argv"].length > 1) {
        thisProgram = process["argv"][1].replace(/\\/g, "/");
      }
      process["argv"].slice(2);
      process["on"]("uncaughtException", function(ex) {
        if (!(ex instanceof ExitStatus)) {
          throw ex;
        }
      });
      process["on"]("unhandledRejection", abort);
      Module["inspect"] = function() {
        return "[Emscripten Module object]";
      };
    } else if (ENVIRONMENT_IS_SHELL) {
      if (typeof read != "undefined") {
        read_ = function shell_read(f) {
          return read(f);
        };
      }
      readBinary = function readBinary2(f) {
        var data;
        if (typeof readbuffer === "function") {
          return new Uint8Array(readbuffer(f));
        }
        data = read(f, "binary");
        assert(typeof data === "object");
        return data;
      };
      if (typeof scriptArgs != "undefined") {
        scriptArgs;
      }
      if (typeof print !== "undefined") {
        if (typeof console === "undefined")
          console = {};
        console.log = print;
        console.warn = console.error = typeof printErr !== "undefined" ? printErr : print;
      }
    } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
      if (ENVIRONMENT_IS_WORKER) {
        scriptDirectory = self.location.href;
      } else if (document.currentScript) {
        scriptDirectory = document.currentScript.src;
      }
      if (_scriptDir) {
        scriptDirectory = _scriptDir;
      }
      if (scriptDirectory.indexOf("blob:") !== 0) {
        scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf("/") + 1);
      } else {
        scriptDirectory = "";
      }
      {
        read_ = function shell_read(url) {
          var xhr = new XMLHttpRequest();
          xhr.open("GET", url, false);
          xhr.send(null);
          return xhr.responseText;
        };
        if (ENVIRONMENT_IS_WORKER) {
          readBinary = function readBinary2(url) {
            var xhr = new XMLHttpRequest();
            xhr.open("GET", url, false);
            xhr.responseType = "arraybuffer";
            xhr.send(null);
            return new Uint8Array(xhr.response);
          };
        }
      }
    }
    var out = () => {
    };
    var err = Module["printErr"] || console.warn.bind(console);
    for (key in moduleOverrides) {
      if (moduleOverrides.hasOwnProperty(key)) {
        Module[key] = moduleOverrides[key];
      }
    }
    moduleOverrides = null;
    if (Module["arguments"])
      Module["arguments"];
    if (Module["thisProgram"])
      thisProgram = Module["thisProgram"];
    function dynamicAlloc(size) {
      var ret = HEAP32[DYNAMICTOP_PTR >> 2];
      var end = ret + size + 15 & -16;
      if (end > _emscripten_get_heap_size()) {
        abort();
      }
      HEAP32[DYNAMICTOP_PTR >> 2] = end;
      return ret;
    }
    var asm2wasmImports = {
      "f64-rem": function(x, y) {
        return x % y;
      },
      debugger: function() {
      }
    };
    var functionPointers = new Array(0);
    var tempRet0 = 0;
    var setTempRet0 = function(value) {
      tempRet0 = value;
    };
    var getTempRet0 = function() {
      return tempRet0;
    };
    var wasmBinary;
    if (Module["wasmBinary"])
      wasmBinary = Module["wasmBinary"];
    if (typeof WebAssembly !== "object") {
      err("no native wasm support detected");
    }
    var wasmMemory;
    var wasmTable = new WebAssembly.Table({
      initial: 370,
      maximum: 370,
      element: "anyfunc"
    });
    var ABORT = false;
    function assert(condition, text) {
      if (!condition) {
        abort("Assertion failed: " + text);
      }
    }
    function getCFunc(ident) {
      var func = Module["_" + ident];
      assert(func, "Cannot call unknown function " + ident + ", make sure it is exported");
      return func;
    }
    function ccall(ident, returnType, argTypes, args, opts) {
      var toC = {
        string: function(str) {
          var ret2 = 0;
          if (str !== null && str !== void 0 && str !== 0) {
            var len = (str.length << 2) + 1;
            ret2 = stackAlloc(len);
            stringToUTF8(str, ret2, len);
          }
          return ret2;
        },
        array: function(arr) {
          var ret2 = stackAlloc(arr.length);
          writeArrayToMemory(arr, ret2);
          return ret2;
        }
      };
      function convertReturnValue(ret2) {
        if (returnType === "string")
          return UTF8ToString(ret2);
        if (returnType === "boolean")
          return Boolean(ret2);
        return ret2;
      }
      var func = getCFunc(ident);
      var cArgs = [];
      var stack = 0;
      if (args) {
        for (var i = 0; i < args.length; i++) {
          var converter = toC[argTypes[i]];
          if (converter) {
            if (stack === 0)
              stack = stackSave();
            cArgs[i] = converter(args[i]);
          } else {
            cArgs[i] = args[i];
          }
        }
      }
      var ret = func.apply(null, cArgs);
      ret = convertReturnValue(ret);
      if (stack !== 0)
        stackRestore(stack);
      return ret;
    }
    function getMemory(size) {
      if (!runtimeInitialized)
        return dynamicAlloc(size);
      return _malloc(size);
    }
    var UTF8Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf8") : void 0;
    function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
      var endIdx = idx + maxBytesToRead;
      var endPtr = idx;
      while (u8Array[endPtr] && !(endPtr >= endIdx))
        ++endPtr;
      if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
        return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
      } else {
        var str = "";
        while (idx < endPtr) {
          var u0 = u8Array[idx++];
          if (!(u0 & 128)) {
            str += String.fromCharCode(u0);
            continue;
          }
          var u1 = u8Array[idx++] & 63;
          if ((u0 & 224) == 192) {
            str += String.fromCharCode((u0 & 31) << 6 | u1);
            continue;
          }
          var u2 = u8Array[idx++] & 63;
          if ((u0 & 240) == 224) {
            u0 = (u0 & 15) << 12 | u1 << 6 | u2;
          } else {
            u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | u8Array[idx++] & 63;
          }
          if (u0 < 65536) {
            str += String.fromCharCode(u0);
          } else {
            var ch = u0 - 65536;
            str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
          }
        }
      }
      return str;
    }
    function UTF8ToString(ptr, maxBytesToRead) {
      return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
    }
    function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
      if (!(maxBytesToWrite > 0))
        return 0;
      var startIdx = outIdx;
      var endIdx = outIdx + maxBytesToWrite - 1;
      for (var i = 0; i < str.length; ++i) {
        var u = str.charCodeAt(i);
        if (u >= 55296 && u <= 57343) {
          var u1 = str.charCodeAt(++i);
          u = 65536 + ((u & 1023) << 10) | u1 & 1023;
        }
        if (u <= 127) {
          if (outIdx >= endIdx)
            break;
          outU8Array[outIdx++] = u;
        } else if (u <= 2047) {
          if (outIdx + 1 >= endIdx)
            break;
          outU8Array[outIdx++] = 192 | u >> 6;
          outU8Array[outIdx++] = 128 | u & 63;
        } else if (u <= 65535) {
          if (outIdx + 2 >= endIdx)
            break;
          outU8Array[outIdx++] = 224 | u >> 12;
          outU8Array[outIdx++] = 128 | u >> 6 & 63;
          outU8Array[outIdx++] = 128 | u & 63;
        } else {
          if (outIdx + 3 >= endIdx)
            break;
          outU8Array[outIdx++] = 240 | u >> 18;
          outU8Array[outIdx++] = 128 | u >> 12 & 63;
          outU8Array[outIdx++] = 128 | u >> 6 & 63;
          outU8Array[outIdx++] = 128 | u & 63;
        }
      }
      outU8Array[outIdx] = 0;
      return outIdx - startIdx;
    }
    function stringToUTF8(str, outPtr, maxBytesToWrite) {
      return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
    }
    function lengthBytesUTF8(str) {
      var len = 0;
      for (var i = 0; i < str.length; ++i) {
        var u = str.charCodeAt(i);
        if (u >= 55296 && u <= 57343)
          u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
        if (u <= 127)
          ++len;
        else if (u <= 2047)
          len += 2;
        else if (u <= 65535)
          len += 3;
        else
          len += 4;
      }
      return len;
    }
    var UTF16Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-16le") : void 0;
    function allocateUTF8(str) {
      var size = lengthBytesUTF8(str) + 1;
      var ret = _malloc(size);
      if (ret)
        stringToUTF8Array(str, HEAP8, ret, size);
      return ret;
    }
    function writeArrayToMemory(array, buffer2) {
      HEAP8.set(array, buffer2);
    }
    function writeAsciiToMemory(str, buffer2, dontAddNull) {
      for (var i = 0; i < str.length; ++i) {
        HEAP8[buffer2++ >> 0] = str.charCodeAt(i);
      }
      if (!dontAddNull)
        HEAP8[buffer2 >> 0] = 0;
    }
    var PAGE_SIZE = 16384;
    var WASM_PAGE_SIZE = 65536;
    function alignUp(x, multiple) {
      if (x % multiple > 0) {
        x += multiple - x % multiple;
      }
      return x;
    }
    var buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
    function updateGlobalBufferAndViews(buf) {
      buffer = buf;
      Module["HEAP8"] = HEAP8 = new Int8Array(buf);
      Module["HEAP16"] = HEAP16 = new Int16Array(buf);
      Module["HEAP32"] = HEAP32 = new Int32Array(buf);
      Module["HEAPU8"] = HEAPU8 = new Uint8Array(buf);
      Module["HEAPU16"] = HEAPU16 = new Uint16Array(buf);
      Module["HEAPU32"] = HEAPU32 = new Uint32Array(buf);
      Module["HEAPF32"] = HEAPF32 = new Float32Array(buf);
      Module["HEAPF64"] = HEAPF64 = new Float64Array(buf);
    }
    var DYNAMIC_BASE = 5281584, DYNAMICTOP_PTR = 38512;
    var INITIAL_TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 1073741824;
    if (Module["wasmMemory"]) {
      wasmMemory = Module["wasmMemory"];
    } else {
      wasmMemory = new WebAssembly.Memory({
        initial: INITIAL_TOTAL_MEMORY / WASM_PAGE_SIZE
      });
    }
    if (wasmMemory) {
      buffer = wasmMemory.buffer;
    }
    INITIAL_TOTAL_MEMORY = buffer.byteLength;
    updateGlobalBufferAndViews(buffer);
    HEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;
    function callRuntimeCallbacks(callbacks) {
      while (callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == "function") {
          callback();
          continue;
        }
        var func = callback.func;
        if (typeof func === "number") {
          if (callback.arg === void 0) {
            Module["dynCall_v"](func);
          } else {
            Module["dynCall_vi"](func, callback.arg);
          }
        } else {
          func(callback.arg === void 0 ? null : callback.arg);
        }
      }
    }
    var __ATPRERUN__ = [];
    var __ATINIT__ = [];
    var __ATMAIN__ = [];
    var __ATPOSTRUN__ = [];
    var runtimeInitialized = false;
    function preRun() {
      if (Module["preRun"]) {
        if (typeof Module["preRun"] == "function")
          Module["preRun"] = [Module["preRun"]];
        while (Module["preRun"].length) {
          addOnPreRun(Module["preRun"].shift());
        }
      }
      callRuntimeCallbacks(__ATPRERUN__);
    }
    function initRuntime() {
      runtimeInitialized = true;
      callRuntimeCallbacks(__ATINIT__);
    }
    function preMain() {
      callRuntimeCallbacks(__ATMAIN__);
    }
    function postRun() {
      if (Module["postRun"]) {
        if (typeof Module["postRun"] == "function")
          Module["postRun"] = [Module["postRun"]];
        while (Module["postRun"].length) {
          addOnPostRun(Module["postRun"].shift());
        }
      }
      callRuntimeCallbacks(__ATPOSTRUN__);
    }
    function addOnPreRun(cb) {
      __ATPRERUN__.unshift(cb);
    }
    function addOnPostRun(cb) {
      __ATPOSTRUN__.unshift(cb);
    }
    var runDependencies = 0;
    var dependenciesFulfilled = null;
    function addRunDependency(id) {
      runDependencies++;
      if (Module["monitorRunDependencies"]) {
        Module["monitorRunDependencies"](runDependencies);
      }
    }
    function removeRunDependency(id) {
      runDependencies--;
      if (Module["monitorRunDependencies"]) {
        Module["monitorRunDependencies"](runDependencies);
      }
      if (runDependencies == 0) {
        if (dependenciesFulfilled) {
          var callback = dependenciesFulfilled;
          dependenciesFulfilled = null;
          callback();
        }
      }
    }
    Module["preloadedImages"] = {};
    Module["preloadedAudios"] = {};
    function abort(what) {
      if (Module["onAbort"]) {
        Module["onAbort"](what);
      }
      what += "";
      err(what);
      ABORT = true;
      what = "abort(" + what + "). Build with -s ASSERTIONS=1 for more info.";
      throw new WebAssembly.RuntimeError(what);
    }
    var dataURIPrefix = "data:application/octet-stream;base64,";
    function isDataURI(filename) {
      return String.prototype.startsWith ? filename.startsWith(dataURIPrefix) : filename.indexOf(dataURIPrefix) === 0;
    }
    var wasmBinaryFile = !ENVIRONMENT_HAS_NODE && "data:application/octet-stream;base64,\n" || "openjpeg.wasm";
    if (!isDataURI(wasmBinaryFile)) {
      wasmBinaryFile = locateFile(wasmBinaryFile);
    }
    function getBinary() {
      try {
        if (wasmBinary) {
          return new Uint8Array(wasmBinary);
        }
        if (readBinary) {
          return readBinary(wasmBinaryFile);
        } else {
          throw "both async and sync fetching of the wasm failed";
        }
      } catch (err2) {
        abort(err2);
      }
    }
    function getBinaryPromise() {
      if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === "function") {
        return fetch(wasmBinaryFile, {
          credentials: "same-origin"
        }).then(function(response) {
          if (!response["ok"]) {
            throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
          }
          return response["arrayBuffer"]();
        }).catch(function() {
          return getBinary();
        });
      }
      return new Promise(function(resolve, reject) {
        resolve(getBinary());
      });
    }
    function createWasm() {
      var info = {
        env: asmLibraryArg,
        wasi_unstable: asmLibraryArg,
        global: {
          NaN: NaN,
          Infinity: Infinity
        },
        "global.Math": Math,
        asm2wasm: asm2wasmImports
      };
      function receiveInstance(instance, module2) {
        var exports2 = instance.exports;
        Module["asm"] = exports2;
        removeRunDependency();
      }
      addRunDependency();
      function receiveInstantiatedSource(output) {
        receiveInstance(output["instance"]);
      }
      function instantiateArrayBuffer(receiver) {
        return getBinaryPromise().then(function(binary) {
          return WebAssembly.instantiate(binary, info);
        }).then(receiver, function(reason) {
          err("failed to asynchronously prepare wasm: " + reason);
          abort(reason);
        });
      }
      function instantiateAsync() {
        if (!wasmBinary && typeof WebAssembly.instantiateStreaming === "function" && !isDataURI(wasmBinaryFile) && typeof fetch === "function") {
          fetch(wasmBinaryFile, {
            credentials: "same-origin"
          }).then(function(response) {
            var result = WebAssembly.instantiateStreaming(response, info);
            return result.then(receiveInstantiatedSource, function(reason) {
              err("wasm streaming compile failed: " + reason);
              err("falling back to ArrayBuffer instantiation");
              instantiateArrayBuffer(receiveInstantiatedSource);
            });
          });
        } else {
          return instantiateArrayBuffer(receiveInstantiatedSource);
        }
      }
      if (Module["instantiateWasm"]) {
        try {
          var exports = Module["instantiateWasm"](info, receiveInstance);
          return exports;
        } catch (e) {
          err("Module.instantiateWasm callback failed with error: " + e);
          return false;
        }
      }
      instantiateAsync();
      return {};
    }
    Module["asm"] = createWasm;
    __ATINIT__.push({
      func: function() {
        globalCtors();
      }
    });
    var tempDoublePtr = 38688;
    function demangle(func) {
      return func;
    }
    function demangleAll(text) {
      var regex = /\b__Z[\w\d_]+/g;
      return text.replace(regex, function(x) {
        var y = demangle(x);
        return x === y ? x : y + " [" + x + "]";
      });
    }
    function jsStackTrace() {
      var err2 = new Error();
      if (!err2.stack) {
        try {
          throw new Error(0);
        } catch (e) {
          err2 = e;
        }
        if (!err2.stack) {
          return "(no stack trace available)";
        }
      }
      return err2.stack.toString();
    }
    function stackTrace() {
      var js = jsStackTrace();
      if (Module["extraStackTrace"])
        js += "\n" + Module["extraStackTrace"]();
      return demangleAll(js);
    }
    var ENV = {};
    function ___buildEnvironment(environ) {
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        ENV["USER"] = "web_user";
        ENV["LOGNAME"] = "web_user";
        ENV["PATH"] = "/";
        ENV["PWD"] = "/";
        ENV["HOME"] = "/home/web_user";
        ENV["LANG"] = (typeof navigator === "object" && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8";
        ENV["_"] = thisProgram;
        poolPtr = getMemory(TOTAL_ENV_SIZE);
        envPtr = getMemory(MAX_ENV_VALUES * 4);
        HEAP32[envPtr >> 2] = poolPtr;
        HEAP32[environ >> 2] = envPtr;
      } else {
        envPtr = HEAP32[environ >> 2];
        poolPtr = HEAP32[envPtr >> 2];
      }
      var strings = [];
      var totalSize = 0;
      for (var key2 in ENV) {
        if (typeof ENV[key2] === "string") {
          var line = key2 + "=" + ENV[key2];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error("Environment size exceeded TOTAL_ENV_SIZE!");
      }
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[envPtr + i * ptrSize >> 2] = poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[envPtr + strings.length * ptrSize >> 2] = 0;
    }
    function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }
    var ___exception_infos = {};
    function ___exception_addRef(ptr) {
      if (!ptr)
        return;
      var info = ___exception_infos[ptr];
      info.refcount++;
    }
    function ___exception_deAdjust(adjusted) {
      if (!adjusted || ___exception_infos[adjusted])
        return adjusted;
      for (var key2 in ___exception_infos) {
        var ptr = +key2;
        var adj = ___exception_infos[ptr].adjusted;
        var len = adj.length;
        for (var i = 0; i < len; i++) {
          if (adj[i] === adjusted) {
            return ptr;
          }
        }
      }
      return adjusted;
    }
    function ___cxa_begin_catch(ptr) {
      var info = ___exception_infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exceptions--;
      }
      if (info)
        info.rethrown = false;
      ___exception_addRef(___exception_deAdjust(ptr));
      return ptr;
    }
    function ___cxa_throw(ptr, type, destructor) {
      ___exception_infos[ptr] = {
        ptr,
        adjusted: [ptr],
        type,
        destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exceptions = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exceptions++;
      }
      throw ptr;
    }
    function ___gxx_personality_v0() {
    }
    var SYSCALLS = {
      buffers: [null, [], []],
      printChar: function(stream, curr) {
        var buffer2 = SYSCALLS.buffers[stream];
        if (curr === 0 || curr === 10) {
          (stream === 1 ? out : err)(UTF8ArrayToString(buffer2, 0));
          buffer2.length = 0;
        } else {
          buffer2.push(curr);
        }
      },
      varargs: 0,
      get: function(varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];
        return ret;
      },
      getStr: function() {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },
      get64: function() {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        return low;
      },
      getZero: function() {
        SYSCALLS.get();
      }
    };
    function _fd_close(fd) {
      try {
        return 0;
      } catch (e) {
        if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
          abort(e);
        return e.errno;
      }
    }
    function ___wasi_fd_close() {
      return _fd_close.apply(null, arguments);
    }
    function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
      try {
        return 0;
      } catch (e) {
        if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
          abort(e);
        return e.errno;
      }
    }
    function ___wasi_fd_seek() {
      return _fd_seek.apply(null, arguments);
    }
    function flush_NO_FILESYSTEM() {
      var fflush = Module["_fflush"];
      if (fflush)
        fflush(0);
      var buffers = SYSCALLS.buffers;
      if (buffers[1].length)
        SYSCALLS.printChar(1, 10);
      if (buffers[2].length)
        SYSCALLS.printChar(2, 10);
    }
    function _fd_write(fd, iov, iovcnt, pnum) {
      try {
        var num = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[iov + i * 8 >> 2];
          var len = HEAP32[iov + (i * 8 + 4) >> 2];
          for (var j = 0; j < len; j++) {
            SYSCALLS.printChar(fd, HEAPU8[ptr + j]);
          }
          num += len;
        }
        HEAP32[pnum >> 2] = num;
        return 0;
      } catch (e) {
        if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
          abort(e);
        return e.errno;
      }
    }
    function ___wasi_fd_write() {
      return _fd_write.apply(null, arguments);
    }
    var structRegistrations = {};
    function runDestructors(destructors) {
      while (destructors.length) {
        var ptr = destructors.pop();
        var del = destructors.pop();
        del(ptr);
      }
    }
    function simpleReadValueFromPointer(pointer) {
      return this["fromWireType"](HEAPU32[pointer >> 2]);
    }
    var awaitingDependencies = {};
    var registeredTypes = {};
    var typeDependencies = {};
    var char_0 = 48;
    var char_9 = 57;
    function makeLegalFunctionName(name) {
      if (name === void 0) {
        return "_unknown";
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, "$");
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
        return "_" + name;
      } else {
        return name;
      }
    }
    function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      return new Function("body", "return function " + name + '() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(body);
    }
    function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
        this.name = errorName;
        this.message = message;
        var stack = new Error(message).stack;
        if (stack !== void 0) {
          this.stack = this.toString() + "\n" + stack.replace(/^Error(:[^\n]*)?\n/, "");
        }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
        if (this.message === void 0) {
          return this.name;
        } else {
          return this.name + ": " + this.message;
        }
      };
      return errorClass;
    }
    var InternalError = void 0;
    function throwInternalError(message) {
      throw new InternalError(message);
    }
    function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
        typeDependencies[type] = dependentTypes;
      });
      function onComplete(typeConverters2) {
        var myTypeConverters = getTypeConverters(typeConverters2);
        if (myTypeConverters.length !== myTypes.length) {
          throwInternalError("Mismatched type converter count");
        }
        for (var i = 0; i < myTypes.length; ++i) {
          registerType(myTypes[i], myTypeConverters[i]);
        }
      }
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
        if (registeredTypes.hasOwnProperty(dt)) {
          typeConverters[i] = registeredTypes[dt];
        } else {
          unregisteredTypes.push(dt);
          if (!awaitingDependencies.hasOwnProperty(dt)) {
            awaitingDependencies[dt] = [];
          }
          awaitingDependencies[dt].push(function() {
            typeConverters[i] = registeredTypes[dt];
            ++registered;
            if (registered === unregisteredTypes.length) {
              onComplete(typeConverters);
            }
          });
        }
      });
      if (unregisteredTypes.length === 0) {
        onComplete(typeConverters);
      }
    }
    function __embind_finalize_value_object(structType) {
      var reg = structRegistrations[structType];
      delete structRegistrations[structType];
      var rawConstructor = reg.rawConstructor;
      var rawDestructor = reg.rawDestructor;
      var fieldRecords = reg.fields;
      var fieldTypes = fieldRecords.map(function(field) {
        return field.getterReturnType;
      }).concat(fieldRecords.map(function(field) {
        return field.setterArgumentType;
      }));
      whenDependentTypesAreResolved([structType], fieldTypes, function(fieldTypes2) {
        var fields = {};
        fieldRecords.forEach(function(field, i) {
          var fieldName = field.fieldName;
          var getterReturnType = fieldTypes2[i];
          var getter = field.getter;
          var getterContext = field.getterContext;
          var setterArgumentType = fieldTypes2[i + fieldRecords.length];
          var setter = field.setter;
          var setterContext = field.setterContext;
          fields[fieldName] = {
            read: function(ptr) {
              return getterReturnType["fromWireType"](getter(getterContext, ptr));
            },
            write: function(ptr, o) {
              var destructors = [];
              setter(setterContext, ptr, setterArgumentType["toWireType"](destructors, o));
              runDestructors(destructors);
            }
          };
        });
        return [{
          name: reg.name,
          fromWireType: function(ptr) {
            var rv = {};
            for (var i in fields) {
              rv[i] = fields[i].read(ptr);
            }
            rawDestructor(ptr);
            return rv;
          },
          toWireType: function(destructors, o) {
            for (var fieldName in fields) {
              if (!(fieldName in o)) {
                throw new TypeError("Missing field");
              }
            }
            var ptr = rawConstructor();
            for (fieldName in fields) {
              fields[fieldName].write(ptr, o[fieldName]);
            }
            if (destructors !== null) {
              destructors.push(rawDestructor, ptr);
            }
            return ptr;
          },
          argPackAdvance: 8,
          readValueFromPointer: simpleReadValueFromPointer,
          destructorFunction: rawDestructor
        }];
      });
    }
    function getShiftFromSize(size) {
      switch (size) {
        case 1:
          return 0;
        case 2:
          return 1;
        case 4:
          return 2;
        case 8:
          return 3;
        default:
          throw new TypeError("Unknown type size: " + size);
      }
    }
    function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
        codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }
    var embind_charCodes = void 0;
    function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
        ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
    var BindingError = void 0;
    function throwBindingError(message) {
      throw new BindingError(message);
    }
    function registerType(rawType, registeredInstance, options) {
      options = options || {};
      if (!("argPackAdvance" in registeredInstance)) {
        throw new TypeError("registerType registeredInstance requires argPackAdvance");
      }
      var name = registeredInstance.name;
      if (!rawType) {
        throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
        if (options.ignoreDuplicateRegistrations) {
          return;
        } else {
          throwBindingError("Cannot register type '" + name + "' twice");
        }
      }
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
      if (awaitingDependencies.hasOwnProperty(rawType)) {
        var callbacks = awaitingDependencies[rawType];
        delete awaitingDependencies[rawType];
        callbacks.forEach(function(cb) {
          cb();
        });
      }
    }
    function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
        name,
        fromWireType: function(wt) {
          return !!wt;
        },
        toWireType: function(destructors, o) {
          return o ? trueValue : falseValue;
        },
        argPackAdvance: 8,
        readValueFromPointer: function(pointer) {
          var heap;
          if (size === 1) {
            heap = HEAP8;
          } else if (size === 2) {
            heap = HEAP16;
          } else if (size === 4) {
            heap = HEAP32;
          } else {
            throw new TypeError("Unknown boolean type size: " + name);
          }
          return this["fromWireType"](heap[pointer >> shift]);
        },
        destructorFunction: null
      });
    }
    function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
        return false;
      }
      if (!(other instanceof ClassHandle)) {
        return false;
      }
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
      while (leftClass.baseClass) {
        left = leftClass.upcast(left);
        leftClass = leftClass.baseClass;
      }
      while (rightClass.baseClass) {
        right = rightClass.upcast(right);
        rightClass = rightClass.baseClass;
      }
      return leftClass === rightClass && left === right;
    }
    function shallowCopyInternalPointer(o) {
      return {
        count: o.count,
        deleteScheduled: o.deleteScheduled,
        preservePointerOnDelete: o.preservePointerOnDelete,
        ptr: o.ptr,
        ptrType: o.ptrType,
        smartPtr: o.smartPtr,
        smartPtrType: o.smartPtrType
      };
    }
    function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + " instance already deleted");
    }
    var finalizationGroup = false;
    function detachFinalizer(handle) {
    }
    function runDestructor($$) {
      if ($$.smartPtr) {
        $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
        $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }
    function releaseClassHandle($$) {
      $$.count.value -= 1;
      var toDelete = $$.count.value === 0;
      if (toDelete) {
        runDestructor($$);
      }
    }
    function attachFinalizer(handle) {
      if (typeof FinalizationGroup === "undefined") {
        attachFinalizer = function(handle2) {
          return handle2;
        };
        return handle;
      }
      finalizationGroup = new FinalizationGroup(function(iter) {
        for (var result = iter.next(); !result.done; result = iter.next()) {
          var $$ = result.value;
          if (!$$.ptr) {
            console.warn("object already deleted: " + $$.ptr);
          } else {
            releaseClassHandle($$);
          }
        }
      });
      attachFinalizer = function(handle2) {
        finalizationGroup.register(handle2, handle2.$$, handle2.$$);
        return handle2;
      };
      detachFinalizer = function(handle2) {
        finalizationGroup.unregister(handle2.$$);
      };
      return attachFinalizer(handle);
    }
    function ClassHandle_clone() {
      if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.preservePointerOnDelete) {
        this.$$.count.value += 1;
        return this;
      } else {
        var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), {
          $$: {
            value: shallowCopyInternalPointer(this.$$)
          }
        }));
        clone.$$.count.value += 1;
        clone.$$.deleteScheduled = false;
        return clone;
      }
    }
    function ClassHandle_delete() {
      if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
        throwBindingError("Object already scheduled for deletion");
      }
      detachFinalizer(this);
      releaseClassHandle(this.$$);
      if (!this.$$.preservePointerOnDelete) {
        this.$$.smartPtr = void 0;
        this.$$.ptr = void 0;
      }
    }
    function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }
    var delayFunction = void 0;
    var deletionQueue = [];
    function flushPendingDeletes() {
      while (deletionQueue.length) {
        var obj = deletionQueue.pop();
        obj.$$.deleteScheduled = false;
        obj["delete"]();
      }
    }
    function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
        throwBindingError("Object already scheduled for deletion");
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
        delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }
    function init_ClassHandle() {
      ClassHandle.prototype["isAliasOf"] = ClassHandle_isAliasOf;
      ClassHandle.prototype["clone"] = ClassHandle_clone;
      ClassHandle.prototype["delete"] = ClassHandle_delete;
      ClassHandle.prototype["isDeleted"] = ClassHandle_isDeleted;
      ClassHandle.prototype["deleteLater"] = ClassHandle_deleteLater;
    }
    function ClassHandle() {
    }
    var registeredPointers = {};
    function ensureOverloadTable(proto, methodName, humanName) {
      if (proto[methodName].overloadTable === void 0) {
        var prevFunc = proto[methodName];
        proto[methodName] = function() {
          if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
            throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
          }
          return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
        };
        proto[methodName].overloadTable = [];
        proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }
    function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
        if (numArguments === void 0 || Module[name].overloadTable !== void 0 && Module[name].overloadTable[numArguments] !== void 0) {
          throwBindingError("Cannot register public name '" + name + "' twice");
        }
        ensureOverloadTable(Module, name, name);
        if (Module.hasOwnProperty(numArguments)) {
          throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
        }
        Module[name].overloadTable[numArguments] = value;
      } else {
        Module[name] = value;
        if (numArguments !== void 0) {
          Module[name].numArguments = numArguments;
        }
      }
    }
    function RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
    function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
        if (!ptrClass.upcast) {
          throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
        }
        ptr = ptrClass.upcast(ptr);
        ptrClass = ptrClass.baseClass;
      }
      return ptr;
    }
    function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
        if (this.isReference) {
          throwBindingError("null is not a valid " + this.name);
        }
        return 0;
      }
      if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
        throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
    function genericPointerToWireType(destructors, handle) {
      var ptr;
      if (handle === null) {
        if (this.isReference) {
          throwBindingError("null is not a valid " + this.name);
        }
        if (this.isSmartPointer) {
          ptr = this.rawConstructor();
          if (destructors !== null) {
            destructors.push(this.rawDestructor, ptr);
          }
          return ptr;
        } else {
          return 0;
        }
      }
      if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
        throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
        throwBindingError("Cannot convert argument of type " + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + " to parameter type " + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      if (this.isSmartPointer) {
        if (handle.$$.smartPtr === void 0) {
          throwBindingError("Passing raw pointer to smart pointer is illegal");
        }
        switch (this.sharingPolicy) {
          case 0:
            if (handle.$$.smartPtrType === this) {
              ptr = handle.$$.smartPtr;
            } else {
              throwBindingError("Cannot convert argument of type " + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + " to parameter type " + this.name);
            }
            break;
          case 1:
            ptr = handle.$$.smartPtr;
            break;
          case 2:
            if (handle.$$.smartPtrType === this) {
              ptr = handle.$$.smartPtr;
            } else {
              var clonedHandle = handle["clone"]();
              ptr = this.rawShare(ptr, __emval_register(function() {
                clonedHandle["delete"]();
              }));
              if (destructors !== null) {
                destructors.push(this.rawDestructor, ptr);
              }
            }
            break;
          default:
            throwBindingError("Unsupporting sharing policy");
        }
      }
      return ptr;
    }
    function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
        if (this.isReference) {
          throwBindingError("null is not a valid " + this.name);
        }
        return 0;
      }
      if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
        throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
      }
      if (handle.$$.ptrType.isConst) {
        throwBindingError("Cannot convert argument of type " + handle.$$.ptrType.name + " to parameter type " + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
    function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
        ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    }
    function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
        this.rawDestructor(ptr);
      }
    }
    function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
        handle["delete"]();
      }
    }
    function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
        return ptr;
      }
      if (desiredClass.baseClass === void 0) {
        return null;
      }
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
        return null;
      }
      return desiredClass.downcast(rv);
    }
    function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }
    function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
        if (registeredInstances.hasOwnProperty(k)) {
          rv.push(registeredInstances[k]);
        }
      }
      return rv;
    }
    function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
        delayFunction(flushPendingDeletes);
      }
    }
    function init_embind() {
      Module["getInheritedInstanceCount"] = getInheritedInstanceCount;
      Module["getLiveInheritedInstances"] = getLiveInheritedInstances;
      Module["flushPendingDeletes"] = flushPendingDeletes;
      Module["setDelayFunction"] = setDelayFunction;
    }
    var registeredInstances = {};
    function getBasestPointer(class_, ptr) {
      if (ptr === void 0) {
        throwBindingError("ptr should not be undefined");
      }
      while (class_.baseClass) {
        ptr = class_.upcast(ptr);
        class_ = class_.baseClass;
      }
      return ptr;
    }
    function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }
    function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
        throwInternalError("makeClassHandle requires ptr and ptrType");
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
        throwInternalError("Both smartPtrType and smartPtr must be specified");
      }
      record.count = {
        value: 1
      };
      return attachFinalizer(Object.create(prototype, {
        $$: {
          value: record
        }
      }));
    }
    function RegisteredPointer_fromWireType(ptr) {
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
        this.destructor(ptr);
        return null;
      }
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (registeredInstance !== void 0) {
        if (registeredInstance.$$.count.value === 0) {
          registeredInstance.$$.ptr = rawPointer;
          registeredInstance.$$.smartPtr = ptr;
          return registeredInstance["clone"]();
        } else {
          var rv = registeredInstance["clone"]();
          this.destructor(ptr);
          return rv;
        }
      }
      function makeDefaultHandle() {
        if (this.isSmartPointer) {
          return makeClassHandle(this.registeredClass.instancePrototype, {
            ptrType: this.pointeeType,
            ptr: rawPointer,
            smartPtrType: this,
            smartPtr: ptr
          });
        } else {
          return makeClassHandle(this.registeredClass.instancePrototype, {
            ptrType: this,
            ptr
          });
        }
      }
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
        return makeDefaultHandle.call(this);
      }
      var toType;
      if (this.isConst) {
        toType = registeredPointerRecord.constPointerType;
      } else {
        toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(rawPointer, this.registeredClass, toType.registeredClass);
      if (dp === null) {
        return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
          ptrType: toType,
          ptr: dp,
          smartPtrType: this,
          smartPtr: ptr
        });
      } else {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
          ptrType: toType,
          ptr: dp
        });
      }
    }
    function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype["argPackAdvance"] = 8;
      RegisteredPointer.prototype["readValueFromPointer"] = simpleReadValueFromPointer;
      RegisteredPointer.prototype["deleteObject"] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype["fromWireType"] = RegisteredPointer_fromWireType;
    }
    function RegisteredPointer(name, registeredClass, isReference, isConst, isSmartPointer, pointeeType, sharingPolicy, rawGetPointee, rawConstructor, rawShare, rawDestructor) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
      if (!isSmartPointer && registeredClass.baseClass === void 0) {
        if (isConst) {
          this["toWireType"] = constNoSmartPtrRawPointerToWireType;
          this.destructorFunction = null;
        } else {
          this["toWireType"] = nonConstNoSmartPtrRawPointerToWireType;
          this.destructorFunction = null;
        }
      } else {
        this["toWireType"] = genericPointerToWireType;
      }
    }
    function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
        throwInternalError("Replacing nonexistant public symbol");
      }
      if (Module[name].overloadTable !== void 0 && numArguments !== void 0) {
        Module[name].overloadTable[numArguments] = value;
      } else {
        Module[name] = value;
        Module[name].argCount = numArguments;
      }
    }
    function embind__requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
      function makeDynCaller(dynCall) {
        var args = [];
        for (var i = 1; i < signature.length; ++i) {
          args.push("a" + i);
        }
        var name = "dynCall_" + signature + "_" + rawFunction;
        var body = "return function " + name + "(" + args.join(", ") + ") {\n";
        body += "    return dynCall(rawFunction" + (args.length ? ", " : "") + args.join(", ") + ");\n";
        body += "};\n";
        return new Function("dynCall", "rawFunction", body)(dynCall, rawFunction);
      }
      var fp;
      if (Module["FUNCTION_TABLE_" + signature] !== void 0) {
        fp = Module["FUNCTION_TABLE_" + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
        fp = FUNCTION_TABLE[rawFunction];
      } else {
        var dc = Module["dynCall_" + signature];
        if (dc === void 0) {
          dc = Module["dynCall_" + signature.replace(/f/g, "d")];
          if (dc === void 0) {
            throwBindingError("No dynCall invoker for signature: " + signature);
          }
        }
        fp = makeDynCaller(dc);
      }
      if (typeof fp !== "function") {
        throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
    var UnboundTypeError = void 0;
    function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }
    function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
        if (seen[type]) {
          return;
        }
        if (registeredTypes[type]) {
          return;
        }
        if (typeDependencies[type]) {
          typeDependencies[type].forEach(visit);
          return;
        }
        unboundTypes.push(type);
        seen[type] = true;
      }
      types.forEach(visit);
      throw new UnboundTypeError(message + ": " + unboundTypes.map(getTypeName).join([", "]));
    }
    function __embind_register_class(rawType, rawPointerType, rawConstPointerType, baseClassRawType, getActualTypeSignature, getActualType, upcastSignature, upcast, downcastSignature, downcast, name, destructorSignature, rawDestructor) {
      name = readLatin1String(name);
      getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
        upcast = embind__requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
        downcast = embind__requireFunction(downcastSignature, downcast);
      }
      rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
      exposePublicSymbol(legalFunctionName, function() {
        throwUnboundTypeError("Cannot construct " + name + " due to unbound types", [baseClassRawType]);
      });
      whenDependentTypesAreResolved([rawType, rawPointerType, rawConstPointerType], baseClassRawType ? [baseClassRawType] : [], function(base) {
        base = base[0];
        var baseClass;
        var basePrototype;
        if (baseClassRawType) {
          baseClass = base.registeredClass;
          basePrototype = baseClass.instancePrototype;
        } else {
          basePrototype = ClassHandle.prototype;
        }
        var constructor = createNamedFunction(legalFunctionName, function() {
          if (Object.getPrototypeOf(this) !== instancePrototype) {
            throw new BindingError("Use 'new' to construct " + name);
          }
          if (registeredClass.constructor_body === void 0) {
            throw new BindingError(name + " has no accessible constructor");
          }
          var body = registeredClass.constructor_body[arguments.length];
          if (body === void 0) {
            throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
          }
          return body.apply(this, arguments);
        });
        var instancePrototype = Object.create(basePrototype, {
          constructor: {
            value: constructor
          }
        });
        constructor.prototype = instancePrototype;
        var registeredClass = new RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast);
        var referenceConverter = new RegisteredPointer(name, registeredClass, true, false, false);
        var pointerConverter = new RegisteredPointer(name + "*", registeredClass, false, false, false);
        var constPointerConverter = new RegisteredPointer(name + " const*", registeredClass, false, true, false);
        registeredPointers[rawType] = {
          pointerType: pointerConverter,
          constPointerType: constPointerConverter
        };
        replacePublicSymbol(legalFunctionName, constructor);
        return [referenceConverter, pointerConverter, constPointerConverter];
      });
    }
    function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
        array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
    function __embind_register_class_constructor(rawClassType, argCount, rawArgTypesAddr, invokerSignature, invoker, rawConstructor) {
      assert(argCount > 0);
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = embind__requireFunction(invokerSignature, invoker);
      var args = [rawConstructor];
      var destructors = [];
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = "constructor " + classType.name;
        if (classType.registeredClass.constructor_body === void 0) {
          classType.registeredClass.constructor_body = [];
        }
        if (classType.registeredClass.constructor_body[argCount - 1] !== void 0) {
          throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount - 1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
        }
        classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
          throwUnboundTypeError("Cannot construct " + classType.name + " due to unbound types", rawArgTypes);
        };
        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
          classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
            if (arguments.length !== argCount - 1) {
              throwBindingError(humanName + " called with " + arguments.length + " arguments, expected " + (argCount - 1));
            }
            destructors.length = 0;
            args.length = argCount;
            for (var i = 1; i < argCount; ++i) {
              args[i] = argTypes[i]["toWireType"](destructors, arguments[i - 1]);
            }
            var ptr = invoker.apply(null, args);
            runDestructors(destructors);
            return argTypes[0]["fromWireType"](ptr);
          };
          return [];
        });
        return [];
      });
    }
    function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
        throw new TypeError("new_ called with constructor type " + typeof constructor + " which is not a function");
      }
      var dummy = createNamedFunction(constructor.name || "unknownFunctionName", function() {
      });
      dummy.prototype = constructor.prototype;
      var obj = new dummy();
      var r = constructor.apply(obj, argumentList);
      return r instanceof Object ? r : obj;
    }
    function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      var argCount = argTypes.length;
      if (argCount < 2) {
        throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
      var isClassMethodFunc = argTypes[1] !== null && classType !== null;
      var needsDestructorStack = false;
      for (var i = 1; i < argTypes.length; ++i) {
        if (argTypes[i] !== null && argTypes[i].destructorFunction === void 0) {
          needsDestructorStack = true;
          break;
        }
      }
      var returns = argTypes[0].name !== "void";
      var argsList = "";
      var argsListWired = "";
      for (var i = 0; i < argCount - 2; ++i) {
        argsList += (i !== 0 ? ", " : "") + "arg" + i;
        argsListWired += (i !== 0 ? ", " : "") + "arg" + i + "Wired";
      }
      var invokerFnBody = "return function " + makeLegalFunctionName(humanName) + "(" + argsList + ") {\nif (arguments.length !== " + (argCount - 2) + ") {\nthrowBindingError('function " + humanName + " called with ' + arguments.length + ' arguments, expected " + (argCount - 2) + " args!');\n}\n";
      if (needsDestructorStack) {
        invokerFnBody += "var destructors = [];\n";
      }
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
      if (isClassMethodFunc) {
        invokerFnBody += "var thisWired = classParam.toWireType(" + dtorStack + ", this);\n";
      }
      for (var i = 0; i < argCount - 2; ++i) {
        invokerFnBody += "var arg" + i + "Wired = argType" + i + ".toWireType(" + dtorStack + ", arg" + i + "); // " + argTypes[i + 2].name + "\n";
        args1.push("argType" + i);
        args2.push(argTypes[i + 2]);
      }
      if (isClassMethodFunc) {
        argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
      invokerFnBody += (returns ? "var rv = " : "") + "invoker(fn" + (argsListWired.length > 0 ? ", " : "") + argsListWired + ");\n";
      if (needsDestructorStack) {
        invokerFnBody += "runDestructors(destructors);\n";
      } else {
        for (var i = isClassMethodFunc ? 1 : 2; i < argTypes.length; ++i) {
          var paramName = i === 1 ? "thisWired" : "arg" + (i - 2) + "Wired";
          if (argTypes[i].destructorFunction !== null) {
            invokerFnBody += paramName + "_dtor(" + paramName + "); // " + argTypes[i].name + "\n";
            args1.push(paramName + "_dtor");
            args2.push(argTypes[i].destructorFunction);
          }
        }
      }
      if (returns) {
        invokerFnBody += "var ret = retType.fromWireType(rv);\nreturn ret;\n";
      }
      invokerFnBody += "}\n";
      args1.push(invokerFnBody);
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
    function __embind_register_class_function(rawClassType, methodName, argCount, rawArgTypesAddr, invokerSignature, rawInvoker, context, isPureVirtual) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = classType.name + "." + methodName;
        if (isPureVirtual) {
          classType.registeredClass.pureVirtualFunctions.push(methodName);
        }
        function unboundTypesHandler() {
          throwUnboundTypeError("Cannot call " + humanName + " due to unbound types", rawArgTypes);
        }
        var proto = classType.registeredClass.instancePrototype;
        var method = proto[methodName];
        if (method === void 0 || method.overloadTable === void 0 && method.className !== classType.name && method.argCount === argCount - 2) {
          unboundTypesHandler.argCount = argCount - 2;
          unboundTypesHandler.className = classType.name;
          proto[methodName] = unboundTypesHandler;
        } else {
          ensureOverloadTable(proto, methodName, humanName);
          proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
        }
        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
          var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
          if (proto[methodName].overloadTable === void 0) {
            memberFunction.argCount = argCount - 2;
            proto[methodName] = memberFunction;
          } else {
            proto[methodName].overloadTable[argCount - 2] = memberFunction;
          }
          return [];
        });
        return [];
      });
    }
    var emval_free_list = [];
    var emval_handle_array = [{}, {
      value: void 0
    }, {
      value: null
    }, {
      value: true
    }, {
      value: false
    }];
    function __emval_decref(handle) {
      if (handle > 4 && --emval_handle_array[handle].refcount === 0) {
        emval_handle_array[handle] = void 0;
        emval_free_list.push(handle);
      }
    }
    function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
        if (emval_handle_array[i] !== void 0) {
          ++count;
        }
      }
      return count;
    }
    function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
        if (emval_handle_array[i] !== void 0) {
          return emval_handle_array[i];
        }
      }
      return null;
    }
    function init_emval() {
      Module["count_emval_handles"] = count_emval_handles;
      Module["get_first_emval"] = get_first_emval;
    }
    function __emval_register(value) {
      switch (value) {
        case void 0: {
          return 1;
        }
        case null: {
          return 2;
        }
        case true: {
          return 3;
        }
        case false: {
          return 4;
        }
        default: {
          var handle = emval_free_list.length ? emval_free_list.pop() : emval_handle_array.length;
          emval_handle_array[handle] = {
            refcount: 1,
            value
          };
          return handle;
        }
      }
    }
    function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
        name,
        fromWireType: function(handle) {
          var rv = emval_handle_array[handle].value;
          __emval_decref(handle);
          return rv;
        },
        toWireType: function(destructors, value) {
          return __emval_register(value);
        },
        argPackAdvance: 8,
        readValueFromPointer: simpleReadValueFromPointer,
        destructorFunction: null
      });
    }
    function _embind_repr(v) {
      if (v === null) {
        return "null";
      }
      var t = typeof v;
      if (t === "object" || t === "array" || t === "function") {
        return v.toString();
      } else {
        return "" + v;
      }
    }
    function floatReadValueFromPointer(name, shift) {
      switch (shift) {
        case 2:
          return function(pointer) {
            return this["fromWireType"](HEAPF32[pointer >> 2]);
          };
        case 3:
          return function(pointer) {
            return this["fromWireType"](HEAPF64[pointer >> 3]);
          };
        default:
          throw new TypeError("Unknown float type: " + name);
      }
    }
    function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
        name,
        fromWireType: function(value) {
          return value;
        },
        toWireType: function(destructors, value) {
          if (typeof value !== "number" && typeof value !== "boolean") {
            throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
          }
          return value;
        },
        argPackAdvance: 8,
        readValueFromPointer: floatReadValueFromPointer(name, shift),
        destructorFunction: null
      });
    }
    function integerReadValueFromPointer(name, shift, signed) {
      switch (shift) {
        case 0:
          return signed ? function readS8FromPointer(pointer) {
            return HEAP8[pointer];
          } : function readU8FromPointer(pointer) {
            return HEAPU8[pointer];
          };
        case 1:
          return signed ? function readS16FromPointer(pointer) {
            return HEAP16[pointer >> 1];
          } : function readU16FromPointer(pointer) {
            return HEAPU16[pointer >> 1];
          };
        case 2:
          return signed ? function readS32FromPointer(pointer) {
            return HEAP32[pointer >> 2];
          } : function readU32FromPointer(pointer) {
            return HEAPU32[pointer >> 2];
          };
        default:
          throw new TypeError("Unknown integer type: " + name);
      }
    }
    function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) {
        maxRange = 4294967295;
      }
      var shift = getShiftFromSize(size);
      var fromWireType = function(value) {
        return value;
      };
      if (minRange === 0) {
        var bitshift = 32 - 8 * size;
        fromWireType = function(value) {
          return value << bitshift >>> bitshift;
        };
      }
      var isUnsignedType = name.indexOf("unsigned") != -1;
      registerType(primitiveType, {
        name,
        fromWireType,
        toWireType: function(destructors, value) {
          if (typeof value !== "number" && typeof value !== "boolean") {
            throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
          }
          if (value < minRange || value > maxRange) {
            throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ", " + maxRange + "]!");
          }
          return isUnsignedType ? value >>> 0 : value | 0;
        },
        argPackAdvance: 8,
        readValueFromPointer: integerReadValueFromPointer(name, shift, minRange !== 0),
        destructorFunction: null
      });
    }
    function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array];
      var TA = typeMapping[dataTypeIndex];
      function decodeMemoryView(handle) {
        handle = handle >> 2;
        var heap = HEAPU32;
        var size = heap[handle];
        var data = heap[handle + 1];
        return new TA(heap["buffer"], data, size);
      }
      name = readLatin1String(name);
      registerType(rawType, {
        name,
        fromWireType: decodeMemoryView,
        argPackAdvance: 8,
        readValueFromPointer: decodeMemoryView
      }, {
        ignoreDuplicateRegistrations: true
      });
    }
    function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      var stdStringIsUTF8 = name === "std::string";
      registerType(rawType, {
        name,
        fromWireType: function(value) {
          var length = HEAPU32[value >> 2];
          var str;
          if (stdStringIsUTF8) {
            var endChar = HEAPU8[value + 4 + length];
            var endCharSwap = 0;
            if (endChar != 0) {
              endCharSwap = endChar;
              HEAPU8[value + 4 + length] = 0;
            }
            var decodeStartPtr = value + 4;
            for (var i = 0; i <= length; ++i) {
              var currentBytePtr = value + 4 + i;
              if (HEAPU8[currentBytePtr] == 0) {
                var stringSegment = UTF8ToString(decodeStartPtr);
                if (str === void 0)
                  str = stringSegment;
                else {
                  str += String.fromCharCode(0);
                  str += stringSegment;
                }
                decodeStartPtr = currentBytePtr + 1;
              }
            }
            if (endCharSwap != 0)
              HEAPU8[value + 4 + length] = endCharSwap;
          } else {
            var a = new Array(length);
            for (var i = 0; i < length; ++i) {
              a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
            }
            str = a.join("");
          }
          _free(value);
          return str;
        },
        toWireType: function(destructors, value) {
          if (value instanceof ArrayBuffer) {
            value = new Uint8Array(value);
          }
          var getLength;
          var valueIsOfTypeString = typeof value === "string";
          if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
            throwBindingError("Cannot pass non-string to std::string");
          }
          if (stdStringIsUTF8 && valueIsOfTypeString) {
            getLength = function() {
              return lengthBytesUTF8(value);
            };
          } else {
            getLength = function() {
              return value.length;
            };
          }
          var length = getLength();
          var ptr = _malloc(4 + length + 1);
          HEAPU32[ptr >> 2] = length;
          if (stdStringIsUTF8 && valueIsOfTypeString) {
            stringToUTF8(value, ptr + 4, length + 1);
          } else {
            if (valueIsOfTypeString) {
              for (var i = 0; i < length; ++i) {
                var charCode = value.charCodeAt(i);
                if (charCode > 255) {
                  _free(ptr);
                  throwBindingError("String has UTF-16 code units that do not fit in 8 bits");
                }
                HEAPU8[ptr + 4 + i] = charCode;
              }
            } else {
              for (var i = 0; i < length; ++i) {
                HEAPU8[ptr + 4 + i] = value[i];
              }
            }
          }
          if (destructors !== null) {
            destructors.push(_free, ptr);
          }
          return ptr;
        },
        argPackAdvance: 8,
        readValueFromPointer: simpleReadValueFromPointer,
        destructorFunction: function(ptr) {
          _free(ptr);
        }
      });
    }
    function __embind_register_std_wstring(rawType, charSize, name) {
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
        getHeap = function() {
          return HEAPU16;
        };
        shift = 1;
      } else if (charSize === 4) {
        getHeap = function() {
          return HEAPU32;
        };
        shift = 2;
      }
      registerType(rawType, {
        name,
        fromWireType: function(value) {
          var HEAP = getHeap();
          var length = HEAPU32[value >> 2];
          var a = new Array(length);
          var start = value + 4 >> shift;
          for (var i = 0; i < length; ++i) {
            a[i] = String.fromCharCode(HEAP[start + i]);
          }
          _free(value);
          return a.join("");
        },
        toWireType: function(destructors, value) {
          var length = value.length;
          var ptr = _malloc(4 + length * charSize);
          var HEAP = getHeap();
          HEAPU32[ptr >> 2] = length;
          var start = ptr + 4 >> shift;
          for (var i = 0; i < length; ++i) {
            HEAP[start + i] = value.charCodeAt(i);
          }
          if (destructors !== null) {
            destructors.push(_free, ptr);
          }
          return ptr;
        },
        argPackAdvance: 8,
        readValueFromPointer: simpleReadValueFromPointer,
        destructorFunction: function(ptr) {
          _free(ptr);
        }
      });
    }
    function __embind_register_value_object(rawType, name, constructorSignature, rawConstructor, destructorSignature, rawDestructor) {
      structRegistrations[rawType] = {
        name: readLatin1String(name),
        rawConstructor: embind__requireFunction(constructorSignature, rawConstructor),
        rawDestructor: embind__requireFunction(destructorSignature, rawDestructor),
        fields: []
      };
    }
    function __embind_register_value_object_field(structType, fieldName, getterReturnType, getterSignature, getter, getterContext, setterArgumentType, setterSignature, setter, setterContext) {
      structRegistrations[structType].fields.push({
        fieldName: readLatin1String(fieldName),
        getterReturnType,
        getter: embind__requireFunction(getterSignature, getter),
        getterContext,
        setterArgumentType,
        setter: embind__requireFunction(setterSignature, setter),
        setterContext
      });
    }
    function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
        isVoid: true,
        name,
        argPackAdvance: 0,
        fromWireType: function() {
          return void 0;
        },
        toWireType: function(destructors, o) {
          return void 0;
        }
      });
    }
    function __emval_incref(handle) {
      if (handle > 4) {
        emval_handle_array[handle].refcount += 1;
      }
    }
    function requireRegisteredType(rawType, humanName) {
      var impl = registeredTypes[rawType];
      if (impl === void 0) {
        throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
      }
      return impl;
    }
    function __emval_take_value(type, argv2) {
      type = requireRegisteredType(type, "_emval_take_value");
      var v = type["readValueFromPointer"](argv2);
      return __emval_register(v);
    }
    function _abort() {
      abort();
    }
    function _emscripten_get_heap_size() {
      return HEAP8.length;
    }
    function abortOnCannotGrowMemory(requestedSize) {
      abort("OOM");
    }
    function emscripten_realloc_buffer(size) {
      try {
        wasmMemory.grow(size - buffer.byteLength + 65535 >> 16);
        updateGlobalBufferAndViews(wasmMemory.buffer);
        return 1;
      } catch (e) {
      }
    }
    function _emscripten_resize_heap(requestedSize) {
      var oldSize = _emscripten_get_heap_size();
      var PAGE_MULTIPLE = 65536;
      var LIMIT = 2147483648 - PAGE_MULTIPLE;
      if (requestedSize > LIMIT) {
        return false;
      }
      var MIN_TOTAL_MEMORY = 16777216;
      var newSize = Math.max(oldSize, MIN_TOTAL_MEMORY);
      while (newSize < requestedSize) {
        if (newSize <= 536870912) {
          newSize = alignUp(2 * newSize, PAGE_MULTIPLE);
        } else {
          newSize = Math.min(alignUp((3 * newSize + 2147483648) / 4, PAGE_MULTIPLE), LIMIT);
        }
      }
      var replacement = emscripten_realloc_buffer(newSize);
      if (!replacement) {
        return false;
      }
      return true;
    }
    function _getenv(name) {
      if (name === 0)
        return 0;
      name = UTF8ToString(name);
      if (!ENV.hasOwnProperty(name))
        return 0;
      if (_getenv.ret)
        _free(_getenv.ret);
      _getenv.ret = allocateUTF8(ENV[name]);
      return _getenv.ret;
    }
    function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src + num), dest);
    }
    function _pthread_attr_init(attr) {
      return 0;
    }
    function _pthread_attr_setdetachstate() {
    }
    function _pthread_cond_destroy() {
      return 0;
    }
    function _pthread_cond_init() {
      return 0;
    }
    function _pthread_create() {
      return 6;
    }
    function _pthread_join() {
    }
    function ___setErrNo(value) {
      if (Module["___errno_location"])
        HEAP32[Module["___errno_location"]() >> 2] = value;
      return value;
    }
    function _sysconf(name) {
      switch (name) {
        case 30:
          return PAGE_SIZE;
        case 85:
          var maxHeapSize = 2 * 1024 * 1024 * 1024 - 65536;
          return maxHeapSize / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0:
          return 2097152;
        case 3:
          return 65536;
        case 28:
          return 32768;
        case 44:
          return 32767;
        case 75:
          return 16384;
        case 39:
          return 1e3;
        case 89:
          return 700;
        case 71:
          return 256;
        case 40:
          return 255;
        case 2:
          return 100;
        case 180:
          return 64;
        case 25:
          return 20;
        case 5:
          return 16;
        case 6:
          return 6;
        case 73:
          return 4;
        case 84: {
          if (typeof navigator === "object")
            return navigator["hardwareConcurrency"] || 1;
          return 1;
        }
      }
      ___setErrNo(28);
      return -1;
    }
    InternalError = Module["InternalError"] = extendError(Error, "InternalError");
    embind_init_charCodes();
    BindingError = Module["BindingError"] = extendError(Error, "BindingError");
    init_ClassHandle();
    init_RegisteredPointer();
    init_embind();
    UnboundTypeError = Module["UnboundTypeError"] = extendError(Error, "UnboundTypeError");
    init_emval();
    var asmGlobalArg = {};
    var asmLibraryArg = {
      ClassHandle,
      ClassHandle_clone,
      ClassHandle_delete,
      ClassHandle_deleteLater,
      ClassHandle_isAliasOf,
      ClassHandle_isDeleted,
      RegisteredClass,
      RegisteredPointer,
      RegisteredPointer_deleteObject,
      RegisteredPointer_destructor,
      RegisteredPointer_fromWireType,
      RegisteredPointer_getPointee,
      ___buildEnvironment,
      ___cxa_allocate_exception,
      ___cxa_begin_catch,
      ___cxa_throw,
      ___exception_addRef,
      ___exception_deAdjust,
      ___gxx_personality_v0,
      ___setErrNo,
      ___wasi_fd_close,
      ___wasi_fd_seek,
      ___wasi_fd_write,
      __embind_finalize_value_object,
      __embind_register_bool,
      __embind_register_class,
      __embind_register_class_constructor,
      __embind_register_class_function,
      __embind_register_emval,
      __embind_register_float,
      __embind_register_integer,
      __embind_register_memory_view,
      __embind_register_std_string,
      __embind_register_std_wstring,
      __embind_register_value_object,
      __embind_register_value_object_field,
      __embind_register_void,
      __emval_decref,
      __emval_incref,
      __emval_register,
      __emval_take_value,
      __memory_base: 1024,
      __table_base: 0,
      _abort,
      _embind_repr,
      _emscripten_get_heap_size,
      _emscripten_memcpy_big,
      _emscripten_resize_heap,
      _fd_close,
      _fd_seek,
      _fd_write,
      _getenv,
      _pthread_attr_init,
      _pthread_attr_setdetachstate,
      _pthread_cond_destroy,
      _pthread_cond_init,
      _pthread_create,
      _pthread_join,
      _sysconf,
      abort,
      abortOnCannotGrowMemory,
      attachFinalizer,
      constNoSmartPtrRawPointerToWireType,
      count_emval_handles,
      craftInvokerFunction,
      createNamedFunction,
      demangle,
      demangleAll,
      detachFinalizer,
      downcastPointer,
      embind__requireFunction,
      embind_init_charCodes,
      emscripten_realloc_buffer,
      ensureOverloadTable,
      exposePublicSymbol,
      extendError,
      floatReadValueFromPointer,
      flushPendingDeletes,
      flush_NO_FILESYSTEM,
      genericPointerToWireType,
      getBasestPointer,
      getInheritedInstance,
      getInheritedInstanceCount,
      getLiveInheritedInstances,
      getShiftFromSize,
      getTempRet0,
      getTypeName,
      get_first_emval,
      heap32VectorToArray,
      init_ClassHandle,
      init_RegisteredPointer,
      init_embind,
      init_emval,
      integerReadValueFromPointer,
      jsStackTrace,
      makeClassHandle,
      makeLegalFunctionName,
      memory: wasmMemory,
      new_,
      nonConstNoSmartPtrRawPointerToWireType,
      readLatin1String,
      registerType,
      releaseClassHandle,
      replacePublicSymbol,
      requireRegisteredType,
      runDestructor,
      runDestructors,
      setDelayFunction,
      setTempRet0,
      shallowCopyInternalPointer,
      simpleReadValueFromPointer,
      stackTrace,
      table: wasmTable,
      tempDoublePtr,
      throwBindingError,
      throwInstanceAlreadyDeleted,
      throwInternalError,
      throwUnboundTypeError,
      upcastPointer,
      whenDependentTypesAreResolved
    };
    var asm = Module["asm"](asmGlobalArg, asmLibraryArg, buffer);
    Module["asm"] = asm;
    var __ZSt18uncaught_exceptionv = Module["__ZSt18uncaught_exceptionv"] = function() {
      return Module["asm"]["__ZSt18uncaught_exceptionv"].apply(null, arguments);
    };
    var ___cxa_can_catch = Module["___cxa_can_catch"] = function() {
      return Module["asm"]["___cxa_can_catch"].apply(null, arguments);
    };
    var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = function() {
      return Module["asm"]["___cxa_is_pointer_type"].apply(null, arguments);
    };
    var ___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = function() {
      return Module["asm"]["___embind_register_native_and_builtin_types"].apply(null, arguments);
    };
    var ___getTypeName = Module["___getTypeName"] = function() {
      return Module["asm"]["___getTypeName"].apply(null, arguments);
    };
    var __get_environ = Module["__get_environ"] = function() {
      return Module["asm"]["__get_environ"].apply(null, arguments);
    };
    var _emscripten_get_sbrk_ptr = Module["_emscripten_get_sbrk_ptr"] = function() {
      return Module["asm"]["_emscripten_get_sbrk_ptr"].apply(null, arguments);
    };
    var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = function() {
      return Module["asm"]["_emscripten_replace_memory"].apply(null, arguments);
    };
    var _free = Module["_free"] = function() {
      return Module["asm"]["_free"].apply(null, arguments);
    };
    var _malloc = Module["_malloc"] = function() {
      return Module["asm"]["_malloc"].apply(null, arguments);
    };
    var _memcpy = Module["_memcpy"] = function() {
      return Module["asm"]["_memcpy"].apply(null, arguments);
    };
    var _memset = Module["_memset"] = function() {
      return Module["asm"]["_memset"].apply(null, arguments);
    };
    var _rintf = Module["_rintf"] = function() {
      return Module["asm"]["_rintf"].apply(null, arguments);
    };
    var establishStackSpace = Module["establishStackSpace"] = function() {
      return Module["asm"]["establishStackSpace"].apply(null, arguments);
    };
    var globalCtors = Module["globalCtors"] = function() {
      return Module["asm"]["globalCtors"].apply(null, arguments);
    };
    var stackAlloc = Module["stackAlloc"] = function() {
      return Module["asm"]["stackAlloc"].apply(null, arguments);
    };
    var stackRestore = Module["stackRestore"] = function() {
      return Module["asm"]["stackRestore"].apply(null, arguments);
    };
    var stackSave = Module["stackSave"] = function() {
      return Module["asm"]["stackSave"].apply(null, arguments);
    };
    var dynCall_fi = Module["dynCall_fi"] = function() {
      return Module["asm"]["dynCall_fi"].apply(null, arguments);
    };
    var dynCall_i = Module["dynCall_i"] = function() {
      return Module["asm"]["dynCall_i"].apply(null, arguments);
    };
    var dynCall_ii = Module["dynCall_ii"] = function() {
      return Module["asm"]["dynCall_ii"].apply(null, arguments);
    };
    var dynCall_iidiiii = Module["dynCall_iidiiii"] = function() {
      return Module["asm"]["dynCall_iidiiii"].apply(null, arguments);
    };
    var dynCall_iii = Module["dynCall_iii"] = function() {
      return Module["asm"]["dynCall_iii"].apply(null, arguments);
    };
    var dynCall_iiii = Module["dynCall_iiii"] = function() {
      return Module["asm"]["dynCall_iiii"].apply(null, arguments);
    };
    var dynCall_iiiii = Module["dynCall_iiiii"] = function() {
      return Module["asm"]["dynCall_iiiii"].apply(null, arguments);
    };
    var dynCall_iiiiii = Module["dynCall_iiiiii"] = function() {
      return Module["asm"]["dynCall_iiiiii"].apply(null, arguments);
    };
    var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = function() {
      return Module["asm"]["dynCall_iiiiiii"].apply(null, arguments);
    };
    var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = function() {
      return Module["asm"]["dynCall_iiiiiiii"].apply(null, arguments);
    };
    var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = function() {
      return Module["asm"]["dynCall_iiiiiiiiiiii"].apply(null, arguments);
    };
    var dynCall_iiji = Module["dynCall_iiji"] = function() {
      return Module["asm"]["dynCall_iiji"].apply(null, arguments);
    };
    var dynCall_iji = Module["dynCall_iji"] = function() {
      return Module["asm"]["dynCall_iji"].apply(null, arguments);
    };
    var dynCall_jiji = Module["dynCall_jiji"] = function() {
      return Module["asm"]["dynCall_jiji"].apply(null, arguments);
    };
    var dynCall_jji = Module["dynCall_jji"] = function() {
      return Module["asm"]["dynCall_jji"].apply(null, arguments);
    };
    var dynCall_v = Module["dynCall_v"] = function() {
      return Module["asm"]["dynCall_v"].apply(null, arguments);
    };
    var dynCall_vi = Module["dynCall_vi"] = function() {
      return Module["asm"]["dynCall_vi"].apply(null, arguments);
    };
    var dynCall_vii = Module["dynCall_vii"] = function() {
      return Module["asm"]["dynCall_vii"].apply(null, arguments);
    };
    var dynCall_viif = Module["dynCall_viif"] = function() {
      return Module["asm"]["dynCall_viif"].apply(null, arguments);
    };
    var dynCall_viii = Module["dynCall_viii"] = function() {
      return Module["asm"]["dynCall_viii"].apply(null, arguments);
    };
    var dynCall_viiif = Module["dynCall_viiif"] = function() {
      return Module["asm"]["dynCall_viiif"].apply(null, arguments);
    };
    var dynCall_viiii = Module["dynCall_viiii"] = function() {
      return Module["asm"]["dynCall_viiii"].apply(null, arguments);
    };
    var dynCall_viiiii = Module["dynCall_viiiii"] = function() {
      return Module["asm"]["dynCall_viiiii"].apply(null, arguments);
    };
    var dynCall_viiiiii = Module["dynCall_viiiiii"] = function() {
      return Module["asm"]["dynCall_viiiiii"].apply(null, arguments);
    };
    Module["asm"] = asm;
    Module["ccall"] = ccall;
    var calledRun;
    Module["then"] = function(func) {
      if (calledRun) {
        func(Module);
      } else {
        var old = Module["onRuntimeInitialized"];
        Module["onRuntimeInitialized"] = function() {
          if (old)
            old();
          func(Module);
        };
      }
      return Module;
    };
    function ExitStatus(status) {
      this.name = "ExitStatus";
      this.message = "Program terminated with exit(" + status + ")";
      this.status = status;
    }
    dependenciesFulfilled = function runCaller() {
      if (!calledRun)
        run();
      if (!calledRun)
        dependenciesFulfilled = runCaller;
    };
    function run(args) {
      if (runDependencies > 0) {
        return;
      }
      preRun();
      if (runDependencies > 0)
        return;
      function doRun() {
        if (calledRun)
          return;
        calledRun = true;
        if (ABORT)
          return;
        initRuntime();
        preMain();
        if (Module["onRuntimeInitialized"])
          Module["onRuntimeInitialized"]();
        postRun();
      }
      if (Module["setStatus"]) {
        Module["setStatus"]("Running...");
        setTimeout(function() {
          setTimeout(function() {
            Module["setStatus"]("");
          }, 1);
          doRun();
        }, 1);
      } else {
        doRun();
      }
    }
    Module["run"] = run;
    if (Module["preInit"]) {
      if (typeof Module["preInit"] == "function")
        Module["preInit"] = [Module["preInit"]];
      while (Module["preInit"].length > 0) {
        Module["preInit"].pop()();
      }
    }
    run();
    return OpenJPEGWASM2;
  };
}();
class JPEG2000Decoder extends Decoder {
  constructor() {
    super(...arguments);
    this.jpegs = null;
  }
  decode(frameNo) {
    const {
      image
    } = this;
    if (!this.jpegs) {
      this.jpegs = getJpegData(image.data);
    }
    return new Promise((resolve) => {
      OpenJPEGWASM().then((OJ) => {
        const decoder = new OJ.J2KDecoder();
        const jpeg = this.jpegs[frameNo];
        const buffer = new Uint8Array(jpeg.buffer, jpeg.byteOffset, jpeg.byteLength);
        const encodedBuffer = decoder.getEncodedBuffer(buffer.length);
        encodedBuffer.set(buffer);
        const decodeLevel = 0;
        const decodeLayer = 0;
        for (let i = 0; i < 1; i += 1) {
          decoder.decodeSubResolution(decodeLevel, decodeLayer);
        }
        decoder.getFrameInfo();
        const decodedBuffer = decoder.getDecodedBuffer();
        return resolve(decodedBuffer);
      });
    });
  }
}
const ColorSpace = {
  Unkown: 0,
  Grayscale: 1,
  AdobeRGB: 2,
  RGB: 3,
  CYMK: 4
};
const JpegImage = function jpegImage() {
  var dctZigZag = new Int32Array([0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63]);
  var dctCos1 = 4017;
  var dctSin1 = 799;
  var dctCos3 = 3406;
  var dctSin3 = 2276;
  var dctCos6 = 1567;
  var dctSin6 = 3784;
  var dctSqrt2 = 5793;
  var dctSqrt1d2 = 2896;
  function constructor() {
  }
  function buildHuffmanTable(codeLengths, values) {
    var k = 0, code = [], i, j, length = 16;
    while (length > 0 && !codeLengths[length - 1])
      length--;
    code.push({
      children: [],
      index: 0
    });
    var p = code[0], q;
    for (i = 0; i < length; i++) {
      for (j = 0; j < codeLengths[i]; j++) {
        p = code.pop();
        p.children[p.index] = values[k];
        while (p.index > 0) {
          p = code.pop();
        }
        p.index++;
        code.push(p);
        while (code.length <= i) {
          code.push(q = {
            children: [],
            index: 0
          });
          p.children[p.index] = q.children;
          p = q;
        }
        k++;
      }
      if (i + 1 < length) {
        code.push(q = {
          children: [],
          index: 0
        });
        p.children[p.index] = q.children;
        p = q;
      }
    }
    return code[0].children;
  }
  function getBlockBufferOffset(component, row, col) {
    return 64 * ((component.blocksPerLine + 1) * row + col);
  }
  function decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successivePrev, successive) {
    var mcusPerLine = frame.mcusPerLine;
    var progressive = frame.progressive;
    var startOffset = offset, bitsData = 0, bitsCount = 0;
    function readBit() {
      if (bitsCount > 0) {
        bitsCount--;
        return bitsData >> bitsCount & 1;
      }
      bitsData = data[offset++];
      if (bitsData == 255) {
        var nextByte = data[offset++];
        if (nextByte) {
          throw "unexpected marker: " + (bitsData << 8 | nextByte).toString(16);
        }
      }
      bitsCount = 7;
      return bitsData >>> 7;
    }
    function decodeHuffman(tree) {
      var node = tree;
      var bit;
      while ((bit = readBit()) !== null) {
        node = node[bit];
        if (typeof node === "number")
          return node;
        if (typeof node !== "object")
          throw "invalid huffman sequence";
      }
      return null;
    }
    function receive(length) {
      var n2 = 0;
      while (length > 0) {
        var bit = readBit();
        if (bit === null)
          return;
        n2 = n2 << 1 | bit;
        length--;
      }
      return n2;
    }
    function receiveAndExtend(length) {
      var n2 = receive(length);
      if (n2 >= 1 << length - 1)
        return n2;
      return n2 + (-1 << length) + 1;
    }
    function decodeBaseline(component2, offset2) {
      var t = decodeHuffman(component2.huffmanTableDC);
      var diff = t === 0 ? 0 : receiveAndExtend(t);
      component2.blockData[offset2] = component2.pred += diff;
      var k2 = 1;
      while (k2 < 64) {
        var rs = decodeHuffman(component2.huffmanTableAC);
        var s = rs & 15, r = rs >> 4;
        if (s === 0) {
          if (r < 15)
            break;
          k2 += 16;
          continue;
        }
        k2 += r;
        var z = dctZigZag[k2];
        component2.blockData[offset2 + z] = receiveAndExtend(s);
        k2++;
      }
    }
    function decodeDCFirst(component2, offset2) {
      var t = decodeHuffman(component2.huffmanTableDC);
      var diff = t === 0 ? 0 : receiveAndExtend(t) << successive;
      component2.blockData[offset2] = component2.pred += diff;
    }
    function decodeDCSuccessive(component2, offset2) {
      component2.blockData[offset2] |= readBit() << successive;
    }
    var eobrun = 0;
    function decodeACFirst(component2, offset2) {
      if (eobrun > 0) {
        eobrun--;
        return;
      }
      var k2 = spectralStart, e = spectralEnd;
      while (k2 <= e) {
        var rs = decodeHuffman(component2.huffmanTableAC);
        var s = rs & 15, r = rs >> 4;
        if (s === 0) {
          if (r < 15) {
            eobrun = receive(r) + (1 << r) - 1;
            break;
          }
          k2 += 16;
          continue;
        }
        k2 += r;
        var z = dctZigZag[k2];
        component2.blockData[offset2 + z] = receiveAndExtend(s) * (1 << successive);
        k2++;
      }
    }
    var successiveACState = 0, successiveACNextValue;
    function decodeACSuccessive(component2, offset2) {
      var k2 = spectralStart, e = spectralEnd, r = 0;
      while (k2 <= e) {
        var z = dctZigZag[k2];
        switch (successiveACState) {
          case 0:
            var rs = decodeHuffman(component2.huffmanTableAC);
            var s = rs & 15;
            r = rs >> 4;
            if (s === 0) {
              if (r < 15) {
                eobrun = receive(r) + (1 << r);
                successiveACState = 4;
              } else {
                r = 16;
                successiveACState = 1;
              }
            } else {
              if (s !== 1)
                throw "invalid ACn encoding";
              successiveACNextValue = receiveAndExtend(s);
              successiveACState = r ? 2 : 3;
            }
            continue;
          case 1:
          case 2:
            if (component2.blockData[offset2 + z]) {
              component2.blockData[offset2 + z] += readBit() << successive;
            } else {
              r--;
              if (r === 0)
                successiveACState = successiveACState == 2 ? 3 : 0;
            }
            break;
          case 3:
            if (component2.blockData[offset2 + z]) {
              component2.blockData[offset2 + z] += readBit() << successive;
            } else {
              component2.blockData[offset2 + z] = successiveACNextValue << successive;
              successiveACState = 0;
            }
            break;
          case 4:
            if (component2.blockData[offset2 + z]) {
              component2.blockData[offset2 + z] += readBit() << successive;
            }
            break;
        }
        k2++;
      }
      if (successiveACState === 4) {
        eobrun--;
        if (eobrun === 0)
          successiveACState = 0;
      }
    }
    function decodeMcu(component2, decode2, mcu2, row, col) {
      var mcuRow = mcu2 / mcusPerLine | 0;
      var mcuCol = mcu2 % mcusPerLine;
      var blockRow = mcuRow * component2.v + row;
      var blockCol = mcuCol * component2.h + col;
      var offset2 = getBlockBufferOffset(component2, blockRow, blockCol);
      decode2(component2, offset2);
    }
    function decodeBlock(component2, decode2, mcu2) {
      var blockRow = mcu2 / component2.blocksPerLine | 0;
      var blockCol = mcu2 % component2.blocksPerLine;
      var offset2 = getBlockBufferOffset(component2, blockRow, blockCol);
      decode2(component2, offset2);
    }
    var componentsLength = components.length;
    var component, i, j, k, n;
    var decodeFn;
    if (progressive) {
      if (spectralStart === 0)
        decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;
      else
        decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;
    } else {
      decodeFn = decodeBaseline;
    }
    var mcu = 0, marker;
    var mcuExpected;
    if (componentsLength == 1) {
      mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;
    } else {
      mcuExpected = mcusPerLine * frame.mcusPerColumn;
    }
    if (!resetInterval) {
      resetInterval = mcuExpected;
    }
    var h, v;
    while (mcu < mcuExpected) {
      for (i = 0; i < componentsLength; i++) {
        components[i].pred = 0;
      }
      eobrun = 0;
      if (componentsLength == 1) {
        component = components[0];
        for (n = 0; n < resetInterval; n++) {
          decodeBlock(component, decodeFn, mcu);
          mcu++;
        }
      } else {
        for (n = 0; n < resetInterval; n++) {
          for (i = 0; i < componentsLength; i++) {
            component = components[i];
            h = component.h;
            v = component.v;
            for (j = 0; j < v; j++) {
              for (k = 0; k < h; k++) {
                decodeMcu(component, decodeFn, mcu, j, k);
              }
            }
          }
          mcu++;
        }
      }
      bitsCount = 0;
      marker = data[offset] << 8 | data[offset + 1];
      if (marker <= 65280) {
        throw "marker was not found";
      }
      if (marker >= 65488 && marker <= 65495) {
        offset += 2;
      } else {
        break;
      }
    }
    return offset - startOffset;
  }
  function quantizeAndInverse(component, blockBufferOffset, p) {
    var qt = component.quantizationTable;
    var v0, v1, v2, v3, v4, v5, v6, v7, t;
    var i;
    for (i = 0; i < 64; i++) {
      p[i] = component.blockData[blockBufferOffset + i] * qt[i];
    }
    for (i = 0; i < 8; ++i) {
      var row = 8 * i;
      if (p[1 + row] === 0 && p[2 + row] === 0 && p[3 + row] === 0 && p[4 + row] === 0 && p[5 + row] === 0 && p[6 + row] === 0 && p[7 + row] === 0) {
        t = dctSqrt2 * p[0 + row] + 512 >> 10;
        p[0 + row] = t;
        p[1 + row] = t;
        p[2 + row] = t;
        p[3 + row] = t;
        p[4 + row] = t;
        p[5 + row] = t;
        p[6 + row] = t;
        p[7 + row] = t;
        continue;
      }
      v0 = dctSqrt2 * p[0 + row] + 128 >> 8;
      v1 = dctSqrt2 * p[4 + row] + 128 >> 8;
      v2 = p[2 + row];
      v3 = p[6 + row];
      v4 = dctSqrt1d2 * (p[1 + row] - p[7 + row]) + 128 >> 8;
      v7 = dctSqrt1d2 * (p[1 + row] + p[7 + row]) + 128 >> 8;
      v5 = p[3 + row] << 4;
      v6 = p[5 + row] << 4;
      t = v0 - v1 + 1 >> 1;
      v0 = v0 + v1 + 1 >> 1;
      v1 = t;
      t = v2 * dctSin6 + v3 * dctCos6 + 128 >> 8;
      v2 = v2 * dctCos6 - v3 * dctSin6 + 128 >> 8;
      v3 = t;
      t = v4 - v6 + 1 >> 1;
      v4 = v4 + v6 + 1 >> 1;
      v6 = t;
      t = v7 + v5 + 1 >> 1;
      v5 = v7 - v5 + 1 >> 1;
      v7 = t;
      t = v0 - v3 + 1 >> 1;
      v0 = v0 + v3 + 1 >> 1;
      v3 = t;
      t = v1 - v2 + 1 >> 1;
      v1 = v1 + v2 + 1 >> 1;
      v2 = t;
      t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;
      v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;
      v7 = t;
      t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;
      v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;
      v6 = t;
      p[0 + row] = v0 + v7;
      p[7 + row] = v0 - v7;
      p[1 + row] = v1 + v6;
      p[6 + row] = v1 - v6;
      p[2 + row] = v2 + v5;
      p[5 + row] = v2 - v5;
      p[3 + row] = v3 + v4;
      p[4 + row] = v3 - v4;
    }
    for (i = 0; i < 8; ++i) {
      var col = i;
      if (p[1 * 8 + col] === 0 && p[2 * 8 + col] === 0 && p[3 * 8 + col] === 0 && p[4 * 8 + col] === 0 && p[5 * 8 + col] === 0 && p[6 * 8 + col] === 0 && p[7 * 8 + col] === 0) {
        t = dctSqrt2 * p[i + 0] + 8192 >> 14;
        p[0 * 8 + col] = t;
        p[1 * 8 + col] = t;
        p[2 * 8 + col] = t;
        p[3 * 8 + col] = t;
        p[4 * 8 + col] = t;
        p[5 * 8 + col] = t;
        p[6 * 8 + col] = t;
        p[7 * 8 + col] = t;
        continue;
      }
      v0 = dctSqrt2 * p[0 * 8 + col] + 2048 >> 12;
      v1 = dctSqrt2 * p[4 * 8 + col] + 2048 >> 12;
      v2 = p[2 * 8 + col];
      v3 = p[6 * 8 + col];
      v4 = dctSqrt1d2 * (p[1 * 8 + col] - p[7 * 8 + col]) + 2048 >> 12;
      v7 = dctSqrt1d2 * (p[1 * 8 + col] + p[7 * 8 + col]) + 2048 >> 12;
      v5 = p[3 * 8 + col];
      v6 = p[5 * 8 + col];
      t = v0 - v1 + 1 >> 1;
      v0 = v0 + v1 + 1 >> 1;
      v1 = t;
      t = v2 * dctSin6 + v3 * dctCos6 + 2048 >> 12;
      v2 = v2 * dctCos6 - v3 * dctSin6 + 2048 >> 12;
      v3 = t;
      t = v4 - v6 + 1 >> 1;
      v4 = v4 + v6 + 1 >> 1;
      v6 = t;
      t = v7 + v5 + 1 >> 1;
      v5 = v7 - v5 + 1 >> 1;
      v7 = t;
      t = v0 - v3 + 1 >> 1;
      v0 = v0 + v3 + 1 >> 1;
      v3 = t;
      t = v1 - v2 + 1 >> 1;
      v1 = v1 + v2 + 1 >> 1;
      v2 = t;
      t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;
      v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;
      v7 = t;
      t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;
      v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;
      v6 = t;
      p[0 * 8 + col] = v0 + v7;
      p[7 * 8 + col] = v0 - v7;
      p[1 * 8 + col] = v1 + v6;
      p[6 * 8 + col] = v1 - v6;
      p[2 * 8 + col] = v2 + v5;
      p[5 * 8 + col] = v2 - v5;
      p[3 * 8 + col] = v3 + v4;
      p[4 * 8 + col] = v3 - v4;
    }
    for (i = 0; i < 64; ++i) {
      var index = blockBufferOffset + i;
      var q = p[i];
      q = q <= -2056 / component.bitConversion ? 0 : q >= 2024 / component.bitConversion ? 255 / component.bitConversion : q + 2056 / component.bitConversion >> 4;
      component.blockData[index] = q;
    }
  }
  function buildComponentData(frame, component) {
    var blocksPerLine = component.blocksPerLine;
    var blocksPerColumn = component.blocksPerColumn;
    var computationBuffer = new Int32Array(64);
    for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {
      for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {
        var offset = getBlockBufferOffset(component, blockRow, blockCol);
        quantizeAndInverse(component, offset, computationBuffer);
      }
    }
    return component.blockData;
  }
  function clampToUint8(a) {
    return a <= 0 ? 0 : a >= 255 ? 255 : a | 0;
  }
  constructor.prototype = {
    load: function load(path) {
      var handleData = function(data2) {
        this.parse(data2);
        if (this.onload)
          this.onload();
      }.bind(this);
      if (path.indexOf("data:") > -1) {
        var offset = path.indexOf("base64,") + 7;
        var data = atob(path.substring(offset));
        var arr = new Uint8Array(data.length);
        for (var i = data.length - 1; i >= 0; i--) {
          arr[i] = data.charCodeAt(i);
        }
        handleData(data);
      } else {
        var xhr = new XMLHttpRequest();
        xhr.open("GET", path, true);
        xhr.responseType = "arraybuffer";
        xhr.onload = function() {
          var data2 = new Uint8Array(xhr.response);
          handleData(data2);
        }.bind(this);
        xhr.send(null);
      }
    },
    parse: function parse(data) {
      function readUint16() {
        var value = data[offset] << 8 | data[offset + 1];
        offset += 2;
        return value;
      }
      function readDataBlock() {
        var length = readUint16();
        var array = data.subarray(offset, offset + length - 2);
        offset += array.length;
        return array;
      }
      function prepareComponents(frame2) {
        var mcusPerLine = Math.ceil(frame2.samplesPerLine / 8 / frame2.maxH);
        var mcusPerColumn = Math.ceil(frame2.scanLines / 8 / frame2.maxV);
        for (var i2 = 0; i2 < frame2.components.length; i2++) {
          component = frame2.components[i2];
          var blocksPerLine = Math.ceil(Math.ceil(frame2.samplesPerLine / 8) * component.h / frame2.maxH);
          var blocksPerColumn = Math.ceil(Math.ceil(frame2.scanLines / 8) * component.v / frame2.maxV);
          var blocksPerLineForMcu = mcusPerLine * component.h;
          var blocksPerColumnForMcu = mcusPerColumn * component.v;
          var blocksBufferSize = 64 * blocksPerColumnForMcu * (blocksPerLineForMcu + 1);
          component.blockData = new Int16Array(blocksBufferSize);
          component.blocksPerLine = blocksPerLine;
          component.blocksPerColumn = blocksPerColumn;
        }
        frame2.mcusPerLine = mcusPerLine;
        frame2.mcusPerColumn = mcusPerColumn;
      }
      var offset = 0;
      var jfif = null;
      var adobe = null;
      var frame, resetInterval;
      var quantizationTables = [];
      var huffmanTablesAC = [], huffmanTablesDC = [];
      var fileMarker = readUint16();
      if (fileMarker != 65496) {
        throw "SOI not found";
      }
      fileMarker = readUint16();
      while (fileMarker != 65497) {
        var i, j, l;
        switch (fileMarker) {
          case 65504:
          case 65505:
          case 65506:
          case 65507:
          case 65508:
          case 65509:
          case 65510:
          case 65511:
          case 65512:
          case 65513:
          case 65514:
          case 65515:
          case 65516:
          case 65517:
          case 65518:
          case 65519:
          case 65534:
            var appData = readDataBlock();
            if (fileMarker === 65504) {
              if (appData[0] === 74 && appData[1] === 70 && appData[2] === 73 && appData[3] === 70 && appData[4] === 0) {
                jfif = {
                  version: {
                    major: appData[5],
                    minor: appData[6]
                  },
                  densityUnits: appData[7],
                  xDensity: appData[8] << 8 | appData[9],
                  yDensity: appData[10] << 8 | appData[11],
                  thumbWidth: appData[12],
                  thumbHeight: appData[13],
                  thumbData: appData.subarray(14, 14 + 3 * appData[12] * appData[13])
                };
              }
            }
            if (fileMarker === 65518) {
              if (appData[0] === 65 && appData[1] === 100 && appData[2] === 111 && appData[3] === 98 && appData[4] === 101 && appData[5] === 0) {
                adobe = {
                  version: appData[6],
                  flags0: appData[7] << 8 | appData[8],
                  flags1: appData[9] << 8 | appData[10],
                  transformCode: appData[11]
                };
              }
            }
            break;
          case 65499:
            var quantizationTablesLength = readUint16();
            var quantizationTablesEnd = quantizationTablesLength + offset - 2;
            while (offset < quantizationTablesEnd) {
              var quantizationTableSpec = data[offset++];
              var tableData = new Int32Array(64);
              if (quantizationTableSpec >> 4 === 0) {
                for (j = 0; j < 64; j++) {
                  var z = dctZigZag[j];
                  tableData[z] = data[offset++];
                }
              } else if (quantizationTableSpec >> 4 === 1) {
                for (j = 0; j < 64; j++) {
                  var zz = dctZigZag[j];
                  tableData[zz] = readUint16();
                }
              } else
                throw "DQT: invalid table spec";
              quantizationTables[quantizationTableSpec & 15] = tableData;
            }
            break;
          case 65472:
          case 65473:
          case 65474:
            if (frame) {
              throw "Only single frame JPEGs supported";
            }
            readUint16();
            frame = {};
            frame.extended = fileMarker === 65473;
            frame.progressive = fileMarker === 65474;
            frame.precision = data[offset++];
            frame.scanLines = readUint16();
            frame.samplesPerLine = readUint16();
            frame.components = [];
            frame.componentIds = {};
            var componentsCount = data[offset++], componentId;
            var maxH = 0, maxV = 0;
            for (i = 0; i < componentsCount; i++) {
              componentId = data[offset];
              var h = data[offset + 1] >> 4;
              var v = data[offset + 1] & 15;
              if (maxH < h)
                maxH = h;
              if (maxV < v)
                maxV = v;
              var qId = data[offset + 2];
              l = frame.components.push({
                h,
                v,
                quantizationTable: quantizationTables[qId],
                quantizationTableId: qId,
                bitConversion: 255 / ((1 << frame.precision) - 1)
              });
              frame.componentIds[componentId] = l - 1;
              offset += 3;
            }
            frame.maxH = maxH;
            frame.maxV = maxV;
            prepareComponents(frame);
            break;
          case 65476:
            var huffmanLength = readUint16();
            for (i = 2; i < huffmanLength; ) {
              var huffmanTableSpec = data[offset++];
              var codeLengths = new Uint8Array(16);
              var codeLengthSum = 0;
              for (j = 0; j < 16; j++, offset++)
                codeLengthSum += codeLengths[j] = data[offset];
              var huffmanValues = new Uint8Array(codeLengthSum);
              for (j = 0; j < codeLengthSum; j++, offset++)
                huffmanValues[j] = data[offset];
              i += 17 + codeLengthSum;
              (huffmanTableSpec >> 4 === 0 ? huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] = buildHuffmanTable(codeLengths, huffmanValues);
            }
            break;
          case 65501:
            readUint16();
            resetInterval = readUint16();
            break;
          case 65498:
            var scanLength = readUint16();
            var selectorsCount = data[offset++];
            var components = [], component;
            for (i = 0; i < selectorsCount; i++) {
              var componentIndex = frame.componentIds[data[offset++]];
              component = frame.components[componentIndex];
              var tableSpec = data[offset++];
              component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];
              component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];
              components.push(component);
            }
            var spectralStart = data[offset++];
            var spectralEnd = data[offset++];
            var successiveApproximation = data[offset++];
            var processed = decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successiveApproximation >> 4, successiveApproximation & 15);
            offset += processed;
            break;
          default:
            if (data[offset - 3] == 255 && data[offset - 2] >= 192 && data[offset - 2] <= 254) {
              offset -= 3;
              break;
            }
            throw "unknown JPEG marker " + fileMarker.toString(16);
        }
        fileMarker = readUint16();
      }
      this.width = frame.samplesPerLine;
      this.height = frame.scanLines;
      this.jfif = jfif;
      this.adobe = adobe;
      this.components = [];
      switch (frame.components.length) {
        case 1:
          this.colorspace = ColorSpace.Grayscale;
          break;
        case 3:
          if (this.adobe)
            this.colorspace = ColorSpace.AdobeRGB;
          else
            this.colorspace = ColorSpace.RGB;
          break;
        case 4:
          this.colorspace = ColorSpace.CYMK;
          break;
        default:
          this.colorspace = ColorSpace.Unknown;
      }
      for (var i = 0; i < frame.components.length; i++) {
        var component = frame.components[i];
        if (!component.quantizationTable && component.quantizationTableId !== null)
          component.quantizationTable = quantizationTables[component.quantizationTableId];
        this.components.push({
          output: buildComponentData(frame, component),
          scaleX: component.h / frame.maxH,
          scaleY: component.v / frame.maxV,
          blocksPerLine: component.blocksPerLine,
          blocksPerColumn: component.blocksPerColumn,
          bitConversion: component.bitConversion
        });
      }
    },
    getData16: function getData16(width, height) {
      if (this.components.length !== 1)
        throw "Unsupported color mode";
      var scaleX = this.width / width, scaleY = this.height / height;
      var component, componentScaleX, componentScaleY;
      var x, y, i;
      var offset = 0;
      var numComponents = this.components.length;
      var dataLength = width * height * numComponents;
      var data = new Uint16Array(dataLength);
      var lineData = new Uint16Array((this.components[0].blocksPerLine << 3) * this.components[0].blocksPerColumn * 8);
      for (i = 0; i < numComponents; i++) {
        component = this.components[i];
        var blocksPerLine = component.blocksPerLine;
        var blocksPerColumn = component.blocksPerColumn;
        var samplesPerLine = blocksPerLine << 3;
        var j, k;
        var lineOffset = 0;
        for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {
          var scanLine = blockRow << 3;
          for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {
            var bufferOffset = getBlockBufferOffset(component, blockRow, blockCol);
            var offset = 0, sample = blockCol << 3;
            for (j = 0; j < 8; j++) {
              var lineOffset = (scanLine + j) * samplesPerLine;
              for (k = 0; k < 8; k++) {
                lineData[lineOffset + sample + k] = component.output[bufferOffset + offset++];
              }
            }
          }
        }
        componentScaleX = component.scaleX * scaleX;
        componentScaleY = component.scaleY * scaleY;
        offset = i;
        var cx, cy;
        var index;
        for (y = 0; y < height; y++) {
          for (x = 0; x < width; x++) {
            cy = 0 | y * componentScaleY;
            cx = 0 | x * componentScaleX;
            index = cy * samplesPerLine + cx;
            data[offset] = lineData[index];
            offset += numComponents;
          }
        }
      }
      return data;
    },
    getData: function getData(width, height) {
      var scaleX = this.width / width, scaleY = this.height / height;
      var component, componentScaleX, componentScaleY;
      var x, y, i;
      var offset = 0;
      var Y, Cb, Cr, C, M, R, G, B;
      var colorTransform;
      var numComponents = this.components.length;
      var dataLength = width * height * numComponents;
      var data = new Uint8Array(dataLength);
      var lineData = new Uint8Array((this.components[0].blocksPerLine << 3) * this.components[0].blocksPerColumn * 8);
      for (i = 0; i < numComponents; i++) {
        component = this.components[i];
        var blocksPerLine = component.blocksPerLine;
        var blocksPerColumn = component.blocksPerColumn;
        var samplesPerLine = blocksPerLine << 3;
        var j, k;
        var lineOffset = 0;
        for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {
          var scanLine = blockRow << 3;
          for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {
            var bufferOffset = getBlockBufferOffset(component, blockRow, blockCol);
            var offset = 0, sample = blockCol << 3;
            for (j = 0; j < 8; j++) {
              var lineOffset = (scanLine + j) * samplesPerLine;
              for (k = 0; k < 8; k++) {
                lineData[lineOffset + sample + k] = component.output[bufferOffset + offset++] * component.bitConversion;
              }
            }
          }
        }
        componentScaleX = component.scaleX * scaleX;
        componentScaleY = component.scaleY * scaleY;
        offset = i;
        var cx, cy;
        var index;
        for (y = 0; y < height; y++) {
          for (x = 0; x < width; x++) {
            cy = 0 | y * componentScaleY;
            cx = 0 | x * componentScaleX;
            index = cy * samplesPerLine + cx;
            data[offset] = lineData[index];
            offset += numComponents;
          }
        }
      }
      switch (numComponents) {
        case 1:
        case 2:
          break;
        case 3:
          colorTransform = true;
          if (this.adobe && this.adobe.transformCode)
            colorTransform = true;
          else if (typeof this.colorTransform !== "undefined")
            colorTransform = !!this.colorTransform;
          if (colorTransform) {
            for (i = 0; i < dataLength; i += numComponents) {
              Y = data[i];
              Cb = data[i + 1];
              Cr = data[i + 2];
              R = clampToUint8(Y - 179.456 + 1.402 * Cr);
              G = clampToUint8(Y + 135.459 - 0.344 * Cb - 0.714 * Cr);
              B = clampToUint8(Y - 226.816 + 1.772 * Cb);
              data[i] = R;
              data[i + 1] = G;
              data[i + 2] = B;
            }
          }
          break;
        case 4:
          if (!this.adobe)
            throw "Unsupported color mode (4 components)";
          colorTransform = false;
          if (this.adobe && this.adobe.transformCode)
            colorTransform = true;
          else if (typeof this.colorTransform !== "undefined")
            colorTransform = !!this.colorTransform;
          if (colorTransform) {
            for (i = 0; i < dataLength; i += numComponents) {
              Y = data[i];
              Cb = data[i + 1];
              Cr = data[i + 2];
              C = clampToUint8(434.456 - Y - 1.402 * Cr);
              M = clampToUint8(119.541 - Y + 0.344 * Cb + 0.714 * Cr);
              Y = clampToUint8(481.816 - Y - 1.772 * Cb);
              data[i] = C;
              data[i + 1] = M;
              data[i + 2] = Y;
            }
          }
          break;
        default:
          throw "Unsupported color mode";
      }
      return data;
    }
  };
  return constructor;
}();
class JPEGLosslessDecoder$2 extends Decoder {
  constructor() {
    super(...arguments);
    this.jpegs = null;
  }
  decode(frameNo) {
    const {
      image
    } = this;
    if (!this.jpegs) {
      this.jpegs = getJpegData(image.data);
    }
    const decoder = new JpegImage();
    const jpeg = this.jpegs[frameNo];
    const buffer = new Uint8Array(jpeg.buffer, jpeg.byteOffset, jpeg.byteLength);
    decoder.parse(buffer);
    const {
      width,
      height
    } = decoder;
    let decoded = null;
    if (image.bitsAllocated === 8) {
      decoded = decoder.getData(width, height);
    } else {
      decoded = decoder.getData16(width, height);
    }
    return Promise.resolve(decoded);
  }
}
class ImageSize {
  constructor({
    width,
    height,
    rows,
    columns
  }) {
    var _ref, _ref2;
    this.width = (_ref = width !== null && width !== void 0 ? width : columns) !== null && _ref !== void 0 ? _ref : 0;
    this.height = (_ref2 = height !== null && height !== void 0 ? height : rows) !== null && _ref2 !== void 0 ? _ref2 : 0;
  }
  get rows() {
    return this.height;
  }
  get columns() {
    return this.width;
  }
  get numberOfPixels() {
    const {
      width,
      height
    } = this;
    return width * height;
  }
  scale(scale) {
    let {
      width,
      height
    } = this;
    width *= scale;
    height *= scale;
    return new ImageSize({
      width,
      height
    });
  }
}
var Codec;
(function(Codec2) {
  Codec2[Codec2["Uncompressed"] = 0] = "Uncompressed";
  Codec2[Codec2["JPEG"] = 1] = "JPEG";
  Codec2[Codec2["JPEGExt"] = 2] = "JPEGExt";
  Codec2[Codec2["JPEG2000"] = 4] = "JPEG2000";
  Codec2[Codec2["JPEGLS"] = 8] = "JPEGLS";
  Codec2[Codec2["JPEGLossless"] = 16] = "JPEGLossless";
  Codec2[Codec2["RLE"] = 32] = "RLE";
})(Codec || (Codec = {}));
const Signed = 8;
var PixelDataType;
(function(PixelDataType2) {
  PixelDataType2[PixelDataType2["Uint8"] = 1] = "Uint8";
  PixelDataType2[PixelDataType2["Int8"] = 1 & Signed] = "Int8";
  PixelDataType2[PixelDataType2["Uint16"] = 2] = "Uint16";
  PixelDataType2[PixelDataType2["Int16"] = 2 & Signed] = "Int16";
})(PixelDataType || (PixelDataType = {}));
class DecoderInfo {
  constructor(image) {
    this.image = image;
    if (!image.pixelData) {
      throw Error("Image has no data");
    }
    this.size = new ImageSize(image);
    switch (image.transferSyntax) {
      case TransferSyntax.CompressionJpeg:
      case TransferSyntax.CompressionJpegBaseline8bit:
        this.codec = Codec.JPEG;
        break;
      case TransferSyntax.CompressionJpegBaseline12bit:
        this.codec = Codec.JPEGExt;
        break;
      case TransferSyntax.CompressionJpegLossless:
      case TransferSyntax.CompressionJpegLosslessSel1:
        this.codec = Codec.JPEGLossless;
        break;
      case TransferSyntax.CompressionJpegLs:
      case TransferSyntax.CompressionJpegLsLossless:
        this.codec = Codec.JPEGLS;
        break;
      case TransferSyntax.CompressionJpeg2000Lossless:
      case TransferSyntax.CompressionJpeg2000:
        this.codec = Codec.JPEG2000;
        break;
      case TransferSyntax.CompressionRLE:
        this.codec = Codec.RLE;
        break;
      case TransferSyntax.CompressionDeflate:
      case TransferSyntax.ImplicitLittle:
      case TransferSyntax.ExplicitLittle:
      case TransferSyntax.ExplicitBig:
        this.codec = Codec.Uncompressed;
        break;
      default:
        this.codec = Codec.Uncompressed;
    }
    this.rgb = !(image.photometricInterpretation || "").startsWith("MONO");
    this.planar = !!image.planarConfig;
    this.samples = image.samplesPerPixel;
    this.bitsAllocated = image.bitsAllocated;
    this.bytesAllocated = Math.round(image.bitsAllocated / 8);
    this.bitsStored = image.bitsStored;
    this.signed = image.pixelRepresentation === 1;
    this.data = image.pixelData.value;
    this.littleEndian = image.littleEndian;
  }
}
const decodeInfoForImage = (image) => new DecoderInfo(image);
const hasCreateObjectURL = !!URL.createObjectURL;
const decoderForImage = (image) => {
  const info = decodeInfoForImage(image);
  switch (info.codec) {
    case Codec.JPEG:
      if (hasCreateObjectURL) {
        return new NativeDecoder(info);
      }
      return new JPEGLosslessDecoder$2(info);
    case Codec.JPEGExt:
      return new JPEGLosslessDecoder$2(info);
    case Codec.JPEGLS:
      return new JPEGLosslessDecoder$1(info);
    case Codec.JPEGLossless:
      return new JPEGLosslessDecoder(info);
    case Codec.JPEG2000:
      if (hasCreateObjectURL && /^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
        return new NativeDecoder(info);
      }
      return new JPEG2000Decoder(info);
    case Codec.RLE:
      return new RLEDecoder(info);
    case Codec.Uncompressed:
      return new Decoder(info);
  }
  return null;
};
const glslUnpackWordString = (image, integerVal = true) => {
  let val;
  let divisor = "";
  const {
    bitsAllocated,
    signed,
    pixelPaddingVal
  } = image;
  if (!integerVal) {
    divisor = ` / ${2 ** image.bitsStored}.0`;
  }
  if (bitsAllocated <= 8) {
    val = "float p = (color.r * 255.0);\n";
    if (pixelPaddingVal !== null) {
      let pv = pixelPaddingVal;
      if (signed) {
        pv = new Uint8Array(new Int8Array([pixelPaddingVal]))[0];
      }
      val = `${val}if (floor(p + 0.5) == ${pv}.0) return -1.0;
`;
    }
    if (signed) {
      val = `${val}(p > 127.0 ? p - 127.0 : p + 127.0);
`;
    }
  } else {
    const {
      rgb
    } = image;
    const byte2Chan = rgb ? "g" : "a";
    if (image.littleEndian) {
      val = `float p = (color.${byte2Chan} * 65280.0 + color.r * 255.0);
`;
    } else {
      val = `float p = (color.r * 65280.0 + color.${byte2Chan} * 255.0);
`;
    }
    if (pixelPaddingVal !== null) {
      let pv = pixelPaddingVal;
      if (signed) {
        pv = new Uint16Array(new Int16Array([pixelPaddingVal]))[0];
      }
      val = `${val}if (floor(p + 0.5) == ${pv}.0) return -1.0;
`;
    }
    if (signed) {
      val = `${val}p = (p > 32767.0 ? p - 32767.0 : p + 32767.0);
`;
    }
  }
  return `${val}return p${divisor};`;
};
const preCompileGreyscaleShader = (info, shaderString, integerVal = true) => {
  let outShaderString = shaderString.replace("$(word)", glslUnpackWordString(info, integerVal));
  const {
    invert,
    pixelPaddingVal
  } = info;
  if (invert) {
    outShaderString = outShaderString.replace("// $(shouldInvert)", "grey = 1.0 - grey;");
  }
  if (pixelPaddingVal !== null) {
    outShaderString = outShaderString.replace("// $(pixelPadding)", "if (grey < 0.0) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\n");
  }
  return outShaderString;
};
const vertexShader = "attribute vec4 position;\n\nvoid main() {\n    gl_Position = position;\n}\n";
const minMaxShader = "#extension GL_EXT_draw_buffers : require\n\nprecision mediump float;\n\n#define CELL_SIZE $(cellSize)\n\nuniform sampler2D u_minTexture;\nuniform sampler2D u_maxTexture;\nuniform vec2 u_srcResolution;\n\nfloat greyscale(vec4 color) {\n  $(word)\n}\n\nvoid main() {\n    // compute the first pixel the source cell\n    vec2 srcPixel = floor(gl_FragCoord.xy) * float(CELL_SIZE);\n\n    // one pixel in source\n    vec2 onePixel = vec2(1) / u_srcResolution;\n\n    // uv for first pixel in cell. +0.5 for center of pixel\n    vec2 uv = (srcPixel + 0.5) / u_srcResolution;\n\n    float minVal = 65535.0;\n    float maxVal = 0.0;\n    vec4 minColor = vec4(1.0, 1.0, 1.0, 1.0);\n    vec4 maxColor = vec4(0.0, 0.0, 0.0, 0.0);\n    for (int y = 0; y < CELL_SIZE; ++y) {\n        for (int x = 0; x < CELL_SIZE; ++x) {\n            vec2 off = uv + vec2(x, y) * onePixel;\n            vec4 colorMin = texture2D(u_minTexture, off);\n            float grey = greyscale(colorMin);\n            if (minVal > grey) {\n                minColor = colorMin;\n                minVal = grey;\n            }\n            vec4 colorMax = texture2D(u_maxTexture, off);\n            grey = greyscale(colorMax);\n            if (maxVal < grey) {\n                maxColor = colorMax;\n                maxVal = grey;\n            }\n        }\n    }\n\n    gl_FragData[0] = minColor;\n    gl_FragData[1] = maxColor;\n}\n";
const contrastifyShader = "precision highp float;\nuniform sampler2D u_minColor;\nuniform sampler2D u_maxColor;\nuniform sampler2D u_texture;\nuniform vec2 u_resolution;\nuniform float u_slope;\nuniform float u_intercept;\n\nfloat greyscale(vec4 color) {\n	$(word)\n}\n\nfloat minMaxWord(vec4 color) {\n	$(minMaxWord)\n}\n\nvoid main() {\n	vec2 uv = gl_FragCoord.xy / u_resolution;\n	uv.y = 1.0 - uv.y;\n	float grey = greyscale(texture2D(u_texture, uv));\n	// $(pixelPadding)\n	float minColor = minMaxWord(texture2D(u_minColor, vec2(0)));\n	float maxColor = minMaxWord(texture2D(u_maxColor, vec2(0)));\n\n	grey = grey * u_slope + u_intercept;\n	minColor = minColor * u_slope + u_intercept;\n	maxColor = maxColor * u_slope + u_intercept;\n\n	float ww = maxColor - minColor;\n	float wc = (minColor + maxColor) / 2.0 - 0.5;\n\n	grey = ((grey - wc) / ww) + 0.5;\n	grey = clamp(grey, 0.0, 1.0);\n\n	// $(shouldInvert)\n	gl_FragColor = vec4(grey, grey, grey, 1);\n}\n";
const cellSize = 16;
class ContrastifyProgram {
  constructor(gl, info) {
    this.unitQuadBufferInfo = null;
    const ext = gl.getExtension("WEBGL_draw_buffers");
    if (!ext) {
      throw new Error("Image requires WEBGL_draw_buffers");
    }
    this.ext = ext;
    const [minMaxFrag, contrastifyFrag] = ContrastifyProgram.programStringForInfo(info);
    this.minMaxProgramInfo = createProgramInfo(gl, [vertexShader, minMaxFrag]);
    this.contrastProgramInfo = createProgramInfo(gl, [vertexShader, contrastifyFrag]);
    this.unitQuadBufferInfo = primitives.createXYQuadBufferInfo(gl);
    this.gl = gl;
    return this;
  }
  static programStringForInfo(info) {
    const getMinMaxWordString = glslUnpackWordString({
      ...info,
      pixelPaddingVal: null
    }, true);
    const minMaxFragString = minMaxShader.replace("$(cellSize)", cellSize.toString()).replace("$(word)", getMinMaxWordString);
    const contrastifyShaderString = preCompileGreyscaleShader(info, contrastifyShader.replace("$(minMaxWord)", getMinMaxWordString), true);
    return [minMaxFragString, contrastifyShaderString];
  }
  use() {
  }
  run(frame, outputSize) {
    const framebuffers = [];
    const {
      gl,
      ext,
      minMaxProgramInfo,
      contrastProgramInfo,
      unitQuadBufferInfo
    } = this;
    const {
      imageInfo
    } = frame;
    const {
      size,
      slope,
      intercept
    } = imageInfo;
    const {
      width,
      height
    } = size;
    let w = width;
    let h = height;
    const srcTex = frame.texture;
    while (w > 1 || h > 1) {
      w = Math.max(1, (w + cellSize - 1) / cellSize | 0);
      h = Math.max(1, (h + cellSize - 1) / cellSize | 0);
      const fbi = createFramebufferInfo(gl, [{
        format: gl.RGBA,
        min: gl.NEAREST,
        mag: gl.NEAREST,
        wrap: gl.CLAMP_TO_EDGE
      }, {
        format: gl.RGBA,
        min: gl.NEAREST,
        mag: gl.NEAREST,
        wrap: gl.CLAMP_TO_EDGE
      }], w, h);
      ext.drawBuffersWEBGL([ext.COLOR_ATTACHMENT0_WEBGL, ext.COLOR_ATTACHMENT1_WEBGL]);
      framebuffers.push(fbi);
    }
    const lastFBI = framebuffers[framebuffers.length - 1];
    const uniforms = {
      u_srcResolution: [width, height],
      u_minTexture: srcTex,
      u_maxTexture: srcTex
    };
    gl.useProgram(minMaxProgramInfo.program);
    setBuffersAndAttributes(gl, minMaxProgramInfo, unitQuadBufferInfo);
    w = width;
    h = height;
    framebuffers.forEach((fbi) => {
      w = Math.max(1, (w + cellSize - 1) / cellSize | 0);
      h = Math.max(1, (h + cellSize - 1) / cellSize | 0);
      bindFramebufferInfo(gl, fbi);
      setUniforms(minMaxProgramInfo, uniforms);
      drawBufferInfo(gl, unitQuadBufferInfo);
      [uniforms.u_minTexture, uniforms.u_maxTexture] = fbi.attachments;
      uniforms.u_srcResolution = [w, h];
    });
    bindFramebufferInfo(gl, null);
    gl.useProgram(contrastProgramInfo.program);
    setUniforms(contrastProgramInfo, {
      u_resolution: [outputSize.width, outputSize.height],
      u_texture: srcTex,
      u_minColor: lastFBI.attachments[0],
      u_maxColor: lastFBI.attachments[1],
      u_slope: slope,
      u_intercept: intercept
    });
    drawBufferInfo(gl, unitQuadBufferInfo);
    setTimeout(() => {
      framebuffers.forEach((fbi) => {
        const {
          attachments,
          framebuffer
        } = fbi;
        gl.deleteFramebuffer(framebuffer);
        if (attachments[0] instanceof WebGLRenderbuffer) {
          gl.deleteRenderbuffer(attachments[0]);
        } else {
          gl.deleteTexture(attachments[0]);
        }
      });
    }, 0);
  }
  destroy() {
    this.gl.deleteProgram(this.contrastProgramInfo.program);
    this.gl.deleteProgram(this.minMaxProgramInfo.program);
  }
}
const vertexShader$1 = "attribute vec4 position;\n\nvoid main() {\n    gl_Position = position;\n}\n";
const colorShader = "precision highp float;\nuniform bool u_invert;\nuniform sampler2D u_texture;\nuniform vec2 u_resolution;\n\nuniform float u_slope;\nuniform float u_intercept;\n\nvec4 getPlanar(vec2 coord) {\n	float third = 1.0 / 3.0;\n	int col = int(mod(coord.y, 3.0));\n	float yPos = coord.y / 3.0;\n\n	float xPos = coord.x;\n\n	vec4 red = texture2D(u_texture, vec2(xPos, yPos));\n\n	yPos = yPos + third;\n	vec4 green = texture2D(u_texture, vec2(xPos, yPos));\n\n	yPos = yPos + third;\n	vec4 blue = texture2D(u_texture, vec2(xPos, yPos));\n\n	if (col == 0) {\n		return vec4(red.r, green.r, blue.r, 1.0);\n	}\n	if (col == 1) {\n		return vec4(red.g, green.g, blue.g, 1.0);\n	}\n	if (col == 2) {\n		return vec4(red.b, green.b, blue.b, 1.0);\n	}\n	return vec4(0.0, 0.0, 0.0, 0.0);\n}\n\nvoid main() {\n	vec4 color;\n	vec2 uv = gl_FragCoord.xy / u_resolution;\n	uv.y = 1.0 - uv.y;\n\n	color = // $(getColor);\n\n  	color = (color * u_slope) + u_intercept;\n\n	// $(u_invert)\n\n	gl_FragColor = color;\n}\n";
class ColorProgram {
  constructor(gl, info) {
    const shaderString = ColorProgram.programStringForInfo(info);
    const programInfo = createProgramInfo(gl, [vertexShader$1, shaderString]);
    this.unitQuadBufferInfo = primitives.createXYQuadBufferInfo(gl);
    this.programInfo = programInfo;
    this.gl = gl;
  }
  static programStringForInfo(imageInfo) {
    const {
      planar,
      invert
    } = imageInfo;
    let shaderString;
    if (planar) {
      shaderString = colorShader.replace("// $(getColor);", "getPlanar(uv);\n");
    } else {
      shaderString = colorShader.replace("// $(getColor);", "texture2D(u_texture, uv);\n");
    }
    if (invert) {
      shaderString = shaderString.replace("// $(u_invert)", "color = vec4(1.0 - color.r, 1.0 - color.g, 1.0 - color.b, color.a);");
    }
    return shaderString;
  }
  use() {
    const {
      gl,
      programInfo,
      unitQuadBufferInfo
    } = this;
    bindFramebufferInfo(gl, null);
    gl.useProgram(programInfo.program);
    setBuffersAndAttributes(gl, programInfo, unitQuadBufferInfo);
  }
  run(frame, outputSize) {
    const {
      gl,
      programInfo,
      unitQuadBufferInfo
    } = this;
    const {
      invert,
      slope,
      intercept
    } = frame.imageInfo;
    const {
      texture
    } = frame;
    setUniforms(programInfo, {
      u_resolution: [outputSize.width, outputSize.height],
      u_texture: texture,
      u_invert: invert,
      u_slope: slope,
      u_intercept: intercept
    });
    drawBufferInfo(gl, unitQuadBufferInfo);
  }
  destroy() {
    this.gl.deleteProgram(this.programInfo.program);
  }
}
const vertexShader$2 = "attribute vec4 position;\n\nvoid main() {\n    gl_Position = position;\n}\n";
const greyscaleShader = "precision highp float;\nuniform sampler2D u_texture;\nuniform vec2 u_resolution;\nuniform float u_slope;\nuniform float u_intercept;\n\nuniform float u_winCenter;\nuniform float u_winWidth;\n\nfloat greyscale(vec4 color) {\n	$(word)\n}\n\nvoid main() {\n	vec2 uv = gl_FragCoord.xy / u_resolution;\n	uv.y = 1.0 - uv.y;\n\n	float grey = greyscale(texture2D(u_texture, uv));\n	// $(pixelPadding)\n	grey = (grey * u_slope) + u_intercept;\n\n	float center = u_winCenter - 0.5;\n	float width = max(u_winWidth, 1.0);\n	grey = (grey - center) / width + 0.5;\n	grey = clamp(grey, 0.0, 1.0);\n\n	// $(shouldInvert)\n	gl_FragColor = vec4(grey, grey, grey, 1);\n}\n";
class GreyscaleProgram {
  constructor(gl, info) {
    this.unitQuadBufferInfo = null;
    const greyscaleShaderString = GreyscaleProgram.programStringForInfo(info);
    const programInfo = createProgramInfo(gl, [vertexShader$2, greyscaleShaderString]);
    this.unitQuadBufferInfo = primitives.createXYQuadBufferInfo(gl);
    this.programInfo = programInfo;
    this.gl = gl;
    return this;
  }
  static programStringForInfo(info) {
    return preCompileGreyscaleShader(info, greyscaleShader);
  }
  use() {
    const {
      gl,
      programInfo,
      unitQuadBufferInfo
    } = this;
    bindFramebufferInfo(gl, null);
    gl.useProgram(programInfo.program);
    setBuffersAndAttributes(gl, programInfo, unitQuadBufferInfo);
  }
  run(frame, outputSize) {
    const {
      gl,
      unitQuadBufferInfo,
      programInfo
    } = this;
    const {
      texture,
      imageInfo
    } = frame;
    let {
      windowWidth,
      windowCenter
    } = imageInfo;
    const {
      maxPixVal,
      minPixVal,
      slope,
      intercept,
      signed,
      bitsAllocated
    } = imageInfo;
    if (!windowWidth && (maxPixVal !== null || minPixVal !== null)) {
      windowWidth = Math.abs((maxPixVal !== null && maxPixVal !== void 0 ? maxPixVal : 0) - (minPixVal !== null && minPixVal !== void 0 ? minPixVal : 0));
      windowCenter = ((maxPixVal || 0) + (minPixVal || 0)) / 2;
    }
    if (signed) {
      windowCenter = (windowCenter || 0) + 2 ** (bitsAllocated - 1);
    }
    setUniforms(programInfo, {
      u_resolution: [outputSize.width, outputSize.height],
      u_texture: texture,
      u_winWidth: windowWidth,
      u_winCenter: windowCenter,
      u_slope: slope,
      u_intercept: intercept
    });
    drawBufferInfo(gl, unitQuadBufferInfo);
  }
  destroy() {
    this.gl.deleteProgram(this.programInfo.program);
  }
}
const vertexShader$3 = "attribute vec4 position;\n\nvoid main() {\n    gl_Position = position;\n}\n";
const greyscaleLUTShader = "precision highp float;\nuniform sampler2D u_texture;\nuniform vec2 u_resolution;\nuniform sampler2D u_lutTexture;\nuniform float u_lutWidth;\nuniform float u_firstInputValue;\nuniform float u_maxValue;\n\nfloat greyscale(vec4 color) {\n	$(word)\n}\n\nvoid main() {\n	vec2 uv = gl_FragCoord.xy / u_resolution;\n	uv.y = 1.0 - uv.y;\n\n	float grey = greyscale(texture2D(u_texture, uv));\n	// $(pixelPadding)\n	float lutPos = (max(u_firstInputValue, grey) - u_firstInputValue);\n	grey = greyscale(texture2D(u_lutTexture, vec2(lutPos / u_lutWidth, 0.5))) / u_maxValue;\n	// $(shouldInvert)\n	gl_FragColor = vec4(grey, grey, grey, 1);\n}\n";
class GreyscaleLUTProgram {
  constructor(gl, info) {
    this.unitQuadBufferInfo = null;
    const fragShaderString = GreyscaleLUTProgram.programStringForInfo(info);
    const programInfo = createProgramInfo(gl, [vertexShader$3, fragShaderString]);
    this.programInfo = programInfo;
    this.gl = gl;
    this.info = info;
    return this;
  }
  static programStringForInfo(info) {
    return preCompileGreyscaleShader(info, greyscaleLUTShader);
  }
  use() {
    const {
      gl,
      programInfo
    } = this;
    const unitQuadBufferInfo = primitives.createXYQuadBufferInfo(gl);
    bindFramebufferInfo(gl, null);
    gl.useProgram(programInfo.program);
    setBuffersAndAttributes(gl, programInfo, unitQuadBufferInfo);
    this.unitQuadBufferInfo = unitQuadBufferInfo;
  }
  run(frame, outputSize) {
    const {
      gl,
      unitQuadBufferInfo,
      programInfo,
      info
    } = this;
    const {
      texture,
      imageInfo
    } = frame;
    const {
      lut
    } = imageInfo;
    let format = gl.LUMINANCE_ALPHA;
    let internalFormat = gl.LUMINANCE_ALPHA;
    if (info.bitsAllocated <= 8) {
      format = gl.LUMINANCE;
      internalFormat = gl.LUMINANCE;
    }
    const lutTexture = createTexture(gl, {
      src: new Uint8Array(lut.data.buffer),
      width: lut.data.length,
      height: 1,
      format,
      internalFormat,
      type: gl.UNSIGNED_BYTE,
      min: gl.NEAREST,
      mag: gl.NEAREST,
      wrap: gl.CLAMP_TO_EDGE
    });
    setUniforms(programInfo, {
      u_resolution: [outputSize.width, outputSize.height],
      u_texture: texture,
      u_lutTexture: lutTexture,
      u_lutWidth: lut.data.length,
      u_firstInputValue: lut.firstValue,
      u_maxValue: 2 ** info.bitsStored
    });
    drawBufferInfo(gl, unitQuadBufferInfo);
    setTimeout(() => {
      gl.deleteTexture(lutTexture);
    }, 0);
  }
  destroy() {
    const {
      gl
    } = this;
    gl.deleteProgram(this.programInfo.program);
  }
}
const vertexShader$4 = "attribute vec4 position;\n\nvoid main() {\n    gl_Position = position;\n}\n";
const colorPaletteShader = "precision highp float;\nuniform bool u_invert;\nuniform sampler2D u_texture;\nuniform vec2 u_resolution;\nuniform sampler2D u_redTexture;\nuniform sampler2D u_greenTexture;\nuniform sampler2D u_blueTexture;\nuniform float u_paletteWidthRatio;\n\nfloat getWord(vec4 color) {\n	$(word)\n}\n\nfloat getPaletteWord(vec4 color) {\n	$(paletteWord)\n}\n\nvoid main() {\n	vec2 uv = gl_FragCoord.xy / u_resolution;\n	uv.y = 1.0 - uv.y;\n\n	float palettePos = getWord(texture2D(u_texture, uv)) * u_paletteWidthRatio;\n\n	float red = getPaletteWord(texture2D(u_redTexture, vec2( palettePos, 0.5)));\n	float green = getPaletteWord(texture2D(u_greenTexture, vec2(palettePos, 0.5)));\n	float blue = getPaletteWord(texture2D(u_blueTexture, vec2(palettePos, 0.5)));\n\n	vec4 color = vec4(red, green, blue, 1.0);\n	if (u_invert) {\n		color = vec4(1.0 - color.r, 1.0 - color.g, 1.0 - color.b, 1.0);\n	}\n\n	gl_FragColor = color;\n}\n";
class ColorPaletteProgram {
  constructor(gl, info) {
    const programString = ColorPaletteProgram.programStringForInfo(info);
    const programInfo = createProgramInfo(gl, [vertexShader$4, programString]);
    this.programInfo = programInfo;
    this.gl = gl;
    this.unitQuadBufferInfo = primitives.createXYQuadBufferInfo(gl);
    return this;
  }
  static programStringForInfo(info) {
    const {
      palette
    } = info;
    const getWordString = glslUnpackWordString(info, false);
    const getPaletteWordString = glslUnpackWordString({
      ...info,
      rgb: false,
      bitsAllocated: palette.bitsAllocated,
      bitsStored: palette.bitsAllocated
    }, false);
    return colorPaletteShader.replace("$(word)", getWordString).replace("$(paletteWord)", getPaletteWordString);
  }
  use() {
    const {
      gl,
      programInfo,
      unitQuadBufferInfo
    } = this;
    bindFramebufferInfo(gl, null);
    gl.useProgram(programInfo.program);
    setBuffersAndAttributes(gl, programInfo, unitQuadBufferInfo);
  }
  run(frame, outputSize) {
    const {
      gl,
      unitQuadBufferInfo,
      programInfo
    } = this;
    const {
      texture,
      imageInfo
    } = frame;
    const {
      palette,
      invert,
      bitsAllocated
    } = imageInfo;
    let format = gl.LUMINANCE_ALPHA;
    let internalFormat = gl.LUMINANCE_ALPHA;
    if (palette.bitsAllocated === 8) {
      format = gl.LUMINANCE;
      internalFormat = gl.LUMINANCE;
    }
    const {
      r,
      g,
      b,
      nEntries
    } = palette;
    const red = createTexture(gl, {
      src: new Uint8Array(r.buffer, r.byteOffset, r.byteLength),
      width: nEntries,
      height: 1,
      format,
      internalFormat,
      type: gl.UNSIGNED_BYTE,
      min: gl.NEAREST,
      mag: gl.NEAREST,
      wrap: gl.CLAMP_TO_EDGE
    });
    const green = createTexture(gl, {
      src: new Uint8Array(g.buffer, g.byteOffset, g.byteLength),
      width: nEntries,
      height: 1,
      format,
      internalFormat,
      type: gl.UNSIGNED_BYTE,
      min: gl.NEAREST,
      mag: gl.NEAREST,
      wrap: gl.CLAMP_TO_EDGE
    });
    const blue = createTexture(gl, {
      src: new Uint8Array(b.buffer, b.byteOffset, b.byteLength),
      width: nEntries,
      height: 1,
      format,
      internalFormat,
      type: gl.UNSIGNED_BYTE,
      min: gl.NEAREST,
      mag: gl.NEAREST,
      wrap: gl.CLAMP_TO_EDGE
    });
    setUniforms(programInfo, {
      u_resolution: [outputSize.width, outputSize.height],
      u_texture: texture,
      u_redTexture: red,
      u_greenTexture: green,
      u_blueTexture: blue,
      u_paletteWidthRatio: 2 ** bitsAllocated / palette.nEntries,
      u_invert: invert
    });
    drawBufferInfo(gl, unitQuadBufferInfo);
    setTimeout(() => {
      gl.deleteTexture(red);
      gl.deleteTexture(green);
      gl.deleteTexture(blue);
    });
  }
  destroy() {
    const {
      gl,
      programInfo
    } = this;
    gl.deleteProgram(programInfo.program);
  }
}
class Renderer {
  constructor(inCanvas) {
    var _document;
    this.image = null;
    this.decoder = null;
    this.program = null;
    this.outSize = null;
    const canvas = inCanvas || ((_document = document) === null || _document === void 0 ? void 0 : _document.createElement("canvas")) || new HTMLCanvasElement();
    const gl = canvas.getContext("webgl");
    if (!gl) {
      throw Error("could not create webgl from canvas");
    }
    this.canvas = canvas;
    this.gl = gl;
    this.programCacheMap = new Map();
  }
  primeGreyscale(programType) {
    var _ref;
    const {
      hasLut,
      invert,
      signed,
      bitsAllocated,
      bitsStored,
      littleEndian,
      hasPixelPaddingValue,
      knownWindow
    } = programType;
    const imageType = {
      image: new DCMImage(),
      nFrames: 1,
      rgb: false,
      planar: false,
      signed: signed !== null && signed !== void 0 ? signed : false,
      size: new ImageSize({
        width: 0,
        height: 0
      }),
      codec: Codec.Uncompressed,
      samples: 0,
      bitsAllocated: bitsAllocated !== null && bitsAllocated !== void 0 ? bitsAllocated : 16,
      bytesAllocated: (bitsAllocated !== null && bitsAllocated !== void 0 ? bitsAllocated : 16) / 8,
      bitsStored: (_ref = bitsStored !== null && bitsStored !== void 0 ? bitsStored : bitsAllocated) !== null && _ref !== void 0 ? _ref : 16,
      littleEndian: littleEndian !== null && littleEndian !== void 0 ? littleEndian : true,
      data: new DataView(new ArrayBuffer(0)),
      lut: hasLut ? {
        nEntries: 0,
        firstValue: 0,
        bitsStored: 0,
        data: new Uint8Array(0)
      } : null,
      palette: null,
      invert: invert !== null && invert !== void 0 ? invert : false,
      pixelPaddingVal: hasPixelPaddingValue ? 1 : null,
      minPixVal: null,
      maxPixVal: null,
      windowCenter: knownWindow ? 0.5 : null,
      windowWidth: knownWindow ? 1 : null,
      slope: 1,
      intercept: 0
    };
    this.getProgram(imageType);
  }
  primeColor(programType) {
    const {
      planar,
      bitsAllocated,
      signed,
      littleEndian,
      hasPaletteWithWordBits,
      invert
    } = programType;
    const imageType = {
      image: new DCMImage(),
      nFrames: 1,
      rgb: true,
      planar: planar !== null && planar !== void 0 ? planar : false,
      signed: signed !== null && signed !== void 0 ? signed : false,
      size: new ImageSize({
        width: 0,
        height: 0
      }),
      codec: Codec.Uncompressed,
      samples: 3,
      bitsAllocated,
      bytesAllocated: bitsAllocated / 8,
      bitsStored: bitsAllocated,
      littleEndian: littleEndian !== null && littleEndian !== void 0 ? littleEndian : true,
      data: new DataView(new ArrayBuffer(0)),
      lut: null,
      palette: hasPaletteWithWordBits ? {
        nEntries: 0,
        firstValue: 0,
        bitsAllocated: hasPaletteWithWordBits,
        r: new DataView(new ArrayBuffer(0)),
        g: new DataView(new ArrayBuffer(0)),
        b: new DataView(new ArrayBuffer(0))
      } : null,
      invert: invert !== null && invert !== void 0 ? invert : false,
      pixelPaddingVal: null,
      minPixVal: null,
      maxPixVal: null,
      windowCenter: null,
      windowWidth: null,
      slope: 1,
      intercept: 0
    };
    this.getProgram(imageType);
  }
  render(image, frameNo = 0) {
    try {
      const _this = this;
      const {
        gl,
        canvas
      } = _this;
      if (!_this.outSize) {
        _this.outSize = new ImageSize(image);
      }
      const size = _this.outSize;
      if (size.width !== canvas.width || size.height !== canvas.height) {
        canvas.width = 1;
        canvas.height = 1;
        canvas.width = size.width;
        canvas.height = size.height;
      }
      if (_this.image !== image) {
        _this.image = image;
        const decoder = decoderForImage(image);
        decoder.outputSize = new ImageSize(image);
        const imageInfo = decoder.image;
        const program = _this.getProgram(imageInfo);
        program.use();
        _this.program = program;
        _this.decoder = decoder;
      }
      return Promise.resolve(_this.decoder.getFrame(gl, frameNo)).then(function(frame) {
        _this.program.run(frame, size);
        setTimeout(() => {
          frame.destroy();
        }, 0);
      });
    } catch (e) {
      return Promise.reject(e);
    }
  }
  set outputSize(size) {
    this.outSize = new ImageSize(size);
  }
  get outputSize() {
    if (this.outSize) {
      return this.outSize;
    }
    return new ImageSize({
      width: 0,
      height: 0
    });
  }
  clear() {
    const {
      gl,
      canvas
    } = this;
    canvas.width = 0;
    canvas.height = 0;
    gl.clear(gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT);
  }
  destroy(aggressive = false) {
    this.programCacheMap.forEach((program) => {
      program.destroy();
    });
    this.programCacheMap = new Map();
    this.program = null;
    this.image = null;
    if (aggressive) {
      var _this$gl$getExtension;
      (_this$gl$getExtension = this.gl.getExtension("WEBGL_lose_context")) === null || _this$gl$getExtension === void 0 ? void 0 : _this$gl$getExtension.loseContext();
      this.canvas.width = 1;
      this.canvas.height = 1;
    }
  }
  getProgram(imageInfo) {
    const {
      gl
    } = this;
    let signature = null;
    if (imageInfo.palette) {
      signature = {
        hash: sha12(ColorPaletteProgram.programStringForInfo(imageInfo)).toString(),
        Type: ColorPaletteProgram
      };
    } else if (imageInfo.rgb) {
      signature = {
        hash: sha12(ColorProgram.programStringForInfo(imageInfo)).toString(),
        Type: ColorProgram
      };
    } else if (imageInfo.windowCenter || imageInfo.minPixVal || imageInfo.maxPixVal) {
      signature = {
        hash: sha12(GreyscaleProgram.programStringForInfo(imageInfo)).toString(),
        Type: GreyscaleProgram
      };
    } else if (imageInfo.lut) {
      signature = {
        hash: sha12(GreyscaleLUTProgram.programStringForInfo(imageInfo)).toString(),
        Type: GreyscaleLUTProgram
      };
    } else {
      const [s0, s1] = ContrastifyProgram.programStringForInfo(imageInfo);
      signature = {
        hash: sha12(s0 + s1).toString(),
        Type: ContrastifyProgram
      };
    }
    let program = this.programCacheMap.get(signature.hash);
    if (!program) {
      program = new signature.Type(gl, imageInfo);
      this.programCacheMap.set(signature.hash, program);
    }
    return program;
  }
}
const render = function(image, canvas, scale = 1) {
  try {
    if (!image) {
      return Promise.reject(Series.parserError);
    }
    const renderer = new Renderer(canvas);
    const outSize = new ImageSize(image).scale(scale);
    renderer.outputSize = outSize;
    return Promise.resolve(renderer.render(image, 0)).then(function() {
      renderer.destroy();
      return Promise.resolve();
    });
  } catch (e) {
    return Promise.reject(e);
  }
};
export {Parser, Renderer, parseImage, render};
export default null;
